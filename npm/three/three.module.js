const REVISION="164dev";const MOUSE={LEFT:0,MIDDLE:1,RIGHT:2,ROTATE:0,DOLLY:1,PAN:2};const TOUCH={ROTATE:0,PAN:1,DOLLY_PAN:2,DOLLY_ROTATE:3};const CullFaceNone=0;const CullFaceBack=1;const CullFaceFront=2;const CullFaceFrontBack=3;const BasicShadowMap=0;const PCFShadowMap=1;const PCFSoftShadowMap=2;const VSMShadowMap=3;const FrontSide=0;const BackSide=1;const DoubleSide=2;const NoBlending=0;const NormalBlending=1;const AdditiveBlending=2;const SubtractiveBlending=3;const MultiplyBlending=4;const CustomBlending=5;const AddEquation=100;const SubtractEquation=101;const ReverseSubtractEquation=102;const MinEquation=103;const MaxEquation=104;const ZeroFactor=200;const OneFactor=201;const SrcColorFactor=202;const OneMinusSrcColorFactor=203;const SrcAlphaFactor=204;const OneMinusSrcAlphaFactor=205;const DstAlphaFactor=206;const OneMinusDstAlphaFactor=207;const DstColorFactor=208;const OneMinusDstColorFactor=209;const SrcAlphaSaturateFactor=210;const ConstantColorFactor=211;const OneMinusConstantColorFactor=212;const ConstantAlphaFactor=213;const OneMinusConstantAlphaFactor=214;const NeverDepth=0;const AlwaysDepth=1;const LessDepth=2;const LessEqualDepth=3;const EqualDepth=4;const GreaterEqualDepth=5;const GreaterDepth=6;const NotEqualDepth=7;const MultiplyOperation=0;const MixOperation=1;const AddOperation=2;const NoToneMapping=0;const LinearToneMapping=1;const ReinhardToneMapping=2;const CineonToneMapping=3;const ACESFilmicToneMapping=4;const CustomToneMapping=5;const AgXToneMapping=6;const NeutralToneMapping=7;const AttachedBindMode="attached";const DetachedBindMode="detached";const UVMapping=300;const CubeReflectionMapping=301;const CubeRefractionMapping=302;const EquirectangularReflectionMapping=303;const EquirectangularRefractionMapping=304;const CubeUVReflectionMapping=306;const RepeatWrapping=1e3;const ClampToEdgeWrapping=1001;const MirroredRepeatWrapping=1002;const NearestFilter=1003;const NearestMipmapNearestFilter=1004;const NearestMipMapNearestFilter=1004;const NearestMipmapLinearFilter=1005;const NearestMipMapLinearFilter=1005;const LinearFilter=1006;const LinearMipmapNearestFilter=1007;const LinearMipMapNearestFilter=1007;const LinearMipmapLinearFilter=1008;const LinearMipMapLinearFilter=1008;const UnsignedByteType=1009;const ByteType=1010;const ShortType=1011;const UnsignedShortType=1012;const IntType=1013;const UnsignedIntType=1014;const FloatType=1015;const HalfFloatType=1016;const UnsignedShort4444Type=1017;const UnsignedShort5551Type=1018;const UnsignedInt248Type=1020;const UnsignedInt5999Type=35902;const AlphaFormat=1021;const RGBFormat=1022;const RGBAFormat=1023;const LuminanceFormat=1024;const LuminanceAlphaFormat=1025;const DepthFormat=1026;const DepthStencilFormat=1027;const RedFormat=1028;const RedIntegerFormat=1029;const RGFormat=1030;const RGIntegerFormat=1031;const RGBAIntegerFormat=1033;const RGB_S3TC_DXT1_Format=33776;const RGBA_S3TC_DXT1_Format=33777;const RGBA_S3TC_DXT3_Format=33778;const RGBA_S3TC_DXT5_Format=33779;const RGB_PVRTC_4BPPV1_Format=35840;const RGB_PVRTC_2BPPV1_Format=35841;const RGBA_PVRTC_4BPPV1_Format=35842;const RGBA_PVRTC_2BPPV1_Format=35843;const RGB_ETC1_Format=36196;const RGB_ETC2_Format=37492;const RGBA_ETC2_EAC_Format=37496;const RGBA_ASTC_4x4_Format=37808;const RGBA_ASTC_5x4_Format=37809;const RGBA_ASTC_5x5_Format=37810;const RGBA_ASTC_6x5_Format=37811;const RGBA_ASTC_6x6_Format=37812;const RGBA_ASTC_8x5_Format=37813;const RGBA_ASTC_8x6_Format=37814;const RGBA_ASTC_8x8_Format=37815;const RGBA_ASTC_10x5_Format=37816;const RGBA_ASTC_10x6_Format=37817;const RGBA_ASTC_10x8_Format=37818;const RGBA_ASTC_10x10_Format=37819;const RGBA_ASTC_12x10_Format=37820;const RGBA_ASTC_12x12_Format=37821;const RGBA_BPTC_Format=36492;const RGB_BPTC_SIGNED_Format=36494;const RGB_BPTC_UNSIGNED_Format=36495;const RED_RGTC1_Format=36283;const SIGNED_RED_RGTC1_Format=36284;const RED_GREEN_RGTC2_Format=36285;const SIGNED_RED_GREEN_RGTC2_Format=36286;const LoopOnce=2200;const LoopRepeat=2201;const LoopPingPong=2202;const InterpolateDiscrete=2300;const InterpolateLinear=2301;const InterpolateSmooth=2302;const ZeroCurvatureEnding=2400;const ZeroSlopeEnding=2401;const WrapAroundEnding=2402;const NormalAnimationBlendMode=2500;const AdditiveAnimationBlendMode=2501;const TrianglesDrawMode=0;const TriangleStripDrawMode=1;const TriangleFanDrawMode=2;const BasicDepthPacking=3200;const RGBADepthPacking=3201;const TangentSpaceNormalMap=0;const ObjectSpaceNormalMap=1;const NoColorSpace="";const SRGBColorSpace="srgb";const LinearSRGBColorSpace="srgb-linear";const DisplayP3ColorSpace="display-p3";const LinearDisplayP3ColorSpace="display-p3-linear";const LinearTransfer="linear";const SRGBTransfer="srgb";const Rec709Primaries="rec709";const P3Primaries="p3";const ZeroStencilOp=0;const KeepStencilOp=7680;const ReplaceStencilOp=7681;const IncrementStencilOp=7682;const DecrementStencilOp=7683;const IncrementWrapStencilOp=34055;const DecrementWrapStencilOp=34056;const InvertStencilOp=5386;const NeverStencilFunc=512;const LessStencilFunc=513;const EqualStencilFunc=514;const LessEqualStencilFunc=515;const GreaterStencilFunc=516;const NotEqualStencilFunc=517;const GreaterEqualStencilFunc=518;const AlwaysStencilFunc=519;const NeverCompare=512;const LessCompare=513;const EqualCompare=514;const LessEqualCompare=515;const GreaterCompare=516;const NotEqualCompare=517;const GreaterEqualCompare=518;const AlwaysCompare=519;const StaticDrawUsage=35044;const DynamicDrawUsage=35048;const StreamDrawUsage=35040;const StaticReadUsage=35045;const DynamicReadUsage=35049;const StreamReadUsage=35041;const StaticCopyUsage=35046;const DynamicCopyUsage=35050;const StreamCopyUsage=35042;const GLSL1="100";const GLSL3="300 es";const WebGLCoordinateSystem=2e3;const WebGPUCoordinateSystem=2001;class EventDispatcher{addEventListener(e,t){if(this._listeners===undefined)this._listeners={};const n=this._listeners;if(n[e]===undefined){n[e]=[]}if(n[e].indexOf(t)===-1){n[e].push(t)}}hasEventListener(e,t){if(this._listeners===undefined)return false;const n=this._listeners;return n[e]!==undefined&&n[e].indexOf(t)!==-1}removeEventListener(e,t){if(this._listeners===undefined)return;const n=this._listeners;const i=n[e];if(i!==undefined){const r=i.indexOf(t);if(r!==-1){i.splice(r,1)}}}dispatchEvent(n){if(this._listeners===undefined)return;const e=this._listeners;const t=e[n.type];if(t!==undefined){n.target=this;const i=t.slice(0);for(let e=0,t=i.length;e<t;e++){i[e].call(this,n)}n.target=null}}}const _lut=["00","01","02","03","04","05","06","07","08","09","0a","0b","0c","0d","0e","0f","10","11","12","13","14","15","16","17","18","19","1a","1b","1c","1d","1e","1f","20","21","22","23","24","25","26","27","28","29","2a","2b","2c","2d","2e","2f","30","31","32","33","34","35","36","37","38","39","3a","3b","3c","3d","3e","3f","40","41","42","43","44","45","46","47","48","49","4a","4b","4c","4d","4e","4f","50","51","52","53","54","55","56","57","58","59","5a","5b","5c","5d","5e","5f","60","61","62","63","64","65","66","67","68","69","6a","6b","6c","6d","6e","6f","70","71","72","73","74","75","76","77","78","79","7a","7b","7c","7d","7e","7f","80","81","82","83","84","85","86","87","88","89","8a","8b","8c","8d","8e","8f","90","91","92","93","94","95","96","97","98","99","9a","9b","9c","9d","9e","9f","a0","a1","a2","a3","a4","a5","a6","a7","a8","a9","aa","ab","ac","ad","ae","af","b0","b1","b2","b3","b4","b5","b6","b7","b8","b9","ba","bb","bc","bd","be","bf","c0","c1","c2","c3","c4","c5","c6","c7","c8","c9","ca","cb","cc","cd","ce","cf","d0","d1","d2","d3","d4","d5","d6","d7","d8","d9","da","db","dc","dd","de","df","e0","e1","e2","e3","e4","e5","e6","e7","e8","e9","ea","eb","ec","ed","ee","ef","f0","f1","f2","f3","f4","f5","f6","f7","f8","f9","fa","fb","fc","fd","fe","ff"];let _seed=1234567;const DEG2RAD=Math.PI/180;const RAD2DEG=180/Math.PI;function generateUUID(){const e=Math.random()*4294967295|0;const t=Math.random()*4294967295|0;const n=Math.random()*4294967295|0;const i=Math.random()*4294967295|0;const r=_lut[e&255]+_lut[e>>8&255]+_lut[e>>16&255]+_lut[e>>24&255]+"-"+_lut[t&255]+_lut[t>>8&255]+"-"+_lut[t>>16&15|64]+_lut[t>>24&255]+"-"+_lut[n&63|128]+_lut[n>>8&255]+"-"+_lut[n>>16&255]+_lut[n>>24&255]+_lut[i&255]+_lut[i>>8&255]+_lut[i>>16&255]+_lut[i>>24&255];return r.toLowerCase()}function clamp(e,t,n){return Math.max(t,Math.min(n,e))}function euclideanModulo(e,t){return(e%t+t)%t}function mapLinear(e,t,n,i,r){return i+(e-t)*(r-i)/(n-t)}function inverseLerp(e,t,n){if(e!==t){return(n-e)/(t-e)}else{return 0}}function lerp(e,t,n){return(1-n)*e+n*t}function damp(e,t,n,i){return lerp(e,t,1-Math.exp(-n*i))}function pingpong(e,t=1){return t-Math.abs(euclideanModulo(e,t*2)-t)}function smoothstep(e,t,n){if(e<=t)return 0;if(e>=n)return 1;e=(e-t)/(n-t);return e*e*(3-2*e)}function smootherstep(e,t,n){if(e<=t)return 0;if(e>=n)return 1;e=(e-t)/(n-t);return e*e*e*(e*(e*6-15)+10)}function randInt(e,t){return e+Math.floor(Math.random()*(t-e+1))}function randFloat(e,t){return e+Math.random()*(t-e)}function randFloatSpread(e){return e*(.5-Math.random())}function seededRandom(e){if(e!==undefined)_seed=e;let t=_seed+=1831565813;t=Math.imul(t^t>>>15,t|1);t^=t+Math.imul(t^t>>>7,t|61);return((t^t>>>14)>>>0)/4294967296}function degToRad(e){return e*DEG2RAD}function radToDeg(e){return e*RAD2DEG}function isPowerOfTwo(e){return(e&e-1)===0&&e!==0}function ceilPowerOfTwo(e){return Math.pow(2,Math.ceil(Math.log(e)/Math.LN2))}function floorPowerOfTwo(e){return Math.pow(2,Math.floor(Math.log(e)/Math.LN2))}function setQuaternionFromProperEuler(e,t,n,i,r){const s=Math.cos;const a=Math.sin;const o=s(n/2);const l=a(n/2);const c=s((t+i)/2);const u=a((t+i)/2);const h=s((t-i)/2);const d=a((t-i)/2);const f=s((i-t)/2);const p=a((i-t)/2);switch(r){case"XYX":e.set(o*u,l*h,l*d,o*c);break;case"YZY":e.set(l*d,o*u,l*h,o*c);break;case"ZXZ":e.set(l*h,l*d,o*u,o*c);break;case"XZX":e.set(o*u,l*p,l*f,o*c);break;case"YXY":e.set(l*f,o*u,l*p,o*c);break;case"ZYZ":e.set(l*p,l*f,o*u,o*c);break;default:console.warn("THREE.MathUtils: .setQuaternionFromProperEuler() encountered an unknown order: "+r)}}function denormalize(e,t){switch(t.constructor){case Float32Array:return e;case Uint32Array:return e/4294967295;case Uint16Array:return e/65535;case Uint8Array:return e/255;case Int32Array:return Math.max(e/2147483647,-1);case Int16Array:return Math.max(e/32767,-1);case Int8Array:return Math.max(e/127,-1);default:throw new Error("Invalid component type.")}}function normalize(e,t){switch(t.constructor){case Float32Array:return e;case Uint32Array:return Math.round(e*4294967295);case Uint16Array:return Math.round(e*65535);case Uint8Array:return Math.round(e*255);case Int32Array:return Math.round(e*2147483647);case Int16Array:return Math.round(e*32767);case Int8Array:return Math.round(e*127);default:throw new Error("Invalid component type.")}}const MathUtils={DEG2RAD:DEG2RAD,RAD2DEG:RAD2DEG,generateUUID:generateUUID,clamp:clamp,euclideanModulo:euclideanModulo,mapLinear:mapLinear,inverseLerp:inverseLerp,lerp:lerp,damp:damp,pingpong:pingpong,smoothstep:smoothstep,smootherstep:smootherstep,randInt:randInt,randFloat:randFloat,randFloatSpread:randFloatSpread,seededRandom:seededRandom,degToRad:degToRad,radToDeg:radToDeg,isPowerOfTwo:isPowerOfTwo,ceilPowerOfTwo:ceilPowerOfTwo,floorPowerOfTwo:floorPowerOfTwo,setQuaternionFromProperEuler:setQuaternionFromProperEuler,normalize:normalize,denormalize:denormalize};class Vector2{constructor(e=0,t=0){Vector2.prototype.isVector2=true;this.x=e;this.y=t}get width(){return this.x}set width(e){this.x=e}get height(){return this.y}set height(e){this.y=e}set(e,t){this.x=e;this.y=t;return this}setScalar(e){this.x=e;this.y=e;return this}setX(e){this.x=e;return this}setY(e){this.y=e;return this}setComponent(e,t){switch(e){case 0:this.x=t;break;case 1:this.y=t;break;default:throw new Error("index is out of range: "+e)}return this}getComponent(e){switch(e){case 0:return this.x;case 1:return this.y;default:throw new Error("index is out of range: "+e)}}clone(){return new this.constructor(this.x,this.y)}copy(e){this.x=e.x;this.y=e.y;return this}add(e){this.x+=e.x;this.y+=e.y;return this}addScalar(e){this.x+=e;this.y+=e;return this}addVectors(e,t){this.x=e.x+t.x;this.y=e.y+t.y;return this}addScaledVector(e,t){this.x+=e.x*t;this.y+=e.y*t;return this}sub(e){this.x-=e.x;this.y-=e.y;return this}subScalar(e){this.x-=e;this.y-=e;return this}subVectors(e,t){this.x=e.x-t.x;this.y=e.y-t.y;return this}multiply(e){this.x*=e.x;this.y*=e.y;return this}multiplyScalar(e){this.x*=e;this.y*=e;return this}divide(e){this.x/=e.x;this.y/=e.y;return this}divideScalar(e){return this.multiplyScalar(1/e)}applyMatrix3(e){const t=this.x,n=this.y;const i=e.elements;this.x=i[0]*t+i[3]*n+i[6];this.y=i[1]*t+i[4]*n+i[7];return this}min(e){this.x=Math.min(this.x,e.x);this.y=Math.min(this.y,e.y);return this}max(e){this.x=Math.max(this.x,e.x);this.y=Math.max(this.y,e.y);return this}clamp(e,t){this.x=Math.max(e.x,Math.min(t.x,this.x));this.y=Math.max(e.y,Math.min(t.y,this.y));return this}clampScalar(e,t){this.x=Math.max(e,Math.min(t,this.x));this.y=Math.max(e,Math.min(t,this.y));return this}clampLength(e,t){const n=this.length();return this.divideScalar(n||1).multiplyScalar(Math.max(e,Math.min(t,n)))}floor(){this.x=Math.floor(this.x);this.y=Math.floor(this.y);return this}ceil(){this.x=Math.ceil(this.x);this.y=Math.ceil(this.y);return this}round(){this.x=Math.round(this.x);this.y=Math.round(this.y);return this}roundToZero(){this.x=Math.trunc(this.x);this.y=Math.trunc(this.y);return this}negate(){this.x=-this.x;this.y=-this.y;return this}dot(e){return this.x*e.x+this.y*e.y}cross(e){return this.x*e.y-this.y*e.x}lengthSq(){return this.x*this.x+this.y*this.y}length(){return Math.sqrt(this.x*this.x+this.y*this.y)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)}normalize(){return this.divideScalar(this.length()||1)}angle(){const e=Math.atan2(-this.y,-this.x)+Math.PI;return e}angleTo(e){const t=Math.sqrt(this.lengthSq()*e.lengthSq());if(t===0)return Math.PI/2;const n=this.dot(e)/t;return Math.acos(clamp(n,-1,1))}distanceTo(e){return Math.sqrt(this.distanceToSquared(e))}distanceToSquared(e){const t=this.x-e.x,n=this.y-e.y;return t*t+n*n}manhattanDistanceTo(e){return Math.abs(this.x-e.x)+Math.abs(this.y-e.y)}setLength(e){return this.normalize().multiplyScalar(e)}lerp(e,t){this.x+=(e.x-this.x)*t;this.y+=(e.y-this.y)*t;return this}lerpVectors(e,t,n){this.x=e.x+(t.x-e.x)*n;this.y=e.y+(t.y-e.y)*n;return this}equals(e){return e.x===this.x&&e.y===this.y}fromArray(e,t=0){this.x=e[t];this.y=e[t+1];return this}toArray(e=[],t=0){e[t]=this.x;e[t+1]=this.y;return e}fromBufferAttribute(e,t){this.x=e.getX(t);this.y=e.getY(t);return this}rotateAround(e,t){const n=Math.cos(t),i=Math.sin(t);const r=this.x-e.x;const s=this.y-e.y;this.x=r*n-s*i+e.x;this.y=r*i+s*n+e.y;return this}random(){this.x=Math.random();this.y=Math.random();return this}*[Symbol.iterator](){yield this.x;yield this.y}}class Matrix3{constructor(e,t,n,i,r,s,a,o,l){Matrix3.prototype.isMatrix3=true;this.elements=[1,0,0,0,1,0,0,0,1];if(e!==undefined){this.set(e,t,n,i,r,s,a,o,l)}}set(e,t,n,i,r,s,a,o,l){const c=this.elements;c[0]=e;c[1]=i;c[2]=a;c[3]=t;c[4]=r;c[5]=o;c[6]=n;c[7]=s;c[8]=l;return this}identity(){this.set(1,0,0,0,1,0,0,0,1);return this}copy(e){const t=this.elements;const n=e.elements;t[0]=n[0];t[1]=n[1];t[2]=n[2];t[3]=n[3];t[4]=n[4];t[5]=n[5];t[6]=n[6];t[7]=n[7];t[8]=n[8];return this}extractBasis(e,t,n){e.setFromMatrix3Column(this,0);t.setFromMatrix3Column(this,1);n.setFromMatrix3Column(this,2);return this}setFromMatrix4(e){const t=e.elements;this.set(t[0],t[4],t[8],t[1],t[5],t[9],t[2],t[6],t[10]);return this}multiply(e){return this.multiplyMatrices(this,e)}premultiply(e){return this.multiplyMatrices(e,this)}multiplyMatrices(e,t){const n=e.elements;const i=t.elements;const r=this.elements;const s=n[0],a=n[3],o=n[6];const l=n[1],c=n[4],u=n[7];const h=n[2],d=n[5],f=n[8];const p=i[0],m=i[3],g=i[6];const _=i[1],v=i[4],y=i[7];const x=i[2],M=i[5],S=i[8];r[0]=s*p+a*_+o*x;r[3]=s*m+a*v+o*M;r[6]=s*g+a*y+o*S;r[1]=l*p+c*_+u*x;r[4]=l*m+c*v+u*M;r[7]=l*g+c*y+u*S;r[2]=h*p+d*_+f*x;r[5]=h*m+d*v+f*M;r[8]=h*g+d*y+f*S;return this}multiplyScalar(e){const t=this.elements;t[0]*=e;t[3]*=e;t[6]*=e;t[1]*=e;t[4]*=e;t[7]*=e;t[2]*=e;t[5]*=e;t[8]*=e;return this}determinant(){const e=this.elements;const t=e[0],n=e[1],i=e[2],r=e[3],s=e[4],a=e[5],o=e[6],l=e[7],c=e[8];return t*s*c-t*a*l-n*r*c+n*a*o+i*r*l-i*s*o}invert(){const e=this.elements,t=e[0],n=e[1],i=e[2],r=e[3],s=e[4],a=e[5],o=e[6],l=e[7],c=e[8],u=c*s-a*l,h=a*o-c*r,d=l*r-s*o,f=t*u+n*h+i*d;if(f===0)return this.set(0,0,0,0,0,0,0,0,0);const p=1/f;e[0]=u*p;e[1]=(i*l-c*n)*p;e[2]=(a*n-i*s)*p;e[3]=h*p;e[4]=(c*t-i*o)*p;e[5]=(i*r-a*t)*p;e[6]=d*p;e[7]=(n*o-l*t)*p;e[8]=(s*t-n*r)*p;return this}transpose(){let e;const t=this.elements;e=t[1];t[1]=t[3];t[3]=e;e=t[2];t[2]=t[6];t[6]=e;e=t[5];t[5]=t[7];t[7]=e;return this}getNormalMatrix(e){return this.setFromMatrix4(e).invert().transpose()}transposeIntoArray(e){const t=this.elements;e[0]=t[0];e[1]=t[3];e[2]=t[6];e[3]=t[1];e[4]=t[4];e[5]=t[7];e[6]=t[2];e[7]=t[5];e[8]=t[8];return this}setUvTransform(e,t,n,i,r,s,a){const o=Math.cos(r);const l=Math.sin(r);this.set(n*o,n*l,-n*(o*s+l*a)+s+e,-i*l,i*o,-i*(-l*s+o*a)+a+t,0,0,1);return this}scale(e,t){this.premultiply(_m3.makeScale(e,t));return this}rotate(e){this.premultiply(_m3.makeRotation(-e));return this}translate(e,t){this.premultiply(_m3.makeTranslation(e,t));return this}makeTranslation(e,t){if(e.isVector2){this.set(1,0,e.x,0,1,e.y,0,0,1)}else{this.set(1,0,e,0,1,t,0,0,1)}return this}makeRotation(e){const t=Math.cos(e);const n=Math.sin(e);this.set(t,-n,0,n,t,0,0,0,1);return this}makeScale(e,t){this.set(e,0,0,0,t,0,0,0,1);return this}equals(e){const t=this.elements;const n=e.elements;for(let e=0;e<9;e++){if(t[e]!==n[e])return false}return true}fromArray(t,n=0){for(let e=0;e<9;e++){this.elements[e]=t[e+n]}return this}toArray(e=[],t=0){const n=this.elements;e[t]=n[0];e[t+1]=n[1];e[t+2]=n[2];e[t+3]=n[3];e[t+4]=n[4];e[t+5]=n[5];e[t+6]=n[6];e[t+7]=n[7];e[t+8]=n[8];return e}clone(){return(new this.constructor).fromArray(this.elements)}}const _m3=new Matrix3;function arrayNeedsUint32(t){for(let e=t.length-1;e>=0;--e){if(t[e]>=65535)return true}return false}const TYPED_ARRAYS={Int8Array:Int8Array,Uint8Array:Uint8Array,Uint8ClampedArray:Uint8ClampedArray,Int16Array:Int16Array,Uint16Array:Uint16Array,Int32Array:Int32Array,Uint32Array:Uint32Array,Float32Array:Float32Array,Float64Array:Float64Array};function getTypedArray(e,t){return new TYPED_ARRAYS[e](t)}function createElementNS(e){return document.createElementNS("http://www.w3.org/1999/xhtml",e)}function createCanvasElement(){const e=createElementNS("canvas");e.style.display="block";return e}const _cache={};function warnOnce(e){if(e in _cache)return;_cache[e]=true;console.warn(e)}const LINEAR_SRGB_TO_LINEAR_DISPLAY_P3=(new Matrix3).set(.8224621,.177538,0,.0331941,.9668058,0,.0170827,.0723974,.9105199);const LINEAR_DISPLAY_P3_TO_LINEAR_SRGB=(new Matrix3).set(1.2249401,-.2249404,0,-.0420569,1.0420571,0,-.0196376,-.0786361,1.0982735);const COLOR_SPACES={[LinearSRGBColorSpace]:{transfer:LinearTransfer,primaries:Rec709Primaries,toReference:e=>e,fromReference:e=>e},[SRGBColorSpace]:{transfer:SRGBTransfer,primaries:Rec709Primaries,toReference:e=>e.convertSRGBToLinear(),fromReference:e=>e.convertLinearToSRGB()},[LinearDisplayP3ColorSpace]:{transfer:LinearTransfer,primaries:P3Primaries,toReference:e=>e.applyMatrix3(LINEAR_DISPLAY_P3_TO_LINEAR_SRGB),fromReference:e=>e.applyMatrix3(LINEAR_SRGB_TO_LINEAR_DISPLAY_P3)},[DisplayP3ColorSpace]:{transfer:SRGBTransfer,primaries:P3Primaries,toReference:e=>e.convertSRGBToLinear().applyMatrix3(LINEAR_DISPLAY_P3_TO_LINEAR_SRGB),fromReference:e=>e.applyMatrix3(LINEAR_SRGB_TO_LINEAR_DISPLAY_P3).convertLinearToSRGB()}};const SUPPORTED_WORKING_COLOR_SPACES=new Set([LinearSRGBColorSpace,LinearDisplayP3ColorSpace]);const ColorManagement={enabled:true,_workingColorSpace:LinearSRGBColorSpace,get workingColorSpace(){return this._workingColorSpace},set workingColorSpace(e){if(!SUPPORTED_WORKING_COLOR_SPACES.has(e)){throw new Error(`Unsupported working color space, "${e}".`)}this._workingColorSpace=e},convert:function(e,t,n){if(this.enabled===false||t===n||!t||!n){return e}const i=COLOR_SPACES[t].toReference;const r=COLOR_SPACES[n].fromReference;return r(i(e))},fromWorkingColorSpace:function(e,t){return this.convert(e,this._workingColorSpace,t)},toWorkingColorSpace:function(e,t){return this.convert(e,t,this._workingColorSpace)},getPrimaries:function(e){return COLOR_SPACES[e].primaries},getTransfer:function(e){if(e===NoColorSpace)return LinearTransfer;return COLOR_SPACES[e].transfer}};function SRGBToLinear(e){return e<.04045?e*.0773993808:Math.pow(e*.9478672986+.0521327014,2.4)}function LinearToSRGB(e){return e<.0031308?e*12.92:1.055*Math.pow(e,.41666)-.055}let _canvas;class ImageUtils{static getDataURL(e){if(/^data:/i.test(e.src)){return e.src}if(typeof HTMLCanvasElement==="undefined"){return e.src}let t;if(e instanceof HTMLCanvasElement){t=e}else{if(_canvas===undefined)_canvas=createElementNS("canvas");_canvas.width=e.width;_canvas.height=e.height;const n=_canvas.getContext("2d");if(e instanceof ImageData){n.putImageData(e,0,0)}else{n.drawImage(e,0,0,e.width,e.height)}t=_canvas}if(t.width>2048||t.height>2048){console.warn("THREE.ImageUtils.getDataURL: Image converted to jpg for performance reasons",e);return t.toDataURL("image/jpeg",.6)}else{return t.toDataURL("image/png")}}static sRGBToLinear(e){if(typeof HTMLImageElement!=="undefined"&&e instanceof HTMLImageElement||typeof HTMLCanvasElement!=="undefined"&&e instanceof HTMLCanvasElement||typeof ImageBitmap!=="undefined"&&e instanceof ImageBitmap){const t=createElementNS("canvas");t.width=e.width;t.height=e.height;const n=t.getContext("2d");n.drawImage(e,0,0,e.width,e.height);const i=n.getImageData(0,0,e.width,e.height);const r=i.data;for(let e=0;e<r.length;e++){r[e]=SRGBToLinear(r[e]/255)*255}n.putImageData(i,0,0);return t}else if(e.data){const r=e.data.slice(0);for(let e=0;e<r.length;e++){if(r instanceof Uint8Array||r instanceof Uint8ClampedArray){r[e]=Math.floor(SRGBToLinear(r[e]/255)*255)}else{r[e]=SRGBToLinear(r[e])}}return{data:r,width:e.width,height:e.height}}else{console.warn("THREE.ImageUtils.sRGBToLinear(): Unsupported image type. No color space conversion applied.");return e}}}let _sourceId=0;class Source{constructor(e=null){this.isSource=true;Object.defineProperty(this,"id",{value:_sourceId++});this.uuid=generateUUID();this.data=e;this.dataReady=true;this.version=0}set needsUpdate(e){if(e===true)this.version++}toJSON(e){const t=e===undefined||typeof e==="string";if(!t&&e.images[this.uuid]!==undefined){return e.images[this.uuid]}const i={uuid:this.uuid,url:""};const r=this.data;if(r!==null){let n;if(Array.isArray(r)){n=[];for(let e=0,t=r.length;e<t;e++){if(r[e].isDataTexture){n.push(serializeImage(r[e].image))}else{n.push(serializeImage(r[e]))}}}else{n=serializeImage(r)}i.url=n}if(!t){e.images[this.uuid]=i}return i}}function serializeImage(e){if(typeof HTMLImageElement!=="undefined"&&e instanceof HTMLImageElement||typeof HTMLCanvasElement!=="undefined"&&e instanceof HTMLCanvasElement||typeof ImageBitmap!=="undefined"&&e instanceof ImageBitmap){return ImageUtils.getDataURL(e)}else{if(e.data){return{data:Array.from(e.data),width:e.width,height:e.height,type:e.data.constructor.name}}else{console.warn("THREE.Texture: Unable to serialize Texture.");return{}}}}let _textureId=0;class Texture extends EventDispatcher{constructor(e=Texture.DEFAULT_IMAGE,t=Texture.DEFAULT_MAPPING,n=ClampToEdgeWrapping,i=ClampToEdgeWrapping,r=LinearFilter,s=LinearMipmapLinearFilter,a=RGBAFormat,o=UnsignedByteType,l=Texture.DEFAULT_ANISOTROPY,c=NoColorSpace){super();this.isTexture=true;Object.defineProperty(this,"id",{value:_textureId++});this.uuid=generateUUID();this.name="";this.source=new Source(e);this.mipmaps=[];this.mapping=t;this.channel=0;this.wrapS=n;this.wrapT=i;this.magFilter=r;this.minFilter=s;this.anisotropy=l;this.format=a;this.internalFormat=null;this.type=o;this.offset=new Vector2(0,0);this.repeat=new Vector2(1,1);this.center=new Vector2(0,0);this.rotation=0;this.matrixAutoUpdate=true;this.matrix=new Matrix3;this.generateMipmaps=true;this.premultiplyAlpha=false;this.flipY=true;this.unpackAlignment=4;this.colorSpace=c;this.userData={};this.version=0;this.onUpdate=null;this.isRenderTargetTexture=false;this.pmremVersion=0}get image(){return this.source.data}set image(e=null){this.source.data=e}updateMatrix(){this.matrix.setUvTransform(this.offset.x,this.offset.y,this.repeat.x,this.repeat.y,this.rotation,this.center.x,this.center.y)}clone(){return(new this.constructor).copy(this)}copy(e){this.name=e.name;this.source=e.source;this.mipmaps=e.mipmaps.slice(0);this.mapping=e.mapping;this.channel=e.channel;this.wrapS=e.wrapS;this.wrapT=e.wrapT;this.magFilter=e.magFilter;this.minFilter=e.minFilter;this.anisotropy=e.anisotropy;this.format=e.format;this.internalFormat=e.internalFormat;this.type=e.type;this.offset.copy(e.offset);this.repeat.copy(e.repeat);this.center.copy(e.center);this.rotation=e.rotation;this.matrixAutoUpdate=e.matrixAutoUpdate;this.matrix.copy(e.matrix);this.generateMipmaps=e.generateMipmaps;this.premultiplyAlpha=e.premultiplyAlpha;this.flipY=e.flipY;this.unpackAlignment=e.unpackAlignment;this.colorSpace=e.colorSpace;this.userData=JSON.parse(JSON.stringify(e.userData));this.needsUpdate=true;return this}toJSON(e){const t=e===undefined||typeof e==="string";if(!t&&e.textures[this.uuid]!==undefined){return e.textures[this.uuid]}const n={metadata:{version:4.6,type:"Texture",generator:"Texture.toJSON"},uuid:this.uuid,name:this.name,image:this.source.toJSON(e).uuid,mapping:this.mapping,channel:this.channel,repeat:[this.repeat.x,this.repeat.y],offset:[this.offset.x,this.offset.y],center:[this.center.x,this.center.y],rotation:this.rotation,wrap:[this.wrapS,this.wrapT],format:this.format,internalFormat:this.internalFormat,type:this.type,colorSpace:this.colorSpace,minFilter:this.minFilter,magFilter:this.magFilter,anisotropy:this.anisotropy,flipY:this.flipY,generateMipmaps:this.generateMipmaps,premultiplyAlpha:this.premultiplyAlpha,unpackAlignment:this.unpackAlignment};if(Object.keys(this.userData).length>0)n.userData=this.userData;if(!t){e.textures[this.uuid]=n}return n}dispose(){this.dispatchEvent({type:"dispose"})}transformUv(e){if(this.mapping!==UVMapping)return e;e.applyMatrix3(this.matrix);if(e.x<0||e.x>1){switch(this.wrapS){case RepeatWrapping:e.x=e.x-Math.floor(e.x);break;case ClampToEdgeWrapping:e.x=e.x<0?0:1;break;case MirroredRepeatWrapping:if(Math.abs(Math.floor(e.x)%2)===1){e.x=Math.ceil(e.x)-e.x}else{e.x=e.x-Math.floor(e.x)}break}}if(e.y<0||e.y>1){switch(this.wrapT){case RepeatWrapping:e.y=e.y-Math.floor(e.y);break;case ClampToEdgeWrapping:e.y=e.y<0?0:1;break;case MirroredRepeatWrapping:if(Math.abs(Math.floor(e.y)%2)===1){e.y=Math.ceil(e.y)-e.y}else{e.y=e.y-Math.floor(e.y)}break}}if(this.flipY){e.y=1-e.y}return e}set needsUpdate(e){if(e===true){this.version++;this.source.needsUpdate=true}}set needsPMREMUpdate(e){if(e===true){this.pmremVersion++}}}Texture.DEFAULT_IMAGE=null;Texture.DEFAULT_MAPPING=UVMapping;Texture.DEFAULT_ANISOTROPY=1;class Vector4{constructor(e=0,t=0,n=0,i=1){Vector4.prototype.isVector4=true;this.x=e;this.y=t;this.z=n;this.w=i}get width(){return this.z}set width(e){this.z=e}get height(){return this.w}set height(e){this.w=e}set(e,t,n,i){this.x=e;this.y=t;this.z=n;this.w=i;return this}setScalar(e){this.x=e;this.y=e;this.z=e;this.w=e;return this}setX(e){this.x=e;return this}setY(e){this.y=e;return this}setZ(e){this.z=e;return this}setW(e){this.w=e;return this}setComponent(e,t){switch(e){case 0:this.x=t;break;case 1:this.y=t;break;case 2:this.z=t;break;case 3:this.w=t;break;default:throw new Error("index is out of range: "+e)}return this}getComponent(e){switch(e){case 0:return this.x;case 1:return this.y;case 2:return this.z;case 3:return this.w;default:throw new Error("index is out of range: "+e)}}clone(){return new this.constructor(this.x,this.y,this.z,this.w)}copy(e){this.x=e.x;this.y=e.y;this.z=e.z;this.w=e.w!==undefined?e.w:1;return this}add(e){this.x+=e.x;this.y+=e.y;this.z+=e.z;this.w+=e.w;return this}addScalar(e){this.x+=e;this.y+=e;this.z+=e;this.w+=e;return this}addVectors(e,t){this.x=e.x+t.x;this.y=e.y+t.y;this.z=e.z+t.z;this.w=e.w+t.w;return this}addScaledVector(e,t){this.x+=e.x*t;this.y+=e.y*t;this.z+=e.z*t;this.w+=e.w*t;return this}sub(e){this.x-=e.x;this.y-=e.y;this.z-=e.z;this.w-=e.w;return this}subScalar(e){this.x-=e;this.y-=e;this.z-=e;this.w-=e;return this}subVectors(e,t){this.x=e.x-t.x;this.y=e.y-t.y;this.z=e.z-t.z;this.w=e.w-t.w;return this}multiply(e){this.x*=e.x;this.y*=e.y;this.z*=e.z;this.w*=e.w;return this}multiplyScalar(e){this.x*=e;this.y*=e;this.z*=e;this.w*=e;return this}applyMatrix4(e){const t=this.x,n=this.y,i=this.z,r=this.w;const s=e.elements;this.x=s[0]*t+s[4]*n+s[8]*i+s[12]*r;this.y=s[1]*t+s[5]*n+s[9]*i+s[13]*r;this.z=s[2]*t+s[6]*n+s[10]*i+s[14]*r;this.w=s[3]*t+s[7]*n+s[11]*i+s[15]*r;return this}divideScalar(e){return this.multiplyScalar(1/e)}setAxisAngleFromQuaternion(e){this.w=2*Math.acos(e.w);const t=Math.sqrt(1-e.w*e.w);if(t<1e-4){this.x=1;this.y=0;this.z=0}else{this.x=e.x/t;this.y=e.y/t;this.z=e.z/t}return this}setAxisAngleFromRotationMatrix(e){let t,n,i,r;const s=.01,a=.1,o=e.elements,l=o[0],c=o[4],u=o[8],h=o[1],d=o[5],f=o[9],p=o[2],m=o[6],g=o[10];if(Math.abs(c-h)<s&&Math.abs(u-p)<s&&Math.abs(f-m)<s){if(Math.abs(c+h)<a&&Math.abs(u+p)<a&&Math.abs(f+m)<a&&Math.abs(l+d+g-3)<a){this.set(1,0,0,0);return this}t=Math.PI;const v=(l+1)/2;const y=(d+1)/2;const x=(g+1)/2;const M=(c+h)/4;const S=(u+p)/4;const b=(f+m)/4;if(v>y&&v>x){if(v<s){n=0;i=.707106781;r=.707106781}else{n=Math.sqrt(v);i=M/n;r=S/n}}else if(y>x){if(y<s){n=.707106781;i=0;r=.707106781}else{i=Math.sqrt(y);n=M/i;r=b/i}}else{if(x<s){n=.707106781;i=.707106781;r=0}else{r=Math.sqrt(x);n=S/r;i=b/r}}this.set(n,i,r,t);return this}let _=Math.sqrt((m-f)*(m-f)+(u-p)*(u-p)+(h-c)*(h-c));if(Math.abs(_)<.001)_=1;this.x=(m-f)/_;this.y=(u-p)/_;this.z=(h-c)/_;this.w=Math.acos((l+d+g-1)/2);return this}min(e){this.x=Math.min(this.x,e.x);this.y=Math.min(this.y,e.y);this.z=Math.min(this.z,e.z);this.w=Math.min(this.w,e.w);return this}max(e){this.x=Math.max(this.x,e.x);this.y=Math.max(this.y,e.y);this.z=Math.max(this.z,e.z);this.w=Math.max(this.w,e.w);return this}clamp(e,t){this.x=Math.max(e.x,Math.min(t.x,this.x));this.y=Math.max(e.y,Math.min(t.y,this.y));this.z=Math.max(e.z,Math.min(t.z,this.z));this.w=Math.max(e.w,Math.min(t.w,this.w));return this}clampScalar(e,t){this.x=Math.max(e,Math.min(t,this.x));this.y=Math.max(e,Math.min(t,this.y));this.z=Math.max(e,Math.min(t,this.z));this.w=Math.max(e,Math.min(t,this.w));return this}clampLength(e,t){const n=this.length();return this.divideScalar(n||1).multiplyScalar(Math.max(e,Math.min(t,n)))}floor(){this.x=Math.floor(this.x);this.y=Math.floor(this.y);this.z=Math.floor(this.z);this.w=Math.floor(this.w);return this}ceil(){this.x=Math.ceil(this.x);this.y=Math.ceil(this.y);this.z=Math.ceil(this.z);this.w=Math.ceil(this.w);return this}round(){this.x=Math.round(this.x);this.y=Math.round(this.y);this.z=Math.round(this.z);this.w=Math.round(this.w);return this}roundToZero(){this.x=Math.trunc(this.x);this.y=Math.trunc(this.y);this.z=Math.trunc(this.z);this.w=Math.trunc(this.w);return this}negate(){this.x=-this.x;this.y=-this.y;this.z=-this.z;this.w=-this.w;return this}dot(e){return this.x*e.x+this.y*e.y+this.z*e.z+this.w*e.w}lengthSq(){return this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w}length(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)+Math.abs(this.w)}normalize(){return this.divideScalar(this.length()||1)}setLength(e){return this.normalize().multiplyScalar(e)}lerp(e,t){this.x+=(e.x-this.x)*t;this.y+=(e.y-this.y)*t;this.z+=(e.z-this.z)*t;this.w+=(e.w-this.w)*t;return this}lerpVectors(e,t,n){this.x=e.x+(t.x-e.x)*n;this.y=e.y+(t.y-e.y)*n;this.z=e.z+(t.z-e.z)*n;this.w=e.w+(t.w-e.w)*n;return this}equals(e){return e.x===this.x&&e.y===this.y&&e.z===this.z&&e.w===this.w}fromArray(e,t=0){this.x=e[t];this.y=e[t+1];this.z=e[t+2];this.w=e[t+3];return this}toArray(e=[],t=0){e[t]=this.x;e[t+1]=this.y;e[t+2]=this.z;e[t+3]=this.w;return e}fromBufferAttribute(e,t){this.x=e.getX(t);this.y=e.getY(t);this.z=e.getZ(t);this.w=e.getW(t);return this}random(){this.x=Math.random();this.y=Math.random();this.z=Math.random();this.w=Math.random();return this}*[Symbol.iterator](){yield this.x;yield this.y;yield this.z;yield this.w}}class RenderTarget extends EventDispatcher{constructor(e=1,t=1,n={}){super();this.isRenderTarget=true;this.width=e;this.height=t;this.depth=1;this.scissor=new Vector4(0,0,e,t);this.scissorTest=false;this.viewport=new Vector4(0,0,e,t);const i={width:e,height:t,depth:1};n=Object.assign({generateMipmaps:false,internalFormat:null,minFilter:LinearFilter,depthBuffer:true,stencilBuffer:false,resolveStencilBuffer:true,depthTexture:null,samples:0,count:1},n);const r=new Texture(i,n.mapping,n.wrapS,n.wrapT,n.magFilter,n.minFilter,n.format,n.type,n.anisotropy,n.colorSpace);r.flipY=false;r.generateMipmaps=n.generateMipmaps;r.internalFormat=n.internalFormat;this.textures=[];const s=n.count;for(let e=0;e<s;e++){this.textures[e]=r.clone();this.textures[e].isRenderTargetTexture=true}this.depthBuffer=n.depthBuffer;this.stencilBuffer=n.stencilBuffer;this.resolveStencilBuffer=n.resolveStencilBuffer;this.depthTexture=n.depthTexture;this.samples=n.samples}get texture(){return this.textures[0]}set texture(e){this.textures[0]=e}setSize(n,i,r=1){if(this.width!==n||this.height!==i||this.depth!==r){this.width=n;this.height=i;this.depth=r;for(let e=0,t=this.textures.length;e<t;e++){this.textures[e].image.width=n;this.textures[e].image.height=i;this.textures[e].image.depth=r}this.dispose()}this.viewport.set(0,0,n,i);this.scissor.set(0,0,n,i)}clone(){return(new this.constructor).copy(this)}copy(n){this.width=n.width;this.height=n.height;this.depth=n.depth;this.scissor.copy(n.scissor);this.scissorTest=n.scissorTest;this.viewport.copy(n.viewport);this.textures.length=0;for(let e=0,t=n.textures.length;e<t;e++){this.textures[e]=n.textures[e].clone();this.textures[e].isRenderTargetTexture=true}const e=Object.assign({},n.texture.image);this.texture.source=new Source(e);this.depthBuffer=n.depthBuffer;this.stencilBuffer=n.stencilBuffer;this.resolveStencilBuffer=n.resolveStencilBuffer;if(n.depthTexture!==null)this.depthTexture=n.depthTexture.clone();this.samples=n.samples;return this}dispose(){this.dispatchEvent({type:"dispose"})}}class WebGLRenderTarget extends RenderTarget{constructor(e=1,t=1,n={}){super(e,t,n);this.isWebGLRenderTarget=true}}class DataArrayTexture extends Texture{constructor(e=null,t=1,n=1,i=1){super(null);this.isDataArrayTexture=true;this.image={data:e,width:t,height:n,depth:i};this.magFilter=NearestFilter;this.minFilter=NearestFilter;this.wrapR=ClampToEdgeWrapping;this.generateMipmaps=false;this.flipY=false;this.unpackAlignment=1}}class WebGLArrayRenderTarget extends WebGLRenderTarget{constructor(e=1,t=1,n=1,i={}){super(e,t,i);this.isWebGLArrayRenderTarget=true;this.depth=n;this.texture=new DataArrayTexture(null,e,t,n);this.texture.isRenderTargetTexture=true}}class Data3DTexture extends Texture{constructor(e=null,t=1,n=1,i=1){super(null);this.isData3DTexture=true;this.image={data:e,width:t,height:n,depth:i};this.magFilter=NearestFilter;this.minFilter=NearestFilter;this.wrapR=ClampToEdgeWrapping;this.generateMipmaps=false;this.flipY=false;this.unpackAlignment=1}}class WebGL3DRenderTarget extends WebGLRenderTarget{constructor(e=1,t=1,n=1,i={}){super(e,t,i);this.isWebGL3DRenderTarget=true;this.depth=n;this.texture=new Data3DTexture(null,e,t,n);this.texture.isRenderTargetTexture=true}}class Quaternion{constructor(e=0,t=0,n=0,i=1){this.isQuaternion=true;this._x=e;this._y=t;this._z=n;this._w=i}static slerpFlat(e,t,n,i,r,s,a){let o=n[i+0],l=n[i+1],c=n[i+2],u=n[i+3];const h=r[s+0],d=r[s+1],f=r[s+2],p=r[s+3];if(a===0){e[t+0]=o;e[t+1]=l;e[t+2]=c;e[t+3]=u;return}if(a===1){e[t+0]=h;e[t+1]=d;e[t+2]=f;e[t+3]=p;return}if(u!==p||o!==h||l!==d||c!==f){let e=1-a;const m=o*h+l*d+c*f+u*p,g=m>=0?1:-1,_=1-m*m;if(_>Number.EPSILON){const y=Math.sqrt(_),x=Math.atan2(y,m*g);e=Math.sin(e*x)/y;a=Math.sin(a*x)/y}const v=a*g;o=o*e+h*v;l=l*e+d*v;c=c*e+f*v;u=u*e+p*v;if(e===1-a){const M=1/Math.sqrt(o*o+l*l+c*c+u*u);o*=M;l*=M;c*=M;u*=M}}e[t]=o;e[t+1]=l;e[t+2]=c;e[t+3]=u}static multiplyQuaternionsFlat(e,t,n,i,r,s){const a=n[i];const o=n[i+1];const l=n[i+2];const c=n[i+3];const u=r[s];const h=r[s+1];const d=r[s+2];const f=r[s+3];e[t]=a*f+c*u+o*d-l*h;e[t+1]=o*f+c*h+l*u-a*d;e[t+2]=l*f+c*d+a*h-o*u;e[t+3]=c*f-a*u-o*h-l*d;return e}get x(){return this._x}set x(e){this._x=e;this._onChangeCallback()}get y(){return this._y}set y(e){this._y=e;this._onChangeCallback()}get z(){return this._z}set z(e){this._z=e;this._onChangeCallback()}get w(){return this._w}set w(e){this._w=e;this._onChangeCallback()}set(e,t,n,i){this._x=e;this._y=t;this._z=n;this._w=i;this._onChangeCallback();return this}clone(){return new this.constructor(this._x,this._y,this._z,this._w)}copy(e){this._x=e.x;this._y=e.y;this._z=e.z;this._w=e.w;this._onChangeCallback();return this}setFromEuler(e,t=true){const n=e._x,i=e._y,r=e._z,s=e._order;const a=Math.cos;const o=Math.sin;const l=a(n/2);const c=a(i/2);const u=a(r/2);const h=o(n/2);const d=o(i/2);const f=o(r/2);switch(s){case"XYZ":this._x=h*c*u+l*d*f;this._y=l*d*u-h*c*f;this._z=l*c*f+h*d*u;this._w=l*c*u-h*d*f;break;case"YXZ":this._x=h*c*u+l*d*f;this._y=l*d*u-h*c*f;this._z=l*c*f-h*d*u;this._w=l*c*u+h*d*f;break;case"ZXY":this._x=h*c*u-l*d*f;this._y=l*d*u+h*c*f;this._z=l*c*f+h*d*u;this._w=l*c*u-h*d*f;break;case"ZYX":this._x=h*c*u-l*d*f;this._y=l*d*u+h*c*f;this._z=l*c*f-h*d*u;this._w=l*c*u+h*d*f;break;case"YZX":this._x=h*c*u+l*d*f;this._y=l*d*u+h*c*f;this._z=l*c*f-h*d*u;this._w=l*c*u-h*d*f;break;case"XZY":this._x=h*c*u-l*d*f;this._y=l*d*u-h*c*f;this._z=l*c*f+h*d*u;this._w=l*c*u+h*d*f;break;default:console.warn("THREE.Quaternion: .setFromEuler() encountered an unknown order: "+s)}if(t===true)this._onChangeCallback();return this}setFromAxisAngle(e,t){const n=t/2,i=Math.sin(n);this._x=e.x*i;this._y=e.y*i;this._z=e.z*i;this._w=Math.cos(n);this._onChangeCallback();return this}setFromRotationMatrix(e){const t=e.elements,n=t[0],i=t[4],r=t[8],s=t[1],a=t[5],o=t[9],l=t[2],c=t[6],u=t[10],h=n+a+u;if(h>0){const d=.5/Math.sqrt(h+1);this._w=.25/d;this._x=(c-o)*d;this._y=(r-l)*d;this._z=(s-i)*d}else if(n>a&&n>u){const d=2*Math.sqrt(1+n-a-u);this._w=(c-o)/d;this._x=.25*d;this._y=(i+s)/d;this._z=(r+l)/d}else if(a>u){const d=2*Math.sqrt(1+a-n-u);this._w=(r-l)/d;this._x=(i+s)/d;this._y=.25*d;this._z=(o+c)/d}else{const d=2*Math.sqrt(1+u-n-a);this._w=(s-i)/d;this._x=(r+l)/d;this._y=(o+c)/d;this._z=.25*d}this._onChangeCallback();return this}setFromUnitVectors(e,t){let n=e.dot(t)+1;if(n<Number.EPSILON){n=0;if(Math.abs(e.x)>Math.abs(e.z)){this._x=-e.y;this._y=e.x;this._z=0;this._w=n}else{this._x=0;this._y=-e.z;this._z=e.y;this._w=n}}else{this._x=e.y*t.z-e.z*t.y;this._y=e.z*t.x-e.x*t.z;this._z=e.x*t.y-e.y*t.x;this._w=n}return this.normalize()}angleTo(e){return 2*Math.acos(Math.abs(clamp(this.dot(e),-1,1)))}rotateTowards(e,t){const n=this.angleTo(e);if(n===0)return this;const i=Math.min(1,t/n);this.slerp(e,i);return this}identity(){return this.set(0,0,0,1)}invert(){return this.conjugate()}conjugate(){this._x*=-1;this._y*=-1;this._z*=-1;this._onChangeCallback();return this}dot(e){return this._x*e._x+this._y*e._y+this._z*e._z+this._w*e._w}lengthSq(){return this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w}length(){return Math.sqrt(this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w)}normalize(){let e=this.length();if(e===0){this._x=0;this._y=0;this._z=0;this._w=1}else{e=1/e;this._x=this._x*e;this._y=this._y*e;this._z=this._z*e;this._w=this._w*e}this._onChangeCallback();return this}multiply(e){return this.multiplyQuaternions(this,e)}premultiply(e){return this.multiplyQuaternions(e,this)}multiplyQuaternions(e,t){const n=e._x,i=e._y,r=e._z,s=e._w;const a=t._x,o=t._y,l=t._z,c=t._w;this._x=n*c+s*a+i*l-r*o;this._y=i*c+s*o+r*a-n*l;this._z=r*c+s*l+n*o-i*a;this._w=s*c-n*a-i*o-r*l;this._onChangeCallback();return this}slerp(e,t){if(t===0)return this;if(t===1)return this.copy(e);const n=this._x,i=this._y,r=this._z,s=this._w;let a=s*e._w+n*e._x+i*e._y+r*e._z;if(a<0){this._w=-e._w;this._x=-e._x;this._y=-e._y;this._z=-e._z;a=-a}else{this.copy(e)}if(a>=1){this._w=s;this._x=n;this._y=i;this._z=r;return this}const o=1-a*a;if(o<=Number.EPSILON){const d=1-t;this._w=d*s+t*this._w;this._x=d*n+t*this._x;this._y=d*i+t*this._y;this._z=d*r+t*this._z;this.normalize();return this}const l=Math.sqrt(o);const c=Math.atan2(l,a);const u=Math.sin((1-t)*c)/l,h=Math.sin(t*c)/l;this._w=s*u+this._w*h;this._x=n*u+this._x*h;this._y=i*u+this._y*h;this._z=r*u+this._z*h;this._onChangeCallback();return this}slerpQuaternions(e,t,n){return this.copy(e).slerp(t,n)}random(){const e=2*Math.PI*Math.random();const t=2*Math.PI*Math.random();const n=Math.random();const i=Math.sqrt(1-n);const r=Math.sqrt(n);return this.set(i*Math.sin(e),i*Math.cos(e),r*Math.sin(t),r*Math.cos(t))}equals(e){return e._x===this._x&&e._y===this._y&&e._z===this._z&&e._w===this._w}fromArray(e,t=0){this._x=e[t];this._y=e[t+1];this._z=e[t+2];this._w=e[t+3];this._onChangeCallback();return this}toArray(e=[],t=0){e[t]=this._x;e[t+1]=this._y;e[t+2]=this._z;e[t+3]=this._w;return e}fromBufferAttribute(e,t){this._x=e.getX(t);this._y=e.getY(t);this._z=e.getZ(t);this._w=e.getW(t);this._onChangeCallback();return this}toJSON(){return this.toArray()}_onChange(e){this._onChangeCallback=e;return this}_onChangeCallback(){}*[Symbol.iterator](){yield this._x;yield this._y;yield this._z;yield this._w}}class Vector3{constructor(e=0,t=0,n=0){Vector3.prototype.isVector3=true;this.x=e;this.y=t;this.z=n}set(e,t,n){if(n===undefined)n=this.z;this.x=e;this.y=t;this.z=n;return this}setScalar(e){this.x=e;this.y=e;this.z=e;return this}setX(e){this.x=e;return this}setY(e){this.y=e;return this}setZ(e){this.z=e;return this}setComponent(e,t){switch(e){case 0:this.x=t;break;case 1:this.y=t;break;case 2:this.z=t;break;default:throw new Error("index is out of range: "+e)}return this}getComponent(e){switch(e){case 0:return this.x;case 1:return this.y;case 2:return this.z;default:throw new Error("index is out of range: "+e)}}clone(){return new this.constructor(this.x,this.y,this.z)}copy(e){this.x=e.x;this.y=e.y;this.z=e.z;return this}add(e){this.x+=e.x;this.y+=e.y;this.z+=e.z;return this}addScalar(e){this.x+=e;this.y+=e;this.z+=e;return this}addVectors(e,t){this.x=e.x+t.x;this.y=e.y+t.y;this.z=e.z+t.z;return this}addScaledVector(e,t){this.x+=e.x*t;this.y+=e.y*t;this.z+=e.z*t;return this}sub(e){this.x-=e.x;this.y-=e.y;this.z-=e.z;return this}subScalar(e){this.x-=e;this.y-=e;this.z-=e;return this}subVectors(e,t){this.x=e.x-t.x;this.y=e.y-t.y;this.z=e.z-t.z;return this}multiply(e){this.x*=e.x;this.y*=e.y;this.z*=e.z;return this}multiplyScalar(e){this.x*=e;this.y*=e;this.z*=e;return this}multiplyVectors(e,t){this.x=e.x*t.x;this.y=e.y*t.y;this.z=e.z*t.z;return this}applyEuler(e){return this.applyQuaternion(_quaternion$4.setFromEuler(e))}applyAxisAngle(e,t){return this.applyQuaternion(_quaternion$4.setFromAxisAngle(e,t))}applyMatrix3(e){const t=this.x,n=this.y,i=this.z;const r=e.elements;this.x=r[0]*t+r[3]*n+r[6]*i;this.y=r[1]*t+r[4]*n+r[7]*i;this.z=r[2]*t+r[5]*n+r[8]*i;return this}applyNormalMatrix(e){return this.applyMatrix3(e).normalize()}applyMatrix4(e){const t=this.x,n=this.y,i=this.z;const r=e.elements;const s=1/(r[3]*t+r[7]*n+r[11]*i+r[15]);this.x=(r[0]*t+r[4]*n+r[8]*i+r[12])*s;this.y=(r[1]*t+r[5]*n+r[9]*i+r[13])*s;this.z=(r[2]*t+r[6]*n+r[10]*i+r[14])*s;return this}applyQuaternion(e){const t=this.x,n=this.y,i=this.z;const r=e.x,s=e.y,a=e.z,o=e.w;const l=2*(s*i-a*n);const c=2*(a*t-r*i);const u=2*(r*n-s*t);this.x=t+o*l+s*u-a*c;this.y=n+o*c+a*l-r*u;this.z=i+o*u+r*c-s*l;return this}project(e){return this.applyMatrix4(e.matrixWorldInverse).applyMatrix4(e.projectionMatrix)}unproject(e){return this.applyMatrix4(e.projectionMatrixInverse).applyMatrix4(e.matrixWorld)}transformDirection(e){const t=this.x,n=this.y,i=this.z;const r=e.elements;this.x=r[0]*t+r[4]*n+r[8]*i;this.y=r[1]*t+r[5]*n+r[9]*i;this.z=r[2]*t+r[6]*n+r[10]*i;return this.normalize()}divide(e){this.x/=e.x;this.y/=e.y;this.z/=e.z;return this}divideScalar(e){return this.multiplyScalar(1/e)}min(e){this.x=Math.min(this.x,e.x);this.y=Math.min(this.y,e.y);this.z=Math.min(this.z,e.z);return this}max(e){this.x=Math.max(this.x,e.x);this.y=Math.max(this.y,e.y);this.z=Math.max(this.z,e.z);return this}clamp(e,t){this.x=Math.max(e.x,Math.min(t.x,this.x));this.y=Math.max(e.y,Math.min(t.y,this.y));this.z=Math.max(e.z,Math.min(t.z,this.z));return this}clampScalar(e,t){this.x=Math.max(e,Math.min(t,this.x));this.y=Math.max(e,Math.min(t,this.y));this.z=Math.max(e,Math.min(t,this.z));return this}clampLength(e,t){const n=this.length();return this.divideScalar(n||1).multiplyScalar(Math.max(e,Math.min(t,n)))}floor(){this.x=Math.floor(this.x);this.y=Math.floor(this.y);this.z=Math.floor(this.z);return this}ceil(){this.x=Math.ceil(this.x);this.y=Math.ceil(this.y);this.z=Math.ceil(this.z);return this}round(){this.x=Math.round(this.x);this.y=Math.round(this.y);this.z=Math.round(this.z);return this}roundToZero(){this.x=Math.trunc(this.x);this.y=Math.trunc(this.y);this.z=Math.trunc(this.z);return this}negate(){this.x=-this.x;this.y=-this.y;this.z=-this.z;return this}dot(e){return this.x*e.x+this.y*e.y+this.z*e.z}lengthSq(){return this.x*this.x+this.y*this.y+this.z*this.z}length(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)}normalize(){return this.divideScalar(this.length()||1)}setLength(e){return this.normalize().multiplyScalar(e)}lerp(e,t){this.x+=(e.x-this.x)*t;this.y+=(e.y-this.y)*t;this.z+=(e.z-this.z)*t;return this}lerpVectors(e,t,n){this.x=e.x+(t.x-e.x)*n;this.y=e.y+(t.y-e.y)*n;this.z=e.z+(t.z-e.z)*n;return this}cross(e){return this.crossVectors(this,e)}crossVectors(e,t){const n=e.x,i=e.y,r=e.z;const s=t.x,a=t.y,o=t.z;this.x=i*o-r*a;this.y=r*s-n*o;this.z=n*a-i*s;return this}projectOnVector(e){const t=e.lengthSq();if(t===0)return this.set(0,0,0);const n=e.dot(this)/t;return this.copy(e).multiplyScalar(n)}projectOnPlane(e){_vector$c.copy(this).projectOnVector(e);return this.sub(_vector$c)}reflect(e){return this.sub(_vector$c.copy(e).multiplyScalar(2*this.dot(e)))}angleTo(e){const t=Math.sqrt(this.lengthSq()*e.lengthSq());if(t===0)return Math.PI/2;const n=this.dot(e)/t;return Math.acos(clamp(n,-1,1))}distanceTo(e){return Math.sqrt(this.distanceToSquared(e))}distanceToSquared(e){const t=this.x-e.x,n=this.y-e.y,i=this.z-e.z;return t*t+n*n+i*i}manhattanDistanceTo(e){return Math.abs(this.x-e.x)+Math.abs(this.y-e.y)+Math.abs(this.z-e.z)}setFromSpherical(e){return this.setFromSphericalCoords(e.radius,e.phi,e.theta)}setFromSphericalCoords(e,t,n){const i=Math.sin(t)*e;this.x=i*Math.sin(n);this.y=Math.cos(t)*e;this.z=i*Math.cos(n);return this}setFromCylindrical(e){return this.setFromCylindricalCoords(e.radius,e.theta,e.y)}setFromCylindricalCoords(e,t,n){this.x=e*Math.sin(t);this.y=n;this.z=e*Math.cos(t);return this}setFromMatrixPosition(e){const t=e.elements;this.x=t[12];this.y=t[13];this.z=t[14];return this}setFromMatrixScale(e){const t=this.setFromMatrixColumn(e,0).length();const n=this.setFromMatrixColumn(e,1).length();const i=this.setFromMatrixColumn(e,2).length();this.x=t;this.y=n;this.z=i;return this}setFromMatrixColumn(e,t){return this.fromArray(e.elements,t*4)}setFromMatrix3Column(e,t){return this.fromArray(e.elements,t*3)}setFromEuler(e){this.x=e._x;this.y=e._y;this.z=e._z;return this}setFromColor(e){this.x=e.r;this.y=e.g;this.z=e.b;return this}equals(e){return e.x===this.x&&e.y===this.y&&e.z===this.z}fromArray(e,t=0){this.x=e[t];this.y=e[t+1];this.z=e[t+2];return this}toArray(e=[],t=0){e[t]=this.x;e[t+1]=this.y;e[t+2]=this.z;return e}fromBufferAttribute(e,t){this.x=e.getX(t);this.y=e.getY(t);this.z=e.getZ(t);return this}random(){this.x=Math.random();this.y=Math.random();this.z=Math.random();return this}randomDirection(){const e=Math.random()*Math.PI*2;const t=Math.random()*2-1;const n=Math.sqrt(1-t*t);this.x=n*Math.cos(e);this.y=t;this.z=n*Math.sin(e);return this}*[Symbol.iterator](){yield this.x;yield this.y;yield this.z}}const _vector$c=new Vector3;const _quaternion$4=new Quaternion;class Box3{constructor(e=new Vector3(+Infinity,+Infinity,+Infinity),t=new Vector3(-Infinity,-Infinity,-Infinity)){this.isBox3=true;this.min=e;this.max=t}set(e,t){this.min.copy(e);this.max.copy(t);return this}setFromArray(n){this.makeEmpty();for(let e=0,t=n.length;e<t;e+=3){this.expandByPoint(_vector$b.fromArray(n,e))}return this}setFromBufferAttribute(n){this.makeEmpty();for(let e=0,t=n.count;e<t;e++){this.expandByPoint(_vector$b.fromBufferAttribute(n,e))}return this}setFromPoints(n){this.makeEmpty();for(let e=0,t=n.length;e<t;e++){this.expandByPoint(n[e])}return this}setFromCenterAndSize(e,t){const n=_vector$b.copy(t).multiplyScalar(.5);this.min.copy(e).sub(n);this.max.copy(e).add(n);return this}setFromObject(e,t=false){this.makeEmpty();return this.expandByObject(e,t)}clone(){return(new this.constructor).copy(this)}copy(e){this.min.copy(e.min);this.max.copy(e.max);return this}makeEmpty(){this.min.x=this.min.y=this.min.z=+Infinity;this.max.x=this.max.y=this.max.z=-Infinity;return this}isEmpty(){return this.max.x<this.min.x||this.max.y<this.min.y||this.max.z<this.min.z}getCenter(e){return this.isEmpty()?e.set(0,0,0):e.addVectors(this.min,this.max).multiplyScalar(.5)}getSize(e){return this.isEmpty()?e.set(0,0,0):e.subVectors(this.max,this.min)}expandByPoint(e){this.min.min(e);this.max.max(e);return this}expandByVector(e){this.min.sub(e);this.max.add(e);return this}expandByScalar(e){this.min.addScalar(-e);this.max.addScalar(e);return this}expandByObject(n,i=false){n.updateWorldMatrix(false,false);const e=n.geometry;if(e!==undefined){const s=e.getAttribute("position");if(i===true&&s!==undefined&&n.isInstancedMesh!==true){for(let e=0,t=s.count;e<t;e++){if(n.isMesh===true){n.getVertexPosition(e,_vector$b)}else{_vector$b.fromBufferAttribute(s,e)}_vector$b.applyMatrix4(n.matrixWorld);this.expandByPoint(_vector$b)}}else{if(n.boundingBox!==undefined){if(n.boundingBox===null){n.computeBoundingBox()}_box$4.copy(n.boundingBox)}else{if(e.boundingBox===null){e.computeBoundingBox()}_box$4.copy(e.boundingBox)}_box$4.applyMatrix4(n.matrixWorld);this.union(_box$4)}}const r=n.children;for(let e=0,t=r.length;e<t;e++){this.expandByObject(r[e],i)}return this}containsPoint(e){return e.x<this.min.x||e.x>this.max.x||e.y<this.min.y||e.y>this.max.y||e.z<this.min.z||e.z>this.max.z?false:true}containsBox(e){return this.min.x<=e.min.x&&e.max.x<=this.max.x&&this.min.y<=e.min.y&&e.max.y<=this.max.y&&this.min.z<=e.min.z&&e.max.z<=this.max.z}getParameter(e,t){return t.set((e.x-this.min.x)/(this.max.x-this.min.x),(e.y-this.min.y)/(this.max.y-this.min.y),(e.z-this.min.z)/(this.max.z-this.min.z))}intersectsBox(e){return e.max.x<this.min.x||e.min.x>this.max.x||e.max.y<this.min.y||e.min.y>this.max.y||e.max.z<this.min.z||e.min.z>this.max.z?false:true}intersectsSphere(e){this.clampPoint(e.center,_vector$b);return _vector$b.distanceToSquared(e.center)<=e.radius*e.radius}intersectsPlane(e){let t,n;if(e.normal.x>0){t=e.normal.x*this.min.x;n=e.normal.x*this.max.x}else{t=e.normal.x*this.max.x;n=e.normal.x*this.min.x}if(e.normal.y>0){t+=e.normal.y*this.min.y;n+=e.normal.y*this.max.y}else{t+=e.normal.y*this.max.y;n+=e.normal.y*this.min.y}if(e.normal.z>0){t+=e.normal.z*this.min.z;n+=e.normal.z*this.max.z}else{t+=e.normal.z*this.max.z;n+=e.normal.z*this.min.z}return t<=-e.constant&&n>=-e.constant}intersectsTriangle(e){if(this.isEmpty()){return false}this.getCenter(_center);_extents.subVectors(this.max,_center);_v0$2.subVectors(e.a,_center);_v1$7.subVectors(e.b,_center);_v2$4.subVectors(e.c,_center);_f0.subVectors(_v1$7,_v0$2);_f1.subVectors(_v2$4,_v1$7);_f2.subVectors(_v0$2,_v2$4);let t=[0,-_f0.z,_f0.y,0,-_f1.z,_f1.y,0,-_f2.z,_f2.y,_f0.z,0,-_f0.x,_f1.z,0,-_f1.x,_f2.z,0,-_f2.x,-_f0.y,_f0.x,0,-_f1.y,_f1.x,0,-_f2.y,_f2.x,0];if(!satForAxes(t,_v0$2,_v1$7,_v2$4,_extents)){return false}t=[1,0,0,0,1,0,0,0,1];if(!satForAxes(t,_v0$2,_v1$7,_v2$4,_extents)){return false}_triangleNormal.crossVectors(_f0,_f1);t=[_triangleNormal.x,_triangleNormal.y,_triangleNormal.z];return satForAxes(t,_v0$2,_v1$7,_v2$4,_extents)}clampPoint(e,t){return t.copy(e).clamp(this.min,this.max)}distanceToPoint(e){return this.clampPoint(e,_vector$b).distanceTo(e)}getBoundingSphere(e){if(this.isEmpty()){e.makeEmpty()}else{this.getCenter(e.center);e.radius=this.getSize(_vector$b).length()*.5}return e}intersect(e){this.min.max(e.min);this.max.min(e.max);if(this.isEmpty())this.makeEmpty();return this}union(e){this.min.min(e.min);this.max.max(e.max);return this}applyMatrix4(e){if(this.isEmpty())return this;_points[0].set(this.min.x,this.min.y,this.min.z).applyMatrix4(e);_points[1].set(this.min.x,this.min.y,this.max.z).applyMatrix4(e);_points[2].set(this.min.x,this.max.y,this.min.z).applyMatrix4(e);_points[3].set(this.min.x,this.max.y,this.max.z).applyMatrix4(e);_points[4].set(this.max.x,this.min.y,this.min.z).applyMatrix4(e);_points[5].set(this.max.x,this.min.y,this.max.z).applyMatrix4(e);_points[6].set(this.max.x,this.max.y,this.min.z).applyMatrix4(e);_points[7].set(this.max.x,this.max.y,this.max.z).applyMatrix4(e);this.setFromPoints(_points);return this}translate(e){this.min.add(e);this.max.add(e);return this}equals(e){return e.min.equals(this.min)&&e.max.equals(this.max)}}const _points=[new Vector3,new Vector3,new Vector3,new Vector3,new Vector3,new Vector3,new Vector3,new Vector3];const _vector$b=new Vector3;const _box$4=new Box3;const _v0$2=new Vector3;const _v1$7=new Vector3;const _v2$4=new Vector3;const _f0=new Vector3;const _f1=new Vector3;const _f2=new Vector3;const _center=new Vector3;const _extents=new Vector3;const _triangleNormal=new Vector3;const _testAxis=new Vector3;function satForAxes(n,i,r,s,a){for(let e=0,t=n.length-3;e<=t;e+=3){_testAxis.fromArray(n,e);const o=a.x*Math.abs(_testAxis.x)+a.y*Math.abs(_testAxis.y)+a.z*Math.abs(_testAxis.z);const l=i.dot(_testAxis);const c=r.dot(_testAxis);const u=s.dot(_testAxis);if(Math.max(-Math.max(l,c,u),Math.min(l,c,u))>o){return false}}return true}const _box$3=new Box3;const _v1$6=new Vector3;const _v2$3=new Vector3;class Sphere{constructor(e=new Vector3,t=-1){this.isSphere=true;this.center=e;this.radius=t}set(e,t){this.center.copy(e);this.radius=t;return this}setFromPoints(n,e){const i=this.center;if(e!==undefined){i.copy(e)}else{_box$3.setFromPoints(n).getCenter(i)}let r=0;for(let e=0,t=n.length;e<t;e++){r=Math.max(r,i.distanceToSquared(n[e]))}this.radius=Math.sqrt(r);return this}copy(e){this.center.copy(e.center);this.radius=e.radius;return this}isEmpty(){return this.radius<0}makeEmpty(){this.center.set(0,0,0);this.radius=-1;return this}containsPoint(e){return e.distanceToSquared(this.center)<=this.radius*this.radius}distanceToPoint(e){return e.distanceTo(this.center)-this.radius}intersectsSphere(e){const t=this.radius+e.radius;return e.center.distanceToSquared(this.center)<=t*t}intersectsBox(e){return e.intersectsSphere(this)}intersectsPlane(e){return Math.abs(e.distanceToPoint(this.center))<=this.radius}clampPoint(e,t){const n=this.center.distanceToSquared(e);t.copy(e);if(n>this.radius*this.radius){t.sub(this.center).normalize();t.multiplyScalar(this.radius).add(this.center)}return t}getBoundingBox(e){if(this.isEmpty()){e.makeEmpty();return e}e.set(this.center,this.center);e.expandByScalar(this.radius);return e}applyMatrix4(e){this.center.applyMatrix4(e);this.radius=this.radius*e.getMaxScaleOnAxis();return this}translate(e){this.center.add(e);return this}expandByPoint(e){if(this.isEmpty()){this.center.copy(e);this.radius=0;return this}_v1$6.subVectors(e,this.center);const t=_v1$6.lengthSq();if(t>this.radius*this.radius){const n=Math.sqrt(t);const i=(n-this.radius)*.5;this.center.addScaledVector(_v1$6,i/n);this.radius+=i}return this}union(e){if(e.isEmpty()){return this}if(this.isEmpty()){this.copy(e);return this}if(this.center.equals(e.center)===true){this.radius=Math.max(this.radius,e.radius)}else{_v2$3.subVectors(e.center,this.center).setLength(e.radius);this.expandByPoint(_v1$6.copy(e.center).add(_v2$3));this.expandByPoint(_v1$6.copy(e.center).sub(_v2$3))}return this}equals(e){return e.center.equals(this.center)&&e.radius===this.radius}clone(){return(new this.constructor).copy(this)}}const _vector$a=new Vector3;const _segCenter=new Vector3;const _segDir=new Vector3;const _diff=new Vector3;const _edge1=new Vector3;const _edge2=new Vector3;const _normal$1=new Vector3;class Ray{constructor(e=new Vector3,t=new Vector3(0,0,-1)){this.origin=e;this.direction=t}set(e,t){this.origin.copy(e);this.direction.copy(t);return this}copy(e){this.origin.copy(e.origin);this.direction.copy(e.direction);return this}at(e,t){return t.copy(this.origin).addScaledVector(this.direction,e)}lookAt(e){this.direction.copy(e).sub(this.origin).normalize();return this}recast(e){this.origin.copy(this.at(e,_vector$a));return this}closestPointToPoint(e,t){t.subVectors(e,this.origin);const n=t.dot(this.direction);if(n<0){return t.copy(this.origin)}return t.copy(this.origin).addScaledVector(this.direction,n)}distanceToPoint(e){return Math.sqrt(this.distanceSqToPoint(e))}distanceSqToPoint(e){const t=_vector$a.subVectors(e,this.origin).dot(this.direction);if(t<0){return this.origin.distanceToSquared(e)}_vector$a.copy(this.origin).addScaledVector(this.direction,t);return _vector$a.distanceToSquared(e)}distanceSqToSegment(e,t,n,i){_segCenter.copy(e).add(t).multiplyScalar(.5);_segDir.copy(t).sub(e).normalize();_diff.copy(this.origin).sub(_segCenter);const r=e.distanceTo(t)*.5;const s=-this.direction.dot(_segDir);const a=_diff.dot(this.direction);const o=-_diff.dot(_segDir);const l=_diff.lengthSq();const c=Math.abs(1-s*s);let u,h,d,f;if(c>0){u=s*o-a;h=s*a-o;f=r*c;if(u>=0){if(h>=-f){if(h<=f){const p=1/c;u*=p;h*=p;d=u*(u+s*h+2*a)+h*(s*u+h+2*o)+l}else{h=r;u=Math.max(0,-(s*h+a));d=-u*u+h*(h+2*o)+l}}else{h=-r;u=Math.max(0,-(s*h+a));d=-u*u+h*(h+2*o)+l}}else{if(h<=-f){u=Math.max(0,-(-s*r+a));h=u>0?-r:Math.min(Math.max(-r,-o),r);d=-u*u+h*(h+2*o)+l}else if(h<=f){u=0;h=Math.min(Math.max(-r,-o),r);d=h*(h+2*o)+l}else{u=Math.max(0,-(s*r+a));h=u>0?r:Math.min(Math.max(-r,-o),r);d=-u*u+h*(h+2*o)+l}}}else{h=s>0?-r:r;u=Math.max(0,-(s*h+a));d=-u*u+h*(h+2*o)+l}if(n){n.copy(this.origin).addScaledVector(this.direction,u)}if(i){i.copy(_segCenter).addScaledVector(_segDir,h)}return d}intersectSphere(e,t){_vector$a.subVectors(e.center,this.origin);const n=_vector$a.dot(this.direction);const i=_vector$a.dot(_vector$a)-n*n;const r=e.radius*e.radius;if(i>r)return null;const s=Math.sqrt(r-i);const a=n-s;const o=n+s;if(o<0)return null;if(a<0)return this.at(o,t);return this.at(a,t)}intersectsSphere(e){return this.distanceSqToPoint(e.center)<=e.radius*e.radius}distanceToPlane(e){const t=e.normal.dot(this.direction);if(t===0){if(e.distanceToPoint(this.origin)===0){return 0}return null}const n=-(this.origin.dot(e.normal)+e.constant)/t;return n>=0?n:null}intersectPlane(e,t){const n=this.distanceToPlane(e);if(n===null){return null}return this.at(n,t)}intersectsPlane(e){const t=e.distanceToPoint(this.origin);if(t===0){return true}const n=e.normal.dot(this.direction);if(n*t<0){return true}return false}intersectBox(e,t){let n,i,r,s,a,o;const l=1/this.direction.x,c=1/this.direction.y,u=1/this.direction.z;const h=this.origin;if(l>=0){n=(e.min.x-h.x)*l;i=(e.max.x-h.x)*l}else{n=(e.max.x-h.x)*l;i=(e.min.x-h.x)*l}if(c>=0){r=(e.min.y-h.y)*c;s=(e.max.y-h.y)*c}else{r=(e.max.y-h.y)*c;s=(e.min.y-h.y)*c}if(n>s||r>i)return null;if(r>n||isNaN(n))n=r;if(s<i||isNaN(i))i=s;if(u>=0){a=(e.min.z-h.z)*u;o=(e.max.z-h.z)*u}else{a=(e.max.z-h.z)*u;o=(e.min.z-h.z)*u}if(n>o||a>i)return null;if(a>n||n!==n)n=a;if(o<i||i!==i)i=o;if(i<0)return null;return this.at(n>=0?n:i,t)}intersectsBox(e){return this.intersectBox(e,_vector$a)!==null}intersectTriangle(e,t,n,i,r){_edge1.subVectors(t,e);_edge2.subVectors(n,e);_normal$1.crossVectors(_edge1,_edge2);let s=this.direction.dot(_normal$1);let a;if(s>0){if(i)return null;a=1}else if(s<0){a=-1;s=-s}else{return null}_diff.subVectors(this.origin,e);const o=a*this.direction.dot(_edge2.crossVectors(_diff,_edge2));if(o<0){return null}const l=a*this.direction.dot(_edge1.cross(_diff));if(l<0){return null}if(o+l>s){return null}const c=-a*_diff.dot(_normal$1);if(c<0){return null}return this.at(c/s,r)}applyMatrix4(e){this.origin.applyMatrix4(e);this.direction.transformDirection(e);return this}equals(e){return e.origin.equals(this.origin)&&e.direction.equals(this.direction)}clone(){return(new this.constructor).copy(this)}}class Matrix4{constructor(e,t,n,i,r,s,a,o,l,c,u,h,d,f,p,m){Matrix4.prototype.isMatrix4=true;this.elements=[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1];if(e!==undefined){this.set(e,t,n,i,r,s,a,o,l,c,u,h,d,f,p,m)}}set(e,t,n,i,r,s,a,o,l,c,u,h,d,f,p,m){const g=this.elements;g[0]=e;g[4]=t;g[8]=n;g[12]=i;g[1]=r;g[5]=s;g[9]=a;g[13]=o;g[2]=l;g[6]=c;g[10]=u;g[14]=h;g[3]=d;g[7]=f;g[11]=p;g[15]=m;return this}identity(){this.set(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1);return this}clone(){return(new Matrix4).fromArray(this.elements)}copy(e){const t=this.elements;const n=e.elements;t[0]=n[0];t[1]=n[1];t[2]=n[2];t[3]=n[3];t[4]=n[4];t[5]=n[5];t[6]=n[6];t[7]=n[7];t[8]=n[8];t[9]=n[9];t[10]=n[10];t[11]=n[11];t[12]=n[12];t[13]=n[13];t[14]=n[14];t[15]=n[15];return this}copyPosition(e){const t=this.elements,n=e.elements;t[12]=n[12];t[13]=n[13];t[14]=n[14];return this}setFromMatrix3(e){const t=e.elements;this.set(t[0],t[3],t[6],0,t[1],t[4],t[7],0,t[2],t[5],t[8],0,0,0,0,1);return this}extractBasis(e,t,n){e.setFromMatrixColumn(this,0);t.setFromMatrixColumn(this,1);n.setFromMatrixColumn(this,2);return this}makeBasis(e,t,n){this.set(e.x,t.x,n.x,0,e.y,t.y,n.y,0,e.z,t.z,n.z,0,0,0,0,1);return this}extractRotation(e){const t=this.elements;const n=e.elements;const i=1/_v1$5.setFromMatrixColumn(e,0).length();const r=1/_v1$5.setFromMatrixColumn(e,1).length();const s=1/_v1$5.setFromMatrixColumn(e,2).length();t[0]=n[0]*i;t[1]=n[1]*i;t[2]=n[2]*i;t[3]=0;t[4]=n[4]*r;t[5]=n[5]*r;t[6]=n[6]*r;t[7]=0;t[8]=n[8]*s;t[9]=n[9]*s;t[10]=n[10]*s;t[11]=0;t[12]=0;t[13]=0;t[14]=0;t[15]=1;return this}makeRotationFromEuler(e){const t=this.elements;const n=e.x,i=e.y,r=e.z;const s=Math.cos(n),a=Math.sin(n);const o=Math.cos(i),l=Math.sin(i);const c=Math.cos(r),u=Math.sin(r);if(e.order==="XYZ"){const h=s*c,d=s*u,f=a*c,p=a*u;t[0]=o*c;t[4]=-o*u;t[8]=l;t[1]=d+f*l;t[5]=h-p*l;t[9]=-a*o;t[2]=p-h*l;t[6]=f+d*l;t[10]=s*o}else if(e.order==="YXZ"){const m=o*c,g=o*u,_=l*c,v=l*u;t[0]=m+v*a;t[4]=_*a-g;t[8]=s*l;t[1]=s*u;t[5]=s*c;t[9]=-a;t[2]=g*a-_;t[6]=v+m*a;t[10]=s*o}else if(e.order==="ZXY"){const m=o*c,g=o*u,_=l*c,v=l*u;t[0]=m-v*a;t[4]=-s*u;t[8]=_+g*a;t[1]=g+_*a;t[5]=s*c;t[9]=v-m*a;t[2]=-s*l;t[6]=a;t[10]=s*o}else if(e.order==="ZYX"){const h=s*c,d=s*u,f=a*c,p=a*u;t[0]=o*c;t[4]=f*l-d;t[8]=h*l+p;t[1]=o*u;t[5]=p*l+h;t[9]=d*l-f;t[2]=-l;t[6]=a*o;t[10]=s*o}else if(e.order==="YZX"){const y=s*o,x=s*l,M=a*o,S=a*l;t[0]=o*c;t[4]=S-y*u;t[8]=M*u+x;t[1]=u;t[5]=s*c;t[9]=-a*c;t[2]=-l*c;t[6]=x*u+M;t[10]=y-S*u}else if(e.order==="XZY"){const y=s*o,x=s*l,M=a*o,S=a*l;t[0]=o*c;t[4]=-u;t[8]=l*c;t[1]=y*u+S;t[5]=s*c;t[9]=x*u-M;t[2]=M*u-x;t[6]=a*c;t[10]=S*u+y}t[3]=0;t[7]=0;t[11]=0;t[12]=0;t[13]=0;t[14]=0;t[15]=1;return this}makeRotationFromQuaternion(e){return this.compose(_zero,e,_one)}lookAt(e,t,n){const i=this.elements;_z.subVectors(e,t);if(_z.lengthSq()===0){_z.z=1}_z.normalize();_x.crossVectors(n,_z);if(_x.lengthSq()===0){if(Math.abs(n.z)===1){_z.x+=1e-4}else{_z.z+=1e-4}_z.normalize();_x.crossVectors(n,_z)}_x.normalize();_y.crossVectors(_z,_x);i[0]=_x.x;i[4]=_y.x;i[8]=_z.x;i[1]=_x.y;i[5]=_y.y;i[9]=_z.y;i[2]=_x.z;i[6]=_y.z;i[10]=_z.z;return this}multiply(e){return this.multiplyMatrices(this,e)}premultiply(e){return this.multiplyMatrices(e,this)}multiplyMatrices(e,B){const t=e.elements;const n=B.elements;const i=this.elements;const r=t[0],s=t[4],a=t[8],o=t[12];const l=t[1],c=t[5],u=t[9],h=t[13];const d=t[2],f=t[6],p=t[10],m=t[14];const g=t[3],_=t[7],v=t[11],y=t[15];const x=n[0],M=n[4],S=n[8],b=n[12];const T=n[1],A=n[5],E=n[9],w=n[13];const C=n[2],R=n[6],L=n[10],P=n[14];const I=n[3],U=n[7],D=n[11],N=n[15];i[0]=r*x+s*T+a*C+o*I;i[4]=r*M+s*A+a*R+o*U;i[8]=r*S+s*E+a*L+o*D;i[12]=r*b+s*w+a*P+o*N;i[1]=l*x+c*T+u*C+h*I;i[5]=l*M+c*A+u*R+h*U;i[9]=l*S+c*E+u*L+h*D;i[13]=l*b+c*w+u*P+h*N;i[2]=d*x+f*T+p*C+m*I;i[6]=d*M+f*A+p*R+m*U;i[10]=d*S+f*E+p*L+m*D;i[14]=d*b+f*w+p*P+m*N;i[3]=g*x+_*T+v*C+y*I;i[7]=g*M+_*A+v*R+y*U;i[11]=g*S+_*E+v*L+y*D;i[15]=g*b+_*w+v*P+y*N;return this}multiplyScalar(e){const t=this.elements;t[0]*=e;t[4]*=e;t[8]*=e;t[12]*=e;t[1]*=e;t[5]*=e;t[9]*=e;t[13]*=e;t[2]*=e;t[6]*=e;t[10]*=e;t[14]*=e;t[3]*=e;t[7]*=e;t[11]*=e;t[15]*=e;return this}determinant(){const e=this.elements;const t=e[0],n=e[4],i=e[8],r=e[12];const s=e[1],a=e[5],o=e[9],l=e[13];const c=e[2],u=e[6],h=e[10],d=e[14];const f=e[3],p=e[7],m=e[11],g=e[15];return f*(+r*o*u-i*l*u-r*a*h+n*l*h+i*a*d-n*o*d)+p*(+t*o*d-t*l*h+r*s*h-i*s*d+i*l*c-r*o*c)+m*(+t*l*u-t*a*d-r*s*u+n*s*d+r*a*c-n*l*c)+g*(-i*a*c-t*o*u+t*a*h+i*s*u-n*s*h+n*o*c)}transpose(){const e=this.elements;let t;t=e[1];e[1]=e[4];e[4]=t;t=e[2];e[2]=e[8];e[8]=t;t=e[6];e[6]=e[9];e[9]=t;t=e[3];e[3]=e[12];e[12]=t;t=e[7];e[7]=e[13];e[13]=t;t=e[11];e[11]=e[14];e[14]=t;return this}setPosition(e,t,n){const i=this.elements;if(e.isVector3){i[12]=e.x;i[13]=e.y;i[14]=e.z}else{i[12]=e;i[13]=t;i[14]=n}return this}invert(){const e=this.elements,t=e[0],n=e[1],i=e[2],r=e[3],s=e[4],a=e[5],o=e[6],l=e[7],c=e[8],u=e[9],h=e[10],d=e[11],f=e[12],p=e[13],m=e[14],g=e[15],_=u*m*l-p*h*l+p*o*d-a*m*d-u*o*g+a*h*g,v=f*h*l-c*m*l-f*o*d+s*m*d+c*o*g-s*h*g,y=c*p*l-f*u*l+f*a*d-s*p*d-c*a*g+s*u*g,x=f*u*o-c*p*o-f*a*h+s*p*h+c*a*m-s*u*m;const M=t*_+n*v+i*y+r*x;if(M===0)return this.set(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);const S=1/M;e[0]=_*S;e[1]=(p*h*r-u*m*r-p*i*d+n*m*d+u*i*g-n*h*g)*S;e[2]=(a*m*r-p*o*r+p*i*l-n*m*l-a*i*g+n*o*g)*S;e[3]=(u*o*r-a*h*r-u*i*l+n*h*l+a*i*d-n*o*d)*S;e[4]=v*S;e[5]=(c*m*r-f*h*r+f*i*d-t*m*d-c*i*g+t*h*g)*S;e[6]=(f*o*r-s*m*r-f*i*l+t*m*l+s*i*g-t*o*g)*S;e[7]=(s*h*r-c*o*r+c*i*l-t*h*l-s*i*d+t*o*d)*S;e[8]=y*S;e[9]=(f*u*r-c*p*r-f*n*d+t*p*d+c*n*g-t*u*g)*S;e[10]=(s*p*r-f*a*r+f*n*l-t*p*l-s*n*g+t*a*g)*S;e[11]=(c*a*r-s*u*r-c*n*l+t*u*l+s*n*d-t*a*d)*S;e[12]=x*S;e[13]=(c*p*i-f*u*i+f*n*h-t*p*h-c*n*m+t*u*m)*S;e[14]=(f*a*i-s*p*i-f*n*o+t*p*o+s*n*m-t*a*m)*S;e[15]=(s*u*i-c*a*i+c*n*o-t*u*o-s*n*h+t*a*h)*S;return this}scale(e){const t=this.elements;const n=e.x,i=e.y,r=e.z;t[0]*=n;t[4]*=i;t[8]*=r;t[1]*=n;t[5]*=i;t[9]*=r;t[2]*=n;t[6]*=i;t[10]*=r;t[3]*=n;t[7]*=i;t[11]*=r;return this}getMaxScaleOnAxis(){const e=this.elements;const t=e[0]*e[0]+e[1]*e[1]+e[2]*e[2];const n=e[4]*e[4]+e[5]*e[5]+e[6]*e[6];const i=e[8]*e[8]+e[9]*e[9]+e[10]*e[10];return Math.sqrt(Math.max(t,n,i))}makeTranslation(e,t,n){if(e.isVector3){this.set(1,0,0,e.x,0,1,0,e.y,0,0,1,e.z,0,0,0,1)}else{this.set(1,0,0,e,0,1,0,t,0,0,1,n,0,0,0,1)}return this}makeRotationX(e){const t=Math.cos(e),n=Math.sin(e);this.set(1,0,0,0,0,t,-n,0,0,n,t,0,0,0,0,1);return this}makeRotationY(e){const t=Math.cos(e),n=Math.sin(e);this.set(t,0,n,0,0,1,0,0,-n,0,t,0,0,0,0,1);return this}makeRotationZ(e){const t=Math.cos(e),n=Math.sin(e);this.set(t,-n,0,0,n,t,0,0,0,0,1,0,0,0,0,1);return this}makeRotationAxis(e,t){const n=Math.cos(t);const i=Math.sin(t);const r=1-n;const s=e.x,a=e.y,o=e.z;const l=r*s,c=r*a;this.set(l*s+n,l*a-i*o,l*o+i*a,0,l*a+i*o,c*a+n,c*o-i*s,0,l*o-i*a,c*o+i*s,r*o*o+n,0,0,0,0,1);return this}makeScale(e,t,n){this.set(e,0,0,0,0,t,0,0,0,0,n,0,0,0,0,1);return this}makeShear(e,t,n,i,r,s){this.set(1,n,r,0,e,1,s,0,t,i,1,0,0,0,0,1);return this}compose(e,t,n){const i=this.elements;const r=t._x,s=t._y,a=t._z,o=t._w;const l=r+r,c=s+s,u=a+a;const h=r*l,d=r*c,f=r*u;const p=s*c,m=s*u,g=a*u;const _=o*l,v=o*c,y=o*u;const x=n.x,M=n.y,S=n.z;i[0]=(1-(p+g))*x;i[1]=(d+y)*x;i[2]=(f-v)*x;i[3]=0;i[4]=(d-y)*M;i[5]=(1-(h+g))*M;i[6]=(m+_)*M;i[7]=0;i[8]=(f+v)*S;i[9]=(m-_)*S;i[10]=(1-(h+p))*S;i[11]=0;i[12]=e.x;i[13]=e.y;i[14]=e.z;i[15]=1;return this}decompose(e,t,n){const i=this.elements;let r=_v1$5.set(i[0],i[1],i[2]).length();const s=_v1$5.set(i[4],i[5],i[6]).length();const a=_v1$5.set(i[8],i[9],i[10]).length();const o=this.determinant();if(o<0)r=-r;e.x=i[12];e.y=i[13];e.z=i[14];_m1$4.copy(this);const l=1/r;const c=1/s;const u=1/a;_m1$4.elements[0]*=l;_m1$4.elements[1]*=l;_m1$4.elements[2]*=l;_m1$4.elements[4]*=c;_m1$4.elements[5]*=c;_m1$4.elements[6]*=c;_m1$4.elements[8]*=u;_m1$4.elements[9]*=u;_m1$4.elements[10]*=u;t.setFromRotationMatrix(_m1$4);n.x=r;n.y=s;n.z=a;return this}makePerspective(e,t,n,i,r,s,a=WebGLCoordinateSystem){const o=this.elements;const l=2*r/(t-e);const c=2*r/(n-i);const u=(t+e)/(t-e);const h=(n+i)/(n-i);let d,f;if(a===WebGLCoordinateSystem){d=-(s+r)/(s-r);f=-2*s*r/(s-r)}else if(a===WebGPUCoordinateSystem){d=-s/(s-r);f=-s*r/(s-r)}else{throw new Error("THREE.Matrix4.makePerspective(): Invalid coordinate system: "+a)}o[0]=l;o[4]=0;o[8]=u;o[12]=0;o[1]=0;o[5]=c;o[9]=h;o[13]=0;o[2]=0;o[6]=0;o[10]=d;o[14]=f;o[3]=0;o[7]=0;o[11]=-1;o[15]=0;return this}makeOrthographic(e,t,n,i,r,s,a=WebGLCoordinateSystem){const o=this.elements;const l=1/(t-e);const c=1/(n-i);const u=1/(s-r);const h=(t+e)*l;const d=(n+i)*c;let f,p;if(a===WebGLCoordinateSystem){f=(s+r)*u;p=-2*u}else if(a===WebGPUCoordinateSystem){f=r*u;p=-1*u}else{throw new Error("THREE.Matrix4.makeOrthographic(): Invalid coordinate system: "+a)}o[0]=2*l;o[4]=0;o[8]=0;o[12]=-h;o[1]=0;o[5]=2*c;o[9]=0;o[13]=-d;o[2]=0;o[6]=0;o[10]=p;o[14]=-f;o[3]=0;o[7]=0;o[11]=0;o[15]=1;return this}equals(e){const t=this.elements;const n=e.elements;for(let e=0;e<16;e++){if(t[e]!==n[e])return false}return true}fromArray(t,n=0){for(let e=0;e<16;e++){this.elements[e]=t[e+n]}return this}toArray(e=[],t=0){const n=this.elements;e[t]=n[0];e[t+1]=n[1];e[t+2]=n[2];e[t+3]=n[3];e[t+4]=n[4];e[t+5]=n[5];e[t+6]=n[6];e[t+7]=n[7];e[t+8]=n[8];e[t+9]=n[9];e[t+10]=n[10];e[t+11]=n[11];e[t+12]=n[12];e[t+13]=n[13];e[t+14]=n[14];e[t+15]=n[15];return e}}const _v1$5=new Vector3;const _m1$4=new Matrix4;const _zero=new Vector3(0,0,0);const _one=new Vector3(1,1,1);const _x=new Vector3;const _y=new Vector3;const _z=new Vector3;const _matrix$2=new Matrix4;const _quaternion$3=new Quaternion;class Euler{constructor(e=0,t=0,n=0,i=Euler.DEFAULT_ORDER){this.isEuler=true;this._x=e;this._y=t;this._z=n;this._order=i}get x(){return this._x}set x(e){this._x=e;this._onChangeCallback()}get y(){return this._y}set y(e){this._y=e;this._onChangeCallback()}get z(){return this._z}set z(e){this._z=e;this._onChangeCallback()}get order(){return this._order}set order(e){this._order=e;this._onChangeCallback()}set(e,t,n,i=this._order){this._x=e;this._y=t;this._z=n;this._order=i;this._onChangeCallback();return this}clone(){return new this.constructor(this._x,this._y,this._z,this._order)}copy(e){this._x=e._x;this._y=e._y;this._z=e._z;this._order=e._order;this._onChangeCallback();return this}setFromRotationMatrix(e,t=this._order,n=true){const i=e.elements;const r=i[0],s=i[4],a=i[8];const o=i[1],l=i[5],c=i[9];const u=i[2],h=i[6],d=i[10];switch(t){case"XYZ":this._y=Math.asin(clamp(a,-1,1));if(Math.abs(a)<.9999999){this._x=Math.atan2(-c,d);this._z=Math.atan2(-s,r)}else{this._x=Math.atan2(h,l);this._z=0}break;case"YXZ":this._x=Math.asin(-clamp(c,-1,1));if(Math.abs(c)<.9999999){this._y=Math.atan2(a,d);this._z=Math.atan2(o,l)}else{this._y=Math.atan2(-u,r);this._z=0}break;case"ZXY":this._x=Math.asin(clamp(h,-1,1));if(Math.abs(h)<.9999999){this._y=Math.atan2(-u,d);this._z=Math.atan2(-s,l)}else{this._y=0;this._z=Math.atan2(o,r)}break;case"ZYX":this._y=Math.asin(-clamp(u,-1,1));if(Math.abs(u)<.9999999){this._x=Math.atan2(h,d);this._z=Math.atan2(o,r)}else{this._x=0;this._z=Math.atan2(-s,l)}break;case"YZX":this._z=Math.asin(clamp(o,-1,1));if(Math.abs(o)<.9999999){this._x=Math.atan2(-c,l);this._y=Math.atan2(-u,r)}else{this._x=0;this._y=Math.atan2(a,d)}break;case"XZY":this._z=Math.asin(-clamp(s,-1,1));if(Math.abs(s)<.9999999){this._x=Math.atan2(h,l);this._y=Math.atan2(a,r)}else{this._x=Math.atan2(-c,d);this._y=0}break;default:console.warn("THREE.Euler: .setFromRotationMatrix() encountered an unknown order: "+t)}this._order=t;if(n===true)this._onChangeCallback();return this}setFromQuaternion(e,t,n){_matrix$2.makeRotationFromQuaternion(e);return this.setFromRotationMatrix(_matrix$2,t,n)}setFromVector3(e,t=this._order){return this.set(e.x,e.y,e.z,t)}reorder(e){_quaternion$3.setFromEuler(this);return this.setFromQuaternion(_quaternion$3,e)}equals(e){return e._x===this._x&&e._y===this._y&&e._z===this._z&&e._order===this._order}fromArray(e){this._x=e[0];this._y=e[1];this._z=e[2];if(e[3]!==undefined)this._order=e[3];this._onChangeCallback();return this}toArray(e=[],t=0){e[t]=this._x;e[t+1]=this._y;e[t+2]=this._z;e[t+3]=this._order;return e}_onChange(e){this._onChangeCallback=e;return this}_onChangeCallback(){}*[Symbol.iterator](){yield this._x;yield this._y;yield this._z;yield this._order}}Euler.DEFAULT_ORDER="XYZ";class Layers{constructor(){this.mask=1|0}set(e){this.mask=(1<<e|0)>>>0}enable(e){this.mask|=1<<e|0}enableAll(){this.mask=4294967295|0}toggle(e){this.mask^=1<<e|0}disable(e){this.mask&=~(1<<e|0)}disableAll(){this.mask=0}test(e){return(this.mask&e.mask)!==0}isEnabled(e){return(this.mask&(1<<e|0))!==0}}let _object3DId=0;const _v1$4=new Vector3;const _q1=new Quaternion;const _m1$3=new Matrix4;const _target=new Vector3;const _position$3=new Vector3;const _scale$2=new Vector3;const _quaternion$2=new Quaternion;const _xAxis=new Vector3(1,0,0);const _yAxis=new Vector3(0,1,0);const _zAxis=new Vector3(0,0,1);const _addedEvent={type:"added"};const _removedEvent={type:"removed"};const _childaddedEvent={type:"childadded",child:null};const _childremovedEvent={type:"childremoved",child:null};class Object3D extends EventDispatcher{constructor(){super();this.isObject3D=true;Object.defineProperty(this,"id",{value:_object3DId++});this.uuid=generateUUID();this.name="";this.type="Object3D";this.parent=null;this.children=[];this.up=Object3D.DEFAULT_UP.clone();const e=new Vector3;const t=new Euler;const n=new Quaternion;const i=new Vector3(1,1,1);function r(){n.setFromEuler(t,false)}function s(){t.setFromQuaternion(n,undefined,false)}t._onChange(r);n._onChange(s);Object.defineProperties(this,{position:{configurable:true,enumerable:true,value:e},rotation:{configurable:true,enumerable:true,value:t},quaternion:{configurable:true,enumerable:true,value:n},scale:{configurable:true,enumerable:true,value:i},modelViewMatrix:{value:new Matrix4},normalMatrix:{value:new Matrix3}});this.matrix=new Matrix4;this.matrixWorld=new Matrix4;this.matrixAutoUpdate=Object3D.DEFAULT_MATRIX_AUTO_UPDATE;this.matrixWorldAutoUpdate=Object3D.DEFAULT_MATRIX_WORLD_AUTO_UPDATE;this.matrixWorldNeedsUpdate=false;this.layers=new Layers;this.visible=true;this.castShadow=false;this.receiveShadow=false;this.frustumCulled=true;this.renderOrder=0;this.animations=[];this.userData={}}onBeforeShadow(){}onAfterShadow(){}onBeforeRender(){}onAfterRender(){}applyMatrix4(e){if(this.matrixAutoUpdate)this.updateMatrix();this.matrix.premultiply(e);this.matrix.decompose(this.position,this.quaternion,this.scale)}applyQuaternion(e){this.quaternion.premultiply(e);return this}setRotationFromAxisAngle(e,t){this.quaternion.setFromAxisAngle(e,t)}setRotationFromEuler(e){this.quaternion.setFromEuler(e,true)}setRotationFromMatrix(e){this.quaternion.setFromRotationMatrix(e)}setRotationFromQuaternion(e){this.quaternion.copy(e)}rotateOnAxis(e,t){_q1.setFromAxisAngle(e,t);this.quaternion.multiply(_q1);return this}rotateOnWorldAxis(e,t){_q1.setFromAxisAngle(e,t);this.quaternion.premultiply(_q1);return this}rotateX(e){return this.rotateOnAxis(_xAxis,e)}rotateY(e){return this.rotateOnAxis(_yAxis,e)}rotateZ(e){return this.rotateOnAxis(_zAxis,e)}translateOnAxis(e,t){_v1$4.copy(e).applyQuaternion(this.quaternion);this.position.add(_v1$4.multiplyScalar(t));return this}translateX(e){return this.translateOnAxis(_xAxis,e)}translateY(e){return this.translateOnAxis(_yAxis,e)}translateZ(e){return this.translateOnAxis(_zAxis,e)}localToWorld(e){this.updateWorldMatrix(true,false);return e.applyMatrix4(this.matrixWorld)}worldToLocal(e){this.updateWorldMatrix(true,false);return e.applyMatrix4(_m1$3.copy(this.matrixWorld).invert())}lookAt(e,t,n){if(e.isVector3){_target.copy(e)}else{_target.set(e,t,n)}const i=this.parent;this.updateWorldMatrix(true,false);_position$3.setFromMatrixPosition(this.matrixWorld);if(this.isCamera||this.isLight){_m1$3.lookAt(_position$3,_target,this.up)}else{_m1$3.lookAt(_target,_position$3,this.up)}this.quaternion.setFromRotationMatrix(_m1$3);if(i){_m1$3.extractRotation(i.matrixWorld);_q1.setFromRotationMatrix(_m1$3);this.quaternion.premultiply(_q1.invert())}}add(e){if(arguments.length>1){for(let e=0;e<arguments.length;e++){this.add(arguments[e])}return this}if(e===this){console.error("THREE.Object3D.add: object can't be added as a child of itself.",e);return this}if(e&&e.isObject3D){e.removeFromParent();e.parent=this;this.children.push(e);e.dispatchEvent(_addedEvent);_childaddedEvent.child=e;this.dispatchEvent(_childaddedEvent);_childaddedEvent.child=null}else{console.error("THREE.Object3D.add: object not an instance of THREE.Object3D.",e)}return this}remove(e){if(arguments.length>1){for(let e=0;e<arguments.length;e++){this.remove(arguments[e])}return this}const t=this.children.indexOf(e);if(t!==-1){e.parent=null;this.children.splice(t,1);e.dispatchEvent(_removedEvent);_childremovedEvent.child=e;this.dispatchEvent(_childremovedEvent);_childremovedEvent.child=null}return this}removeFromParent(){const e=this.parent;if(e!==null){e.remove(this)}return this}clear(){return this.remove(...this.children)}attach(e){this.updateWorldMatrix(true,false);_m1$3.copy(this.matrixWorld).invert();if(e.parent!==null){e.parent.updateWorldMatrix(true,false);_m1$3.multiply(e.parent.matrixWorld)}e.applyMatrix4(_m1$3);e.removeFromParent();e.parent=this;this.children.push(e);e.updateWorldMatrix(false,true);e.dispatchEvent(_addedEvent);_childaddedEvent.child=e;this.dispatchEvent(_childaddedEvent);_childaddedEvent.child=null;return this}getObjectById(e){return this.getObjectByProperty("id",e)}getObjectByName(e){return this.getObjectByProperty("name",e)}getObjectByProperty(n,i){if(this[n]===i)return this;for(let e=0,t=this.children.length;e<t;e++){const r=this.children[e];const s=r.getObjectByProperty(n,i);if(s!==undefined){return s}}return undefined}getObjectsByProperty(n,i,r=[]){if(this[n]===i)r.push(this);const s=this.children;for(let e=0,t=s.length;e<t;e++){s[e].getObjectsByProperty(n,i,r)}return r}getWorldPosition(e){this.updateWorldMatrix(true,false);return e.setFromMatrixPosition(this.matrixWorld)}getWorldQuaternion(e){this.updateWorldMatrix(true,false);this.matrixWorld.decompose(_position$3,e,_scale$2);return e}getWorldScale(e){this.updateWorldMatrix(true,false);this.matrixWorld.decompose(_position$3,_quaternion$2,e);return e}getWorldDirection(e){this.updateWorldMatrix(true,false);const t=this.matrixWorld.elements;return e.set(t[8],t[9],t[10]).normalize()}raycast(){}traverse(n){n(this);const i=this.children;for(let e=0,t=i.length;e<t;e++){i[e].traverse(n)}}traverseVisible(n){if(this.visible===false)return;n(this);const i=this.children;for(let e=0,t=i.length;e<t;e++){i[e].traverseVisible(n)}}traverseAncestors(e){const t=this.parent;if(t!==null){e(t);t.traverseAncestors(e)}}updateMatrix(){this.matrix.compose(this.position,this.quaternion,this.scale);this.matrixWorldNeedsUpdate=true}updateMatrixWorld(n){if(this.matrixAutoUpdate)this.updateMatrix();if(this.matrixWorldNeedsUpdate||n){if(this.parent===null){this.matrixWorld.copy(this.matrix)}else{this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix)}this.matrixWorldNeedsUpdate=false;n=true}const i=this.children;for(let e=0,t=i.length;e<t;e++){const r=i[e];if(r.matrixWorldAutoUpdate===true||n===true){r.updateMatrixWorld(n)}}}updateWorldMatrix(e,t){const n=this.parent;if(e===true&&n!==null&&n.matrixWorldAutoUpdate===true){n.updateWorldMatrix(true,false)}if(this.matrixAutoUpdate)this.updateMatrix();if(this.parent===null){this.matrixWorld.copy(this.matrix)}else{this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix)}if(t===true){const i=this.children;for(let e=0,t=i.length;e<t;e++){const r=i[e];if(r.matrixWorldAutoUpdate===true){r.updateWorldMatrix(false,true)}}}}toJSON(n){const e=n===undefined||typeof n==="string";const t={};if(e){n={geometries:{},materials:{},textures:{},images:{},shapes:{},skeletons:{},animations:{},nodes:{}};t.metadata={version:4.6,type:"Object",generator:"Object3D.toJSON"}}const i={};i.uuid=this.uuid;i.type=this.type;if(this.name!=="")i.name=this.name;if(this.castShadow===true)i.castShadow=true;if(this.receiveShadow===true)i.receiveShadow=true;if(this.visible===false)i.visible=false;if(this.frustumCulled===false)i.frustumCulled=false;if(this.renderOrder!==0)i.renderOrder=this.renderOrder;if(Object.keys(this.userData).length>0)i.userData=this.userData;i.layers=this.layers.mask;i.matrix=this.matrix.toArray();i.up=this.up.toArray();if(this.matrixAutoUpdate===false)i.matrixAutoUpdate=false;if(this.isInstancedMesh){i.type="InstancedMesh";i.count=this.count;i.instanceMatrix=this.instanceMatrix.toJSON();if(this.instanceColor!==null)i.instanceColor=this.instanceColor.toJSON()}if(this.isBatchedMesh){i.type="BatchedMesh";i.perObjectFrustumCulled=this.perObjectFrustumCulled;i.sortObjects=this.sortObjects;i.drawRanges=this._drawRanges;i.reservedRanges=this._reservedRanges;i.visibility=this._visibility;i.active=this._active;i.bounds=this._bounds.map(e=>({boxInitialized:e.boxInitialized,boxMin:e.box.min.toArray(),boxMax:e.box.max.toArray(),sphereInitialized:e.sphereInitialized,sphereRadius:e.sphere.radius,sphereCenter:e.sphere.center.toArray()}));i.maxGeometryCount=this._maxGeometryCount;i.maxVertexCount=this._maxVertexCount;i.maxIndexCount=this._maxIndexCount;i.geometryInitialized=this._geometryInitialized;i.geometryCount=this._geometryCount;i.matricesTexture=this._matricesTexture.toJSON(n);if(this.boundingSphere!==null){i.boundingSphere={center:i.boundingSphere.center.toArray(),radius:i.boundingSphere.radius}}if(this.boundingBox!==null){i.boundingBox={min:i.boundingBox.min.toArray(),max:i.boundingBox.max.toArray()}}}function r(e,t){if(e[t.uuid]===undefined){e[t.uuid]=t.toJSON(n)}return t.uuid}if(this.isScene){if(this.background){if(this.background.isColor){i.background=this.background.toJSON()}else if(this.background.isTexture){i.background=this.background.toJSON(n).uuid}}if(this.environment&&this.environment.isTexture&&this.environment.isRenderTargetTexture!==true){i.environment=this.environment.toJSON(n).uuid}}else if(this.isMesh||this.isLine||this.isPoints){i.geometry=r(n.geometries,this.geometry);const a=this.geometry.parameters;if(a!==undefined&&a.shapes!==undefined){const o=a.shapes;if(Array.isArray(o)){for(let e=0,t=o.length;e<t;e++){const l=o[e];r(n.shapes,l)}}else{r(n.shapes,o)}}}if(this.isSkinnedMesh){i.bindMode=this.bindMode;i.bindMatrix=this.bindMatrix.toArray();if(this.skeleton!==undefined){r(n.skeletons,this.skeleton);i.skeleton=this.skeleton.uuid}}if(this.material!==undefined){if(Array.isArray(this.material)){const c=[];for(let e=0,t=this.material.length;e<t;e++){c.push(r(n.materials,this.material[e]))}i.material=c}else{i.material=r(n.materials,this.material)}}if(this.children.length>0){i.children=[];for(let e=0;e<this.children.length;e++){i.children.push(this.children[e].toJSON(n).object)}}if(this.animations.length>0){i.animations=[];for(let e=0;e<this.animations.length;e++){const u=this.animations[e];i.animations.push(r(n.animations,u))}}if(e){const h=s(n.geometries);const d=s(n.materials);const f=s(n.textures);const p=s(n.images);const o=s(n.shapes);const m=s(n.skeletons);const g=s(n.animations);const _=s(n.nodes);if(h.length>0)t.geometries=h;if(d.length>0)t.materials=d;if(f.length>0)t.textures=f;if(p.length>0)t.images=p;if(o.length>0)t.shapes=o;if(m.length>0)t.skeletons=m;if(g.length>0)t.animations=g;if(_.length>0)t.nodes=_}t.object=i;return t;function s(e){const t=[];for(const n in e){const i=e[n];delete i.metadata;t.push(i)}return t}}clone(e){return(new this.constructor).copy(this,e)}copy(t,e=true){this.name=t.name;this.up.copy(t.up);this.position.copy(t.position);this.rotation.order=t.rotation.order;this.quaternion.copy(t.quaternion);this.scale.copy(t.scale);this.matrix.copy(t.matrix);this.matrixWorld.copy(t.matrixWorld);this.matrixAutoUpdate=t.matrixAutoUpdate;this.matrixWorldAutoUpdate=t.matrixWorldAutoUpdate;this.matrixWorldNeedsUpdate=t.matrixWorldNeedsUpdate;this.layers.mask=t.layers.mask;this.visible=t.visible;this.castShadow=t.castShadow;this.receiveShadow=t.receiveShadow;this.frustumCulled=t.frustumCulled;this.renderOrder=t.renderOrder;this.animations=t.animations.slice();this.userData=JSON.parse(JSON.stringify(t.userData));if(e===true){for(let e=0;e<t.children.length;e++){const n=t.children[e];this.add(n.clone())}}return this}}Object3D.DEFAULT_UP=new Vector3(0,1,0);Object3D.DEFAULT_MATRIX_AUTO_UPDATE=true;Object3D.DEFAULT_MATRIX_WORLD_AUTO_UPDATE=true;const _v0$1=new Vector3;const _v1$3=new Vector3;const _v2$2=new Vector3;const _v3$2=new Vector3;const _vab=new Vector3;const _vac=new Vector3;const _vbc=new Vector3;const _vap=new Vector3;const _vbp=new Vector3;const _vcp=new Vector3;class Triangle{constructor(e=new Vector3,t=new Vector3,n=new Vector3){this.a=e;this.b=t;this.c=n}static getNormal(e,t,n,i){i.subVectors(n,t);_v0$1.subVectors(e,t);i.cross(_v0$1);const r=i.lengthSq();if(r>0){return i.multiplyScalar(1/Math.sqrt(r))}return i.set(0,0,0)}static getBarycoord(e,t,n,i,r){_v0$1.subVectors(i,t);_v1$3.subVectors(n,t);_v2$2.subVectors(e,t);const s=_v0$1.dot(_v0$1);const a=_v0$1.dot(_v1$3);const o=_v0$1.dot(_v2$2);const l=_v1$3.dot(_v1$3);const c=_v1$3.dot(_v2$2);const u=s*l-a*a;if(u===0){r.set(0,0,0);return null}const h=1/u;const d=(l*o-a*c)*h;const f=(s*c-a*o)*h;return r.set(1-d-f,f,d)}static containsPoint(e,t,n,i){if(this.getBarycoord(e,t,n,i,_v3$2)===null){return false}return _v3$2.x>=0&&_v3$2.y>=0&&_v3$2.x+_v3$2.y<=1}static getInterpolation(e,t,n,i,r,s,a,o){if(this.getBarycoord(e,t,n,i,_v3$2)===null){o.x=0;o.y=0;if("z"in o)o.z=0;if("w"in o)o.w=0;return null}o.setScalar(0);o.addScaledVector(r,_v3$2.x);o.addScaledVector(s,_v3$2.y);o.addScaledVector(a,_v3$2.z);return o}static isFrontFacing(e,t,n,i){_v0$1.subVectors(n,t);_v1$3.subVectors(e,t);return _v0$1.cross(_v1$3).dot(i)<0?true:false}set(e,t,n){this.a.copy(e);this.b.copy(t);this.c.copy(n);return this}setFromPointsAndIndices(e,t,n,i){this.a.copy(e[t]);this.b.copy(e[n]);this.c.copy(e[i]);return this}setFromAttributeAndIndices(e,t,n,i){this.a.fromBufferAttribute(e,t);this.b.fromBufferAttribute(e,n);this.c.fromBufferAttribute(e,i);return this}clone(){return(new this.constructor).copy(this)}copy(e){this.a.copy(e.a);this.b.copy(e.b);this.c.copy(e.c);return this}getArea(){_v0$1.subVectors(this.c,this.b);_v1$3.subVectors(this.a,this.b);return _v0$1.cross(_v1$3).length()*.5}getMidpoint(e){return e.addVectors(this.a,this.b).add(this.c).multiplyScalar(1/3)}getNormal(e){return Triangle.getNormal(this.a,this.b,this.c,e)}getPlane(e){return e.setFromCoplanarPoints(this.a,this.b,this.c)}getBarycoord(e,t){return Triangle.getBarycoord(e,this.a,this.b,this.c,t)}getInterpolation(e,t,n,i,r){return Triangle.getInterpolation(e,this.a,this.b,this.c,t,n,i,r)}containsPoint(e){return Triangle.containsPoint(e,this.a,this.b,this.c)}isFrontFacing(e){return Triangle.isFrontFacing(this.a,this.b,this.c,e)}intersectsBox(e){return e.intersectsTriangle(this)}closestPointToPoint(e,t){const n=this.a,i=this.b,r=this.c;let s,a;_vab.subVectors(i,n);_vac.subVectors(r,n);_vap.subVectors(e,n);const o=_vab.dot(_vap);const l=_vac.dot(_vap);if(o<=0&&l<=0){return t.copy(n)}_vbp.subVectors(e,i);const c=_vab.dot(_vbp);const u=_vac.dot(_vbp);if(c>=0&&u<=c){return t.copy(i)}const h=o*u-c*l;if(h<=0&&o>=0&&c<=0){s=o/(o-c);return t.copy(n).addScaledVector(_vab,s)}_vcp.subVectors(e,r);const d=_vab.dot(_vcp);const f=_vac.dot(_vcp);if(f>=0&&d<=f){return t.copy(r)}const p=d*l-o*f;if(p<=0&&l>=0&&f<=0){a=l/(l-f);return t.copy(n).addScaledVector(_vac,a)}const m=c*f-d*u;if(m<=0&&u-c>=0&&d-f>=0){_vbc.subVectors(r,i);a=(u-c)/(u-c+(d-f));return t.copy(i).addScaledVector(_vbc,a)}const g=1/(m+p+h);s=p*g;a=h*g;return t.copy(n).addScaledVector(_vab,s).addScaledVector(_vac,a)}equals(e){return e.a.equals(this.a)&&e.b.equals(this.b)&&e.c.equals(this.c)}}const _colorKeywords={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074};const _hslA={h:0,s:0,l:0};const _hslB={h:0,s:0,l:0};function hue2rgb(e,t,n){if(n<0)n+=1;if(n>1)n-=1;if(n<1/6)return e+(t-e)*6*n;if(n<1/2)return t;if(n<2/3)return e+(t-e)*6*(2/3-n);return e}class Color{constructor(e,t,n){this.isColor=true;this.r=1;this.g=1;this.b=1;return this.set(e,t,n)}set(e,t,n){if(t===undefined&&n===undefined){const i=e;if(i&&i.isColor){this.copy(i)}else if(typeof i==="number"){this.setHex(i)}else if(typeof i==="string"){this.setStyle(i)}}else{this.setRGB(e,t,n)}return this}setScalar(e){this.r=e;this.g=e;this.b=e;return this}setHex(e,t=SRGBColorSpace){e=Math.floor(e);this.r=(e>>16&255)/255;this.g=(e>>8&255)/255;this.b=(e&255)/255;ColorManagement.toWorkingColorSpace(this,t);return this}setRGB(e,t,n,i=ColorManagement.workingColorSpace){this.r=e;this.g=t;this.b=n;ColorManagement.toWorkingColorSpace(this,i);return this}setHSL(e,t,n,i=ColorManagement.workingColorSpace){e=euclideanModulo(e,1);t=clamp(t,0,1);n=clamp(n,0,1);if(t===0){this.r=this.g=this.b=n}else{const r=n<=.5?n*(1+t):n+t-n*t;const s=2*n-r;this.r=hue2rgb(s,r,e+1/3);this.g=hue2rgb(s,r,e);this.b=hue2rgb(s,r,e-1/3)}ColorManagement.toWorkingColorSpace(this,i);return this}setStyle(t,n=SRGBColorSpace){function i(e){if(e===undefined)return;if(parseFloat(e)<1){console.warn("THREE.Color: Alpha component of "+t+" will be ignored.")}}let r;if(r=/^(\w+)\(([^\)]*)\)/.exec(t)){let e;const s=r[1];const a=r[2];switch(s){case"rgb":case"rgba":if(e=/^\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(a)){i(e[4]);return this.setRGB(Math.min(255,parseInt(e[1],10))/255,Math.min(255,parseInt(e[2],10))/255,Math.min(255,parseInt(e[3],10))/255,n)}if(e=/^\s*(\d+)\%\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(a)){i(e[4]);return this.setRGB(Math.min(100,parseInt(e[1],10))/100,Math.min(100,parseInt(e[2],10))/100,Math.min(100,parseInt(e[3],10))/100,n)}break;case"hsl":case"hsla":if(e=/^\s*(\d*\.?\d+)\s*,\s*(\d*\.?\d+)\%\s*,\s*(\d*\.?\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(a)){i(e[4]);return this.setHSL(parseFloat(e[1])/360,parseFloat(e[2])/100,parseFloat(e[3])/100,n)}break;default:console.warn("THREE.Color: Unknown color model "+t)}}else if(r=/^\#([A-Fa-f\d]+)$/.exec(t)){const e=r[1];const o=e.length;if(o===3){return this.setRGB(parseInt(e.charAt(0),16)/15,parseInt(e.charAt(1),16)/15,parseInt(e.charAt(2),16)/15,n)}else if(o===6){return this.setHex(parseInt(e,16),n)}else{console.warn("THREE.Color: Invalid hex color "+t)}}else if(t&&t.length>0){return this.setColorName(t,n)}return this}setColorName(e,t=SRGBColorSpace){const n=_colorKeywords[e.toLowerCase()];if(n!==undefined){this.setHex(n,t)}else{console.warn("THREE.Color: Unknown color "+e)}return this}clone(){return new this.constructor(this.r,this.g,this.b)}copy(e){this.r=e.r;this.g=e.g;this.b=e.b;return this}copySRGBToLinear(e){this.r=SRGBToLinear(e.r);this.g=SRGBToLinear(e.g);this.b=SRGBToLinear(e.b);return this}copyLinearToSRGB(e){this.r=LinearToSRGB(e.r);this.g=LinearToSRGB(e.g);this.b=LinearToSRGB(e.b);return this}convertSRGBToLinear(){this.copySRGBToLinear(this);return this}convertLinearToSRGB(){this.copyLinearToSRGB(this);return this}getHex(e=SRGBColorSpace){ColorManagement.fromWorkingColorSpace(_color.copy(this),e);return Math.round(clamp(_color.r*255,0,255))*65536+Math.round(clamp(_color.g*255,0,255))*256+Math.round(clamp(_color.b*255,0,255))}getHexString(e=SRGBColorSpace){return("000000"+this.getHex(e).toString(16)).slice(-6)}getHSL(e,t=ColorManagement.workingColorSpace){ColorManagement.fromWorkingColorSpace(_color.copy(this),t);const n=_color.r,i=_color.g,r=_color.b;const s=Math.max(n,i,r);const a=Math.min(n,i,r);let o,l;const c=(a+s)/2;if(a===s){o=0;l=0}else{const u=s-a;l=c<=.5?u/(s+a):u/(2-s-a);switch(s){case n:o=(i-r)/u+(i<r?6:0);break;case i:o=(r-n)/u+2;break;case r:o=(n-i)/u+4;break}o/=6}e.h=o;e.s=l;e.l=c;return e}getRGB(e,t=ColorManagement.workingColorSpace){ColorManagement.fromWorkingColorSpace(_color.copy(this),t);e.r=_color.r;e.g=_color.g;e.b=_color.b;return e}getStyle(e=SRGBColorSpace){ColorManagement.fromWorkingColorSpace(_color.copy(this),e);const t=_color.r,n=_color.g,i=_color.b;if(e!==SRGBColorSpace){return`color(${e} ${t.toFixed(3)} ${n.toFixed(3)} ${i.toFixed(3)})`}return`rgb(${Math.round(t*255)},${Math.round(n*255)},${Math.round(i*255)})`}offsetHSL(e,t,n){this.getHSL(_hslA);return this.setHSL(_hslA.h+e,_hslA.s+t,_hslA.l+n)}add(e){this.r+=e.r;this.g+=e.g;this.b+=e.b;return this}addColors(e,t){this.r=e.r+t.r;this.g=e.g+t.g;this.b=e.b+t.b;return this}addScalar(e){this.r+=e;this.g+=e;this.b+=e;return this}sub(e){this.r=Math.max(0,this.r-e.r);this.g=Math.max(0,this.g-e.g);this.b=Math.max(0,this.b-e.b);return this}multiply(e){this.r*=e.r;this.g*=e.g;this.b*=e.b;return this}multiplyScalar(e){this.r*=e;this.g*=e;this.b*=e;return this}lerp(e,t){this.r+=(e.r-this.r)*t;this.g+=(e.g-this.g)*t;this.b+=(e.b-this.b)*t;return this}lerpColors(e,t,n){this.r=e.r+(t.r-e.r)*n;this.g=e.g+(t.g-e.g)*n;this.b=e.b+(t.b-e.b)*n;return this}lerpHSL(e,t){this.getHSL(_hslA);e.getHSL(_hslB);const n=lerp(_hslA.h,_hslB.h,t);const i=lerp(_hslA.s,_hslB.s,t);const r=lerp(_hslA.l,_hslB.l,t);this.setHSL(n,i,r);return this}setFromVector3(e){this.r=e.x;this.g=e.y;this.b=e.z;return this}applyMatrix3(e){const t=this.r,n=this.g,i=this.b;const r=e.elements;this.r=r[0]*t+r[3]*n+r[6]*i;this.g=r[1]*t+r[4]*n+r[7]*i;this.b=r[2]*t+r[5]*n+r[8]*i;return this}equals(e){return e.r===this.r&&e.g===this.g&&e.b===this.b}fromArray(e,t=0){this.r=e[t];this.g=e[t+1];this.b=e[t+2];return this}toArray(e=[],t=0){e[t]=this.r;e[t+1]=this.g;e[t+2]=this.b;return e}fromBufferAttribute(e,t){this.r=e.getX(t);this.g=e.getY(t);this.b=e.getZ(t);return this}toJSON(){return this.getHex()}*[Symbol.iterator](){yield this.r;yield this.g;yield this.b}}const _color=new Color;Color.NAMES=_colorKeywords;let _materialId=0;class Material extends EventDispatcher{constructor(){super();this.isMaterial=true;Object.defineProperty(this,"id",{value:_materialId++});this.uuid=generateUUID();this.name="";this.type="Material";this.blending=NormalBlending;this.side=FrontSide;this.vertexColors=false;this.opacity=1;this.transparent=false;this.alphaHash=false;this.blendSrc=SrcAlphaFactor;this.blendDst=OneMinusSrcAlphaFactor;this.blendEquation=AddEquation;this.blendSrcAlpha=null;this.blendDstAlpha=null;this.blendEquationAlpha=null;this.blendColor=new Color(0,0,0);this.blendAlpha=0;this.depthFunc=LessEqualDepth;this.depthTest=true;this.depthWrite=true;this.stencilWriteMask=255;this.stencilFunc=AlwaysStencilFunc;this.stencilRef=0;this.stencilFuncMask=255;this.stencilFail=KeepStencilOp;this.stencilZFail=KeepStencilOp;this.stencilZPass=KeepStencilOp;this.stencilWrite=false;this.clippingPlanes=null;this.clipIntersection=false;this.clipShadows=false;this.shadowSide=null;this.colorWrite=true;this.precision=null;this.polygonOffset=false;this.polygonOffsetFactor=0;this.polygonOffsetUnits=0;this.dithering=false;this.alphaToCoverage=false;this.premultipliedAlpha=false;this.forceSinglePass=false;this.visible=true;this.toneMapped=true;this.userData={};this.version=0;this._alphaTest=0}get alphaTest(){return this._alphaTest}set alphaTest(e){if(this._alphaTest>0!==e>0){this.version++}this._alphaTest=e}onBuild(){}onBeforeRender(){}onBeforeCompile(){}customProgramCacheKey(){return this.onBeforeCompile.toString()}setValues(e){if(e===undefined)return;for(const t in e){const n=e[t];if(n===undefined){console.warn(`THREE.Material: parameter '${t}' has value of undefined.`);continue}const i=this[t];if(i===undefined){console.warn(`THREE.Material: '${t}' is not a property of THREE.${this.type}.`);continue}if(i&&i.isColor){i.set(n)}else if(i&&i.isVector3&&(n&&n.isVector3)){i.copy(n)}else{this[t]=n}}}toJSON(e){const t=e===undefined||typeof e==="string";if(t){e={textures:{},images:{}}}const n={metadata:{version:4.6,type:"Material",generator:"Material.toJSON"}};n.uuid=this.uuid;n.type=this.type;if(this.name!=="")n.name=this.name;if(this.color&&this.color.isColor)n.color=this.color.getHex();if(this.roughness!==undefined)n.roughness=this.roughness;if(this.metalness!==undefined)n.metalness=this.metalness;if(this.sheen!==undefined)n.sheen=this.sheen;if(this.sheenColor&&this.sheenColor.isColor)n.sheenColor=this.sheenColor.getHex();if(this.sheenRoughness!==undefined)n.sheenRoughness=this.sheenRoughness;if(this.emissive&&this.emissive.isColor)n.emissive=this.emissive.getHex();if(this.emissiveIntensity!==undefined&&this.emissiveIntensity!==1)n.emissiveIntensity=this.emissiveIntensity;if(this.specular&&this.specular.isColor)n.specular=this.specular.getHex();if(this.specularIntensity!==undefined)n.specularIntensity=this.specularIntensity;if(this.specularColor&&this.specularColor.isColor)n.specularColor=this.specularColor.getHex();if(this.shininess!==undefined)n.shininess=this.shininess;if(this.clearcoat!==undefined)n.clearcoat=this.clearcoat;if(this.clearcoatRoughness!==undefined)n.clearcoatRoughness=this.clearcoatRoughness;if(this.clearcoatMap&&this.clearcoatMap.isTexture){n.clearcoatMap=this.clearcoatMap.toJSON(e).uuid}if(this.clearcoatRoughnessMap&&this.clearcoatRoughnessMap.isTexture){n.clearcoatRoughnessMap=this.clearcoatRoughnessMap.toJSON(e).uuid}if(this.clearcoatNormalMap&&this.clearcoatNormalMap.isTexture){n.clearcoatNormalMap=this.clearcoatNormalMap.toJSON(e).uuid;n.clearcoatNormalScale=this.clearcoatNormalScale.toArray()}if(this.dispersion!==undefined)n.dispersion=this.dispersion;if(this.iridescence!==undefined)n.iridescence=this.iridescence;if(this.iridescenceIOR!==undefined)n.iridescenceIOR=this.iridescenceIOR;if(this.iridescenceThicknessRange!==undefined)n.iridescenceThicknessRange=this.iridescenceThicknessRange;if(this.iridescenceMap&&this.iridescenceMap.isTexture){n.iridescenceMap=this.iridescenceMap.toJSON(e).uuid}if(this.iridescenceThicknessMap&&this.iridescenceThicknessMap.isTexture){n.iridescenceThicknessMap=this.iridescenceThicknessMap.toJSON(e).uuid}if(this.anisotropy!==undefined)n.anisotropy=this.anisotropy;if(this.anisotropyRotation!==undefined)n.anisotropyRotation=this.anisotropyRotation;if(this.anisotropyMap&&this.anisotropyMap.isTexture){n.anisotropyMap=this.anisotropyMap.toJSON(e).uuid}if(this.map&&this.map.isTexture)n.map=this.map.toJSON(e).uuid;if(this.matcap&&this.matcap.isTexture)n.matcap=this.matcap.toJSON(e).uuid;if(this.alphaMap&&this.alphaMap.isTexture)n.alphaMap=this.alphaMap.toJSON(e).uuid;if(this.lightMap&&this.lightMap.isTexture){n.lightMap=this.lightMap.toJSON(e).uuid;n.lightMapIntensity=this.lightMapIntensity}if(this.aoMap&&this.aoMap.isTexture){n.aoMap=this.aoMap.toJSON(e).uuid;n.aoMapIntensity=this.aoMapIntensity}if(this.bumpMap&&this.bumpMap.isTexture){n.bumpMap=this.bumpMap.toJSON(e).uuid;n.bumpScale=this.bumpScale}if(this.normalMap&&this.normalMap.isTexture){n.normalMap=this.normalMap.toJSON(e).uuid;n.normalMapType=this.normalMapType;n.normalScale=this.normalScale.toArray()}if(this.displacementMap&&this.displacementMap.isTexture){n.displacementMap=this.displacementMap.toJSON(e).uuid;n.displacementScale=this.displacementScale;n.displacementBias=this.displacementBias}if(this.roughnessMap&&this.roughnessMap.isTexture)n.roughnessMap=this.roughnessMap.toJSON(e).uuid;if(this.metalnessMap&&this.metalnessMap.isTexture)n.metalnessMap=this.metalnessMap.toJSON(e).uuid;if(this.emissiveMap&&this.emissiveMap.isTexture)n.emissiveMap=this.emissiveMap.toJSON(e).uuid;if(this.specularMap&&this.specularMap.isTexture)n.specularMap=this.specularMap.toJSON(e).uuid;if(this.specularIntensityMap&&this.specularIntensityMap.isTexture)n.specularIntensityMap=this.specularIntensityMap.toJSON(e).uuid;if(this.specularColorMap&&this.specularColorMap.isTexture)n.specularColorMap=this.specularColorMap.toJSON(e).uuid;if(this.envMap&&this.envMap.isTexture){n.envMap=this.envMap.toJSON(e).uuid;if(this.combine!==undefined)n.combine=this.combine}if(this.envMapRotation!==undefined)n.envMapRotation=this.envMapRotation.toArray();if(this.envMapIntensity!==undefined)n.envMapIntensity=this.envMapIntensity;if(this.reflectivity!==undefined)n.reflectivity=this.reflectivity;if(this.refractionRatio!==undefined)n.refractionRatio=this.refractionRatio;if(this.gradientMap&&this.gradientMap.isTexture){n.gradientMap=this.gradientMap.toJSON(e).uuid}if(this.transmission!==undefined)n.transmission=this.transmission;if(this.transmissionMap&&this.transmissionMap.isTexture)n.transmissionMap=this.transmissionMap.toJSON(e).uuid;if(this.thickness!==undefined)n.thickness=this.thickness;if(this.thicknessMap&&this.thicknessMap.isTexture)n.thicknessMap=this.thicknessMap.toJSON(e).uuid;if(this.attenuationDistance!==undefined&&this.attenuationDistance!==Infinity)n.attenuationDistance=this.attenuationDistance;if(this.attenuationColor!==undefined)n.attenuationColor=this.attenuationColor.getHex();if(this.size!==undefined)n.size=this.size;if(this.shadowSide!==null)n.shadowSide=this.shadowSide;if(this.sizeAttenuation!==undefined)n.sizeAttenuation=this.sizeAttenuation;if(this.blending!==NormalBlending)n.blending=this.blending;if(this.side!==FrontSide)n.side=this.side;if(this.vertexColors===true)n.vertexColors=true;if(this.opacity<1)n.opacity=this.opacity;if(this.transparent===true)n.transparent=true;if(this.blendSrc!==SrcAlphaFactor)n.blendSrc=this.blendSrc;if(this.blendDst!==OneMinusSrcAlphaFactor)n.blendDst=this.blendDst;if(this.blendEquation!==AddEquation)n.blendEquation=this.blendEquation;if(this.blendSrcAlpha!==null)n.blendSrcAlpha=this.blendSrcAlpha;if(this.blendDstAlpha!==null)n.blendDstAlpha=this.blendDstAlpha;if(this.blendEquationAlpha!==null)n.blendEquationAlpha=this.blendEquationAlpha;if(this.blendColor&&this.blendColor.isColor)n.blendColor=this.blendColor.getHex();if(this.blendAlpha!==0)n.blendAlpha=this.blendAlpha;if(this.depthFunc!==LessEqualDepth)n.depthFunc=this.depthFunc;if(this.depthTest===false)n.depthTest=this.depthTest;if(this.depthWrite===false)n.depthWrite=this.depthWrite;if(this.colorWrite===false)n.colorWrite=this.colorWrite;if(this.stencilWriteMask!==255)n.stencilWriteMask=this.stencilWriteMask;if(this.stencilFunc!==AlwaysStencilFunc)n.stencilFunc=this.stencilFunc;if(this.stencilRef!==0)n.stencilRef=this.stencilRef;if(this.stencilFuncMask!==255)n.stencilFuncMask=this.stencilFuncMask;if(this.stencilFail!==KeepStencilOp)n.stencilFail=this.stencilFail;if(this.stencilZFail!==KeepStencilOp)n.stencilZFail=this.stencilZFail;if(this.stencilZPass!==KeepStencilOp)n.stencilZPass=this.stencilZPass;if(this.stencilWrite===true)n.stencilWrite=this.stencilWrite;if(this.rotation!==undefined&&this.rotation!==0)n.rotation=this.rotation;if(this.polygonOffset===true)n.polygonOffset=true;if(this.polygonOffsetFactor!==0)n.polygonOffsetFactor=this.polygonOffsetFactor;if(this.polygonOffsetUnits!==0)n.polygonOffsetUnits=this.polygonOffsetUnits;if(this.linewidth!==undefined&&this.linewidth!==1)n.linewidth=this.linewidth;if(this.dashSize!==undefined)n.dashSize=this.dashSize;if(this.gapSize!==undefined)n.gapSize=this.gapSize;if(this.scale!==undefined)n.scale=this.scale;if(this.dithering===true)n.dithering=true;if(this.alphaTest>0)n.alphaTest=this.alphaTest;if(this.alphaHash===true)n.alphaHash=true;if(this.alphaToCoverage===true)n.alphaToCoverage=true;if(this.premultipliedAlpha===true)n.premultipliedAlpha=true;if(this.forceSinglePass===true)n.forceSinglePass=true;if(this.wireframe===true)n.wireframe=true;if(this.wireframeLinewidth>1)n.wireframeLinewidth=this.wireframeLinewidth;if(this.wireframeLinecap!=="round")n.wireframeLinecap=this.wireframeLinecap;if(this.wireframeLinejoin!=="round")n.wireframeLinejoin=this.wireframeLinejoin;if(this.flatShading===true)n.flatShading=true;if(this.visible===false)n.visible=false;if(this.toneMapped===false)n.toneMapped=false;if(this.fog===false)n.fog=false;if(Object.keys(this.userData).length>0)n.userData=this.userData;function i(t){const n=[];for(const i in t){const e=t[i];delete e.metadata;n.push(e)}return n}if(t){const r=i(e.textures);const s=i(e.images);if(r.length>0)n.textures=r;if(s.length>0)n.images=s}return n}clone(){return(new this.constructor).copy(this)}copy(e){this.name=e.name;this.blending=e.blending;this.side=e.side;this.vertexColors=e.vertexColors;this.opacity=e.opacity;this.transparent=e.transparent;this.blendSrc=e.blendSrc;this.blendDst=e.blendDst;this.blendEquation=e.blendEquation;this.blendSrcAlpha=e.blendSrcAlpha;this.blendDstAlpha=e.blendDstAlpha;this.blendEquationAlpha=e.blendEquationAlpha;this.blendColor.copy(e.blendColor);this.blendAlpha=e.blendAlpha;this.depthFunc=e.depthFunc;this.depthTest=e.depthTest;this.depthWrite=e.depthWrite;this.stencilWriteMask=e.stencilWriteMask;this.stencilFunc=e.stencilFunc;this.stencilRef=e.stencilRef;this.stencilFuncMask=e.stencilFuncMask;this.stencilFail=e.stencilFail;this.stencilZFail=e.stencilZFail;this.stencilZPass=e.stencilZPass;this.stencilWrite=e.stencilWrite;const t=e.clippingPlanes;let n=null;if(t!==null){const i=t.length;n=new Array(i);for(let e=0;e!==i;++e){n[e]=t[e].clone()}}this.clippingPlanes=n;this.clipIntersection=e.clipIntersection;this.clipShadows=e.clipShadows;this.shadowSide=e.shadowSide;this.colorWrite=e.colorWrite;this.precision=e.precision;this.polygonOffset=e.polygonOffset;this.polygonOffsetFactor=e.polygonOffsetFactor;this.polygonOffsetUnits=e.polygonOffsetUnits;this.dithering=e.dithering;this.alphaTest=e.alphaTest;this.alphaHash=e.alphaHash;this.alphaToCoverage=e.alphaToCoverage;this.premultipliedAlpha=e.premultipliedAlpha;this.forceSinglePass=e.forceSinglePass;this.visible=e.visible;this.toneMapped=e.toneMapped;this.userData=JSON.parse(JSON.stringify(e.userData));return this}dispose(){this.dispatchEvent({type:"dispose"})}set needsUpdate(e){if(e===true)this.version++}}class MeshBasicMaterial extends Material{constructor(e){super();this.isMeshBasicMaterial=true;this.type="MeshBasicMaterial";this.color=new Color(16777215);this.map=null;this.lightMap=null;this.lightMapIntensity=1;this.aoMap=null;this.aoMapIntensity=1;this.specularMap=null;this.alphaMap=null;this.envMap=null;this.envMapRotation=new Euler;this.combine=MultiplyOperation;this.reflectivity=1;this.refractionRatio=.98;this.wireframe=false;this.wireframeLinewidth=1;this.wireframeLinecap="round";this.wireframeLinejoin="round";this.fog=true;this.setValues(e)}copy(e){super.copy(e);this.color.copy(e.color);this.map=e.map;this.lightMap=e.lightMap;this.lightMapIntensity=e.lightMapIntensity;this.aoMap=e.aoMap;this.aoMapIntensity=e.aoMapIntensity;this.specularMap=e.specularMap;this.alphaMap=e.alphaMap;this.envMap=e.envMap;this.envMapRotation.copy(e.envMapRotation);this.combine=e.combine;this.reflectivity=e.reflectivity;this.refractionRatio=e.refractionRatio;this.wireframe=e.wireframe;this.wireframeLinewidth=e.wireframeLinewidth;this.wireframeLinecap=e.wireframeLinecap;this.wireframeLinejoin=e.wireframeLinejoin;this.fog=e.fog;return this}}const _tables=_generateTables();function _generateTables(){const e=new ArrayBuffer(4);const t=new Float32Array(e);const n=new Uint32Array(e);const i=new Uint32Array(512);const r=new Uint32Array(512);for(let e=0;e<256;++e){const l=e-127;if(l<-27){i[e]=0;i[e|256]=32768;r[e]=24;r[e|256]=24}else if(l<-14){i[e]=1024>>-l-14;i[e|256]=1024>>-l-14|32768;r[e]=-l-1;r[e|256]=-l-1}else if(l<=15){i[e]=l+15<<10;i[e|256]=l+15<<10|32768;r[e]=13;r[e|256]=13}else if(l<128){i[e]=31744;i[e|256]=64512;r[e]=24;r[e|256]=24}else{i[e]=31744;i[e|256]=64512;r[e]=13;r[e|256]=13}}const s=new Uint32Array(2048);const a=new Uint32Array(64);const o=new Uint32Array(64);for(let n=1;n<1024;++n){let e=n<<13;let t=0;while((e&8388608)===0){e<<=1;t-=8388608}e&=~8388608;t+=947912704;s[n]=e|t}for(let e=1024;e<2048;++e){s[e]=939524096+(e-1024<<13)}for(let e=1;e<31;++e){a[e]=e<<23}a[31]=1199570944;a[32]=2147483648;for(let e=33;e<63;++e){a[e]=2147483648+(e-32<<23)}a[63]=3347054592;for(let e=1;e<64;++e){if(e!==32){o[e]=1024}}return{floatView:t,uint32View:n,baseTable:i,shiftTable:r,mantissaTable:s,exponentTable:a,offsetTable:o}}function toHalfFloat(e){if(Math.abs(e)>65504)console.warn("THREE.DataUtils.toHalfFloat(): Value out of range.");e=clamp(e,-65504,65504);_tables.floatView[0]=e;const t=_tables.uint32View[0];const n=t>>23&511;return _tables.baseTable[n]+((t&8388607)>>_tables.shiftTable[n])}function fromHalfFloat(e){const t=e>>10;_tables.uint32View[0]=_tables.mantissaTable[_tables.offsetTable[t]+(e&1023)]+_tables.exponentTable[t];return _tables.floatView[0]}const DataUtils={toHalfFloat:toHalfFloat,fromHalfFloat:fromHalfFloat};const _vector$9=new Vector3;const _vector2$1=new Vector2;class BufferAttribute{constructor(e,t,n=false){if(Array.isArray(e)){throw new TypeError("THREE.BufferAttribute: array should be a Typed Array.")}this.isBufferAttribute=true;this.name="";this.array=e;this.itemSize=t;this.count=e!==undefined?e.length/t:0;this.normalized=n;this.usage=StaticDrawUsage;this._updateRange={offset:0,count:-1};this.updateRanges=[];this.gpuType=FloatType;this.version=0}onUploadCallback(){}set needsUpdate(e){if(e===true)this.version++}get updateRange(){warnOnce("THREE.BufferAttribute: updateRange() is deprecated and will be removed in r169. Use addUpdateRange() instead.");return this._updateRange}setUsage(e){this.usage=e;return this}addUpdateRange(e,t){this.updateRanges.push({start:e,count:t})}clearUpdateRanges(){this.updateRanges.length=0}copy(e){this.name=e.name;this.array=new e.array.constructor(e.array);this.itemSize=e.itemSize;this.count=e.count;this.normalized=e.normalized;this.usage=e.usage;this.gpuType=e.gpuType;return this}copyAt(n,i,r){n*=this.itemSize;r*=i.itemSize;for(let e=0,t=this.itemSize;e<t;e++){this.array[n+e]=i.array[r+e]}return this}copyArray(e){this.array.set(e);return this}applyMatrix3(n){if(this.itemSize===2){for(let e=0,t=this.count;e<t;e++){_vector2$1.fromBufferAttribute(this,e);_vector2$1.applyMatrix3(n);this.setXY(e,_vector2$1.x,_vector2$1.y)}}else if(this.itemSize===3){for(let e=0,t=this.count;e<t;e++){_vector$9.fromBufferAttribute(this,e);_vector$9.applyMatrix3(n);this.setXYZ(e,_vector$9.x,_vector$9.y,_vector$9.z)}}return this}applyMatrix4(n){for(let e=0,t=this.count;e<t;e++){_vector$9.fromBufferAttribute(this,e);_vector$9.applyMatrix4(n);this.setXYZ(e,_vector$9.x,_vector$9.y,_vector$9.z)}return this}applyNormalMatrix(n){for(let e=0,t=this.count;e<t;e++){_vector$9.fromBufferAttribute(this,e);_vector$9.applyNormalMatrix(n);this.setXYZ(e,_vector$9.x,_vector$9.y,_vector$9.z)}return this}transformDirection(n){for(let e=0,t=this.count;e<t;e++){_vector$9.fromBufferAttribute(this,e);_vector$9.transformDirection(n);this.setXYZ(e,_vector$9.x,_vector$9.y,_vector$9.z)}return this}set(e,t=0){this.array.set(e,t);return this}getComponent(e,t){let n=this.array[e*this.itemSize+t];if(this.normalized)n=denormalize(n,this.array);return n}setComponent(e,t,n){if(this.normalized)n=normalize(n,this.array);this.array[e*this.itemSize+t]=n;return this}getX(e){let t=this.array[e*this.itemSize];if(this.normalized)t=denormalize(t,this.array);return t}setX(e,t){if(this.normalized)t=normalize(t,this.array);this.array[e*this.itemSize]=t;return this}getY(e){let t=this.array[e*this.itemSize+1];if(this.normalized)t=denormalize(t,this.array);return t}setY(e,t){if(this.normalized)t=normalize(t,this.array);this.array[e*this.itemSize+1]=t;return this}getZ(e){let t=this.array[e*this.itemSize+2];if(this.normalized)t=denormalize(t,this.array);return t}setZ(e,t){if(this.normalized)t=normalize(t,this.array);this.array[e*this.itemSize+2]=t;return this}getW(e){let t=this.array[e*this.itemSize+3];if(this.normalized)t=denormalize(t,this.array);return t}setW(e,t){if(this.normalized)t=normalize(t,this.array);this.array[e*this.itemSize+3]=t;return this}setXY(e,t,n){e*=this.itemSize;if(this.normalized){t=normalize(t,this.array);n=normalize(n,this.array)}this.array[e+0]=t;this.array[e+1]=n;return this}setXYZ(e,t,n,i){e*=this.itemSize;if(this.normalized){t=normalize(t,this.array);n=normalize(n,this.array);i=normalize(i,this.array)}this.array[e+0]=t;this.array[e+1]=n;this.array[e+2]=i;return this}setXYZW(e,t,n,i,r){e*=this.itemSize;if(this.normalized){t=normalize(t,this.array);n=normalize(n,this.array);i=normalize(i,this.array);r=normalize(r,this.array)}this.array[e+0]=t;this.array[e+1]=n;this.array[e+2]=i;this.array[e+3]=r;return this}onUpload(e){this.onUploadCallback=e;return this}clone(){return new this.constructor(this.array,this.itemSize).copy(this)}toJSON(){const e={itemSize:this.itemSize,type:this.array.constructor.name,array:Array.from(this.array),normalized:this.normalized};if(this.name!=="")e.name=this.name;if(this.usage!==StaticDrawUsage)e.usage=this.usage;return e}}class Int8BufferAttribute extends BufferAttribute{constructor(e,t,n){super(new Int8Array(e),t,n)}}class Uint8BufferAttribute extends BufferAttribute{constructor(e,t,n){super(new Uint8Array(e),t,n)}}class Uint8ClampedBufferAttribute extends BufferAttribute{constructor(e,t,n){super(new Uint8ClampedArray(e),t,n)}}class Int16BufferAttribute extends BufferAttribute{constructor(e,t,n){super(new Int16Array(e),t,n)}}class Uint16BufferAttribute extends BufferAttribute{constructor(e,t,n){super(new Uint16Array(e),t,n)}}class Int32BufferAttribute extends BufferAttribute{constructor(e,t,n){super(new Int32Array(e),t,n)}}class Uint32BufferAttribute extends BufferAttribute{constructor(e,t,n){super(new Uint32Array(e),t,n)}}class Float16BufferAttribute extends BufferAttribute{constructor(e,t,n){super(new Uint16Array(e),t,n);this.isFloat16BufferAttribute=true}getX(e){let t=fromHalfFloat(this.array[e*this.itemSize]);if(this.normalized)t=denormalize(t,this.array);return t}setX(e,t){if(this.normalized)t=normalize(t,this.array);this.array[e*this.itemSize]=toHalfFloat(t);return this}getY(e){let t=fromHalfFloat(this.array[e*this.itemSize+1]);if(this.normalized)t=denormalize(t,this.array);return t}setY(e,t){if(this.normalized)t=normalize(t,this.array);this.array[e*this.itemSize+1]=toHalfFloat(t);return this}getZ(e){let t=fromHalfFloat(this.array[e*this.itemSize+2]);if(this.normalized)t=denormalize(t,this.array);return t}setZ(e,t){if(this.normalized)t=normalize(t,this.array);this.array[e*this.itemSize+2]=toHalfFloat(t);return this}getW(e){let t=fromHalfFloat(this.array[e*this.itemSize+3]);if(this.normalized)t=denormalize(t,this.array);return t}setW(e,t){if(this.normalized)t=normalize(t,this.array);this.array[e*this.itemSize+3]=toHalfFloat(t);return this}setXY(e,t,n){e*=this.itemSize;if(this.normalized){t=normalize(t,this.array);n=normalize(n,this.array)}this.array[e+0]=toHalfFloat(t);this.array[e+1]=toHalfFloat(n);return this}setXYZ(e,t,n,i){e*=this.itemSize;if(this.normalized){t=normalize(t,this.array);n=normalize(n,this.array);i=normalize(i,this.array)}this.array[e+0]=toHalfFloat(t);this.array[e+1]=toHalfFloat(n);this.array[e+2]=toHalfFloat(i);return this}setXYZW(e,t,n,i,r){e*=this.itemSize;if(this.normalized){t=normalize(t,this.array);n=normalize(n,this.array);i=normalize(i,this.array);r=normalize(r,this.array)}this.array[e+0]=toHalfFloat(t);this.array[e+1]=toHalfFloat(n);this.array[e+2]=toHalfFloat(i);this.array[e+3]=toHalfFloat(r);return this}}class Float32BufferAttribute extends BufferAttribute{constructor(e,t,n){super(new Float32Array(e),t,n)}}let _id$2=0;const _m1$2=new Matrix4;const _obj=new Object3D;const _offset=new Vector3;const _box$2=new Box3;const _boxMorphTargets=new Box3;const _vector$8=new Vector3;class BufferGeometry extends EventDispatcher{constructor(){super();this.isBufferGeometry=true;Object.defineProperty(this,"id",{value:_id$2++});this.uuid=generateUUID();this.name="";this.type="BufferGeometry";this.index=null;this.attributes={};this.morphAttributes={};this.morphTargetsRelative=false;this.groups=[];this.boundingBox=null;this.boundingSphere=null;this.drawRange={start:0,count:Infinity};this.userData={}}getIndex(){return this.index}setIndex(e){if(Array.isArray(e)){this.index=new(arrayNeedsUint32(e)?Uint32BufferAttribute:Uint16BufferAttribute)(e,1)}else{this.index=e}return this}getAttribute(e){return this.attributes[e]}setAttribute(e,t){this.attributes[e]=t;return this}deleteAttribute(e){delete this.attributes[e];return this}hasAttribute(e){return this.attributes[e]!==undefined}addGroup(e,t,n=0){this.groups.push({start:e,count:t,materialIndex:n})}clearGroups(){this.groups=[]}setDrawRange(e,t){this.drawRange.start=e;this.drawRange.count=t}applyMatrix4(e){const t=this.attributes.position;if(t!==undefined){t.applyMatrix4(e);t.needsUpdate=true}const n=this.attributes.normal;if(n!==undefined){const r=(new Matrix3).getNormalMatrix(e);n.applyNormalMatrix(r);n.needsUpdate=true}const i=this.attributes.tangent;if(i!==undefined){i.transformDirection(e);i.needsUpdate=true}if(this.boundingBox!==null){this.computeBoundingBox()}if(this.boundingSphere!==null){this.computeBoundingSphere()}return this}applyQuaternion(e){_m1$2.makeRotationFromQuaternion(e);this.applyMatrix4(_m1$2);return this}rotateX(e){_m1$2.makeRotationX(e);this.applyMatrix4(_m1$2);return this}rotateY(e){_m1$2.makeRotationY(e);this.applyMatrix4(_m1$2);return this}rotateZ(e){_m1$2.makeRotationZ(e);this.applyMatrix4(_m1$2);return this}translate(e,t,n){_m1$2.makeTranslation(e,t,n);this.applyMatrix4(_m1$2);return this}scale(e,t,n){_m1$2.makeScale(e,t,n);this.applyMatrix4(_m1$2);return this}lookAt(e){_obj.lookAt(e);_obj.updateMatrix();this.applyMatrix4(_obj.matrix);return this}center(){this.computeBoundingBox();this.boundingBox.getCenter(_offset).negate();this.translate(_offset.x,_offset.y,_offset.z);return this}setFromPoints(n){const i=[];for(let e=0,t=n.length;e<t;e++){const r=n[e];i.push(r.x,r.y,r.z||0)}this.setAttribute("position",new Float32BufferAttribute(i,3));return this}computeBoundingBox(){if(this.boundingBox===null){this.boundingBox=new Box3}const e=this.attributes.position;const n=this.morphAttributes.position;if(e&&e.isGLBufferAttribute){console.error("THREE.BufferGeometry.computeBoundingBox(): GLBufferAttribute requires a manual bounding box.",this);this.boundingBox.set(new Vector3(-Infinity,-Infinity,-Infinity),new Vector3(+Infinity,+Infinity,+Infinity));return}if(e!==undefined){this.boundingBox.setFromBufferAttribute(e);if(n){for(let e=0,t=n.length;e<t;e++){const i=n[e];_box$2.setFromBufferAttribute(i);if(this.morphTargetsRelative){_vector$8.addVectors(this.boundingBox.min,_box$2.min);this.boundingBox.expandByPoint(_vector$8);_vector$8.addVectors(this.boundingBox.max,_box$2.max);this.boundingBox.expandByPoint(_vector$8)}else{this.boundingBox.expandByPoint(_box$2.min);this.boundingBox.expandByPoint(_box$2.max)}}}}else{this.boundingBox.makeEmpty()}if(isNaN(this.boundingBox.min.x)||isNaN(this.boundingBox.min.y)||isNaN(this.boundingBox.min.z)){console.error('THREE.BufferGeometry.computeBoundingBox(): Computed min/max have NaN values. The "position" attribute is likely to have NaN values.',this)}}computeBoundingSphere(){if(this.boundingSphere===null){this.boundingSphere=new Sphere}const i=this.attributes.position;const r=this.morphAttributes.position;if(i&&i.isGLBufferAttribute){console.error("THREE.BufferGeometry.computeBoundingSphere(): GLBufferAttribute requires a manual bounding sphere.",this);this.boundingSphere.set(new Vector3,Infinity);return}if(i){const s=this.boundingSphere.center;_box$2.setFromBufferAttribute(i);if(r){for(let e=0,t=r.length;e<t;e++){const a=r[e];_boxMorphTargets.setFromBufferAttribute(a);if(this.morphTargetsRelative){_vector$8.addVectors(_box$2.min,_boxMorphTargets.min);_box$2.expandByPoint(_vector$8);_vector$8.addVectors(_box$2.max,_boxMorphTargets.max);_box$2.expandByPoint(_vector$8)}else{_box$2.expandByPoint(_boxMorphTargets.min);_box$2.expandByPoint(_boxMorphTargets.max)}}}_box$2.getCenter(s);let n=0;for(let e=0,t=i.count;e<t;e++){_vector$8.fromBufferAttribute(i,e);n=Math.max(n,s.distanceToSquared(_vector$8))}if(r){for(let e=0,t=r.length;e<t;e++){const a=r[e];const o=this.morphTargetsRelative;for(let e=0,t=a.count;e<t;e++){_vector$8.fromBufferAttribute(a,e);if(o){_offset.fromBufferAttribute(i,e);_vector$8.add(_offset)}n=Math.max(n,s.distanceToSquared(_vector$8))}}}this.boundingSphere.radius=Math.sqrt(n);if(isNaN(this.boundingSphere.radius)){console.error('THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.',this)}}}computeTangents(){const n=this.index;const e=this.attributes;if(n===null||e.position===undefined||e.normal===undefined||e.uv===undefined){console.error("THREE.BufferGeometry: .computeTangents() failed. Missing required attributes (index, position, normal or uv)");return}const r=e.position;const s=e.normal;const a=e.uv;if(this.hasAttribute("tangent")===false){this.setAttribute("tangent",new BufferAttribute(new Float32Array(4*r.count),4))}const o=this.getAttribute("tangent");const l=[],c=[];for(let e=0;e<r.count;e++){l[e]=new Vector3;c[e]=new Vector3}const u=new Vector3,h=new Vector3,d=new Vector3,f=new Vector2,p=new Vector2,m=new Vector2,g=new Vector3,_=new Vector3;function i(e,t,n){u.fromBufferAttribute(r,e);h.fromBufferAttribute(r,t);d.fromBufferAttribute(r,n);f.fromBufferAttribute(a,e);p.fromBufferAttribute(a,t);m.fromBufferAttribute(a,n);h.sub(u);d.sub(u);p.sub(f);m.sub(f);const i=1/(p.x*m.y-m.x*p.y);if(!isFinite(i))return;g.copy(h).multiplyScalar(m.y).addScaledVector(d,-p.y).multiplyScalar(i);_.copy(d).multiplyScalar(p.x).addScaledVector(h,-m.x).multiplyScalar(i);l[e].add(g);l[t].add(g);l[n].add(g);c[e].add(_);c[t].add(_);c[n].add(_)}let v=this.groups;if(v.length===0){v=[{start:0,count:n.count}]}for(let e=0,t=v.length;e<t;++e){const T=v[e];const A=T.start;const E=T.count;for(let e=A,t=A+E;e<t;e+=3){i(n.getX(e+0),n.getX(e+1),n.getX(e+2))}}const y=new Vector3,x=new Vector3;const M=new Vector3,S=new Vector3;function b(e){M.fromBufferAttribute(s,e);S.copy(M);const t=l[e];y.copy(t);y.sub(M.multiplyScalar(M.dot(t))).normalize();x.crossVectors(S,t);const n=x.dot(c[e]);const i=n<0?-1:1;o.setXYZW(e,y.x,y.y,y.z,i)}for(let e=0,t=v.length;e<t;++e){const T=v[e];const A=T.start;const E=T.count;for(let e=A,t=A+E;e<t;e+=3){b(n.getX(e+0));b(n.getX(e+1));b(n.getX(e+2))}}}computeVertexNormals(){const i=this.index;const r=this.getAttribute("position");if(r!==undefined){let n=this.getAttribute("normal");if(n===undefined){n=new BufferAttribute(new Float32Array(r.count*3),3);this.setAttribute("normal",n)}else{for(let e=0,t=n.count;e<t;e++){n.setXYZ(e,0,0,0)}}const s=new Vector3,a=new Vector3,o=new Vector3;const l=new Vector3,c=new Vector3,u=new Vector3;const h=new Vector3,d=new Vector3;if(i){for(let e=0,t=i.count;e<t;e+=3){const f=i.getX(e+0);const p=i.getX(e+1);const m=i.getX(e+2);s.fromBufferAttribute(r,f);a.fromBufferAttribute(r,p);o.fromBufferAttribute(r,m);h.subVectors(o,a);d.subVectors(s,a);h.cross(d);l.fromBufferAttribute(n,f);c.fromBufferAttribute(n,p);u.fromBufferAttribute(n,m);l.add(h);c.add(h);u.add(h);n.setXYZ(f,l.x,l.y,l.z);n.setXYZ(p,c.x,c.y,c.z);n.setXYZ(m,u.x,u.y,u.z)}}else{for(let e=0,t=r.count;e<t;e+=3){s.fromBufferAttribute(r,e+0);a.fromBufferAttribute(r,e+1);o.fromBufferAttribute(r,e+2);h.subVectors(o,a);d.subVectors(s,a);h.cross(d);n.setXYZ(e+0,h.x,h.y,h.z);n.setXYZ(e+1,h.x,h.y,h.z);n.setXYZ(e+2,h.x,h.y,h.z)}}this.normalizeNormals();n.needsUpdate=true}}normalizeNormals(){const n=this.attributes.normal;for(let e=0,t=n.count;e<t;e++){_vector$8.fromBufferAttribute(n,e);_vector$8.normalize();n.setXYZ(e,_vector$8.x,_vector$8.y,_vector$8.z)}}toNonIndexed(){function n(n,i){const r=n.array;const s=n.itemSize;const e=n.normalized;const a=new r.constructor(i.length*s);let o=0,l=0;for(let e=0,t=i.length;e<t;e++){if(n.isInterleavedBufferAttribute){o=i[e]*n.data.stride+n.offset}else{o=i[e]*s}for(let e=0;e<s;e++){a[l++]=r[o++]}}return new BufferAttribute(a,s,e)}if(this.index===null){console.warn("THREE.BufferGeometry.toNonIndexed(): BufferGeometry is already non-indexed.");return this}const i=new BufferGeometry;const r=this.index.array;const e=this.attributes;for(const a in e){const o=e[a];const l=n(o,r);i.setAttribute(a,l)}const t=this.morphAttributes;for(const a in t){const c=[];const u=t[a];for(let e=0,t=u.length;e<t;e++){const o=u[e];const l=n(o,r);c.push(l)}i.morphAttributes[a]=c}i.morphTargetsRelative=this.morphTargetsRelative;const s=this.groups;for(let e=0,t=s.length;e<t;e++){const h=s[e];i.addGroup(h.start,h.count,h.materialIndex)}return i}toJSON(){const n={metadata:{version:4.6,type:"BufferGeometry",generator:"BufferGeometry.toJSON"}};n.uuid=this.uuid;n.type=this.type;if(this.name!=="")n.name=this.name;if(Object.keys(this.userData).length>0)n.userData=this.userData;if(this.parameters!==undefined){const o=this.parameters;for(const l in o){if(o[l]!==undefined)n[l]=o[l]}return n}n.data={attributes:{}};const e=this.index;if(e!==null){n.data.index={type:e.array.constructor.name,array:Array.prototype.slice.call(e.array)}}const t=this.attributes;for(const l in t){const c=t[l];n.data.attributes[l]=c.toJSON(n.data)}const i={};let r=false;for(const l in this.morphAttributes){const u=this.morphAttributes[l];const h=[];for(let e=0,t=u.length;e<t;e++){const c=u[e];h.push(c.toJSON(n.data))}if(h.length>0){i[l]=h;r=true}}if(r){n.data.morphAttributes=i;n.data.morphTargetsRelative=this.morphTargetsRelative}const s=this.groups;if(s.length>0){n.data.groups=JSON.parse(JSON.stringify(s))}const a=this.boundingSphere;if(a!==null){n.data.boundingSphere={center:a.center.toArray(),radius:a.radius}}return n}clone(){return(new this.constructor).copy(this)}copy(e){this.index=null;this.attributes={};this.morphAttributes={};this.groups=[];this.boundingBox=null;this.boundingSphere=null;const n={};this.name=e.name;const t=e.index;if(t!==null){this.setIndex(t.clone(n))}const i=e.attributes;for(const l in i){const c=i[l];this.setAttribute(l,c.clone(n))}const r=e.morphAttributes;for(const l in r){const u=[];const h=r[l];for(let e=0,t=h.length;e<t;e++){u.push(h[e].clone(n))}this.morphAttributes[l]=u}this.morphTargetsRelative=e.morphTargetsRelative;const s=e.groups;for(let e=0,t=s.length;e<t;e++){const d=s[e];this.addGroup(d.start,d.count,d.materialIndex)}const a=e.boundingBox;if(a!==null){this.boundingBox=a.clone()}const o=e.boundingSphere;if(o!==null){this.boundingSphere=o.clone()}this.drawRange.start=e.drawRange.start;this.drawRange.count=e.drawRange.count;this.userData=e.userData;return this}dispose(){this.dispatchEvent({type:"dispose"})}}const _inverseMatrix$3=new Matrix4;const _ray$3=new Ray;const _sphere$6=new Sphere;const _sphereHitAt=new Vector3;const _vA$1=new Vector3;const _vB$1=new Vector3;const _vC$1=new Vector3;const _tempA=new Vector3;const _morphA=new Vector3;const _uvA$1=new Vector2;const _uvB$1=new Vector2;const _uvC$1=new Vector2;const _normalA=new Vector3;const _normalB=new Vector3;const _normalC=new Vector3;const _intersectionPoint=new Vector3;const _intersectionPointWorld=new Vector3;class Mesh extends Object3D{constructor(e=new BufferGeometry,t=new MeshBasicMaterial){super();this.isMesh=true;this.type="Mesh";this.geometry=e;this.material=t;this.updateMorphTargets()}copy(e,t){super.copy(e,t);if(e.morphTargetInfluences!==undefined){this.morphTargetInfluences=e.morphTargetInfluences.slice()}if(e.morphTargetDictionary!==undefined){this.morphTargetDictionary=Object.assign({},e.morphTargetDictionary)}this.material=Array.isArray(e.material)?e.material.slice():e.material;this.geometry=e.geometry;return this}updateMorphTargets(){const e=this.geometry;const t=e.morphAttributes;const n=Object.keys(t);if(n.length>0){const i=t[n[0]];if(i!==undefined){this.morphTargetInfluences=[];this.morphTargetDictionary={};for(let e=0,t=i.length;e<t;e++){const r=i[e].name||String(e);this.morphTargetInfluences.push(0);this.morphTargetDictionary[r]=e}}}}getVertexPosition(n,i){const e=this.geometry;const t=e.attributes.position;const r=e.morphAttributes.position;const s=e.morphTargetsRelative;i.fromBufferAttribute(t,n);const a=this.morphTargetInfluences;if(r&&a){_morphA.set(0,0,0);for(let e=0,t=r.length;e<t;e++){const o=a[e];const l=r[e];if(o===0)continue;_tempA.fromBufferAttribute(l,n);if(s){_morphA.addScaledVector(_tempA,o)}else{_morphA.addScaledVector(_tempA.sub(i),o)}}i.add(_morphA)}return i}raycast(e,t){const n=this.geometry;const i=this.material;const r=this.matrixWorld;if(i===undefined)return;if(n.boundingSphere===null)n.computeBoundingSphere();_sphere$6.copy(n.boundingSphere);_sphere$6.applyMatrix4(r);_ray$3.copy(e.ray).recast(e.near);if(_sphere$6.containsPoint(_ray$3.origin)===false){if(_ray$3.intersectSphere(_sphere$6,_sphereHitAt)===null)return;if(_ray$3.origin.distanceToSquared(_sphereHitAt)>(e.far-e.near)**2)return}_inverseMatrix$3.copy(r).invert();_ray$3.copy(e.ray).applyMatrix4(_inverseMatrix$3);if(n.boundingBox!==null){if(_ray$3.intersectsBox(n.boundingBox)===false)return}this._computeIntersections(e,t,_ray$3)}_computeIntersections(n,i,r){let s;const e=this.geometry;const a=this.material;const o=e.index;const l=e.attributes.position;const c=e.attributes.uv;const u=e.attributes.uv1;const h=e.attributes.normal;const d=e.groups;const f=e.drawRange;if(o!==null){if(Array.isArray(a)){for(let e=0,t=d.length;e<t;e++){const p=d[e];const m=a[p.materialIndex];const g=Math.max(p.start,f.start);const _=Math.min(o.count,Math.min(p.start+p.count,f.start+f.count));for(let e=g,t=_;e<t;e+=3){const v=o.getX(e);const y=o.getX(e+1);const x=o.getX(e+2);s=checkGeometryIntersection(this,m,n,r,c,u,h,v,y,x);if(s){s.faceIndex=Math.floor(e/3);s.face.materialIndex=p.materialIndex;i.push(s)}}}}else{const g=Math.max(0,f.start);const _=Math.min(o.count,f.start+f.count);for(let e=g,t=_;e<t;e+=3){const v=o.getX(e);const y=o.getX(e+1);const x=o.getX(e+2);s=checkGeometryIntersection(this,a,n,r,c,u,h,v,y,x);if(s){s.faceIndex=Math.floor(e/3);i.push(s)}}}}else if(l!==undefined){if(Array.isArray(a)){for(let e=0,t=d.length;e<t;e++){const p=d[e];const m=a[p.materialIndex];const g=Math.max(p.start,f.start);const _=Math.min(l.count,Math.min(p.start+p.count,f.start+f.count));for(let e=g,t=_;e<t;e+=3){const v=e;const y=e+1;const x=e+2;s=checkGeometryIntersection(this,m,n,r,c,u,h,v,y,x);if(s){s.faceIndex=Math.floor(e/3);s.face.materialIndex=p.materialIndex;i.push(s)}}}}else{const g=Math.max(0,f.start);const _=Math.min(l.count,f.start+f.count);for(let e=g,t=_;e<t;e+=3){const v=e;const y=e+1;const x=e+2;s=checkGeometryIntersection(this,a,n,r,c,u,h,v,y,x);if(s){s.faceIndex=Math.floor(e/3);i.push(s)}}}}}}function checkIntersection$1(e,t,n,i,r,s,a,o){let l;if(t.side===BackSide){l=i.intersectTriangle(a,s,r,true,o)}else{l=i.intersectTriangle(r,s,a,t.side===FrontSide,o)}if(l===null)return null;_intersectionPointWorld.copy(o);_intersectionPointWorld.applyMatrix4(e.matrixWorld);const c=n.ray.origin.distanceTo(_intersectionPointWorld);if(c<n.near||c>n.far)return null;return{distance:c,point:_intersectionPointWorld.clone(),object:e}}function checkGeometryIntersection(e,t,n,i,r,s,a,o,l,c){e.getVertexPosition(o,_vA$1);e.getVertexPosition(l,_vB$1);e.getVertexPosition(c,_vC$1);const u=checkIntersection$1(e,t,n,i,_vA$1,_vB$1,_vC$1,_intersectionPoint);if(u){if(r){_uvA$1.fromBufferAttribute(r,o);_uvB$1.fromBufferAttribute(r,l);_uvC$1.fromBufferAttribute(r,c);u.uv=Triangle.getInterpolation(_intersectionPoint,_vA$1,_vB$1,_vC$1,_uvA$1,_uvB$1,_uvC$1,new Vector2)}if(s){_uvA$1.fromBufferAttribute(s,o);_uvB$1.fromBufferAttribute(s,l);_uvC$1.fromBufferAttribute(s,c);u.uv1=Triangle.getInterpolation(_intersectionPoint,_vA$1,_vB$1,_vC$1,_uvA$1,_uvB$1,_uvC$1,new Vector2)}if(a){_normalA.fromBufferAttribute(a,o);_normalB.fromBufferAttribute(a,l);_normalC.fromBufferAttribute(a,c);u.normal=Triangle.getInterpolation(_intersectionPoint,_vA$1,_vB$1,_vC$1,_normalA,_normalB,_normalC,new Vector3);if(u.normal.dot(i.direction)>0){u.normal.multiplyScalar(-1)}}const h={a:o,b:l,c:c,normal:new Vector3,materialIndex:0};Triangle.getNormal(_vA$1,_vB$1,_vC$1,h.normal);u.face=h}return u}class BoxGeometry extends BufferGeometry{constructor(e=1,t=1,n=1,i=1,r=1,s=1){super();this.type="BoxGeometry";this.parameters={width:e,height:t,depth:n,widthSegments:i,heightSegments:r,depthSegments:s};const w=this;i=Math.floor(i);r=Math.floor(r);s=Math.floor(s);const C=[];const R=[];const L=[];const P=[];let I=0;let U=0;a("z","y","x",-1,-1,n,t,e,s,r,0);a("z","y","x",1,-1,n,t,-e,s,r,1);a("x","z","y",1,1,e,n,t,i,s,2);a("x","z","y",1,-1,e,n,-t,i,s,3);a("x","y","z",1,-1,e,t,n,i,r,4);a("x","y","z",-1,-1,e,t,-n,i,r,5);this.setIndex(C);this.setAttribute("position",new Float32BufferAttribute(R,3));this.setAttribute("normal",new Float32BufferAttribute(L,3));this.setAttribute("uv",new Float32BufferAttribute(P,2));function a(n,i,r,s,a,e,t,o,l,c,u){const h=e/l;const d=t/c;const f=e/2;const p=t/2;const m=o/2;const g=l+1;const _=c+1;let v=0;let y=0;const x=new Vector3;for(let t=0;t<_;t++){const M=t*d-p;for(let e=0;e<g;e++){const S=e*h-f;x[n]=S*s;x[i]=M*a;x[r]=m;R.push(x.x,x.y,x.z);x[n]=0;x[i]=0;x[r]=o>0?1:-1;L.push(x.x,x.y,x.z);P.push(e/l);P.push(1-t/c);v+=1}}for(let t=0;t<c;t++){for(let e=0;e<l;e++){const b=I+e+g*t;const T=I+e+g*(t+1);const A=I+(e+1)+g*(t+1);const E=I+(e+1)+g*t;C.push(b,T,E);C.push(T,A,E);y+=6}}w.addGroup(U,y,u);U+=y;I+=v}}copy(e){super.copy(e);this.parameters=Object.assign({},e.parameters);return this}static fromJSON(e){return new BoxGeometry(e.width,e.height,e.depth,e.widthSegments,e.heightSegments,e.depthSegments)}}function cloneUniforms(e){const t={};for(const n in e){t[n]={};for(const i in e[n]){const r=e[n][i];if(r&&(r.isColor||r.isMatrix3||r.isMatrix4||r.isVector2||r.isVector3||r.isVector4||r.isTexture||r.isQuaternion)){if(r.isRenderTargetTexture){console.warn("UniformsUtils: Textures of render targets cannot be cloned via cloneUniforms() or mergeUniforms().");t[n][i]=null}else{t[n][i]=r.clone()}}else if(Array.isArray(r)){t[n][i]=r.slice()}else{t[n][i]=r}}}return t}function mergeUniforms(n){const i={};for(let t=0;t<n.length;t++){const e=cloneUniforms(n[t]);for(const r in e){i[r]=e[r]}}return i}function cloneUniformsGroups(t){const n=[];for(let e=0;e<t.length;e++){n.push(t[e].clone())}return n}function getUnlitUniformColorSpace(e){const t=e.getRenderTarget();if(t===null){return e.outputColorSpace}if(t.isXRRenderTarget===true){return t.texture.colorSpace}return ColorManagement.workingColorSpace}const UniformsUtils={clone:cloneUniforms,merge:mergeUniforms};var default_vertex="void main() {\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}";var default_fragment="void main() {\n\tgl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\n}";class ShaderMaterial extends Material{constructor(e){super();this.isShaderMaterial=true;this.type="ShaderMaterial";this.defines={};this.uniforms={};this.uniformsGroups=[];this.vertexShader=default_vertex;this.fragmentShader=default_fragment;this.linewidth=1;this.wireframe=false;this.wireframeLinewidth=1;this.fog=false;this.lights=false;this.clipping=false;this.forceSinglePass=true;this.extensions={clipCullDistance:false,multiDraw:false};this.defaultAttributeValues={color:[1,1,1],uv:[0,0],uv1:[0,0]};this.index0AttributeName=undefined;this.uniformsNeedUpdate=false;this.glslVersion=null;if(e!==undefined){this.setValues(e)}}copy(e){super.copy(e);this.fragmentShader=e.fragmentShader;this.vertexShader=e.vertexShader;this.uniforms=cloneUniforms(e.uniforms);this.uniformsGroups=cloneUniformsGroups(e.uniformsGroups);this.defines=Object.assign({},e.defines);this.wireframe=e.wireframe;this.wireframeLinewidth=e.wireframeLinewidth;this.fog=e.fog;this.lights=e.lights;this.clipping=e.clipping;this.extensions=Object.assign({},e.extensions);this.glslVersion=e.glslVersion;return this}toJSON(e){const t=super.toJSON(e);t.glslVersion=this.glslVersion;t.uniforms={};for(const i in this.uniforms){const r=this.uniforms[i];const s=r.value;if(s&&s.isTexture){t.uniforms[i]={type:"t",value:s.toJSON(e).uuid}}else if(s&&s.isColor){t.uniforms[i]={type:"c",value:s.getHex()}}else if(s&&s.isVector2){t.uniforms[i]={type:"v2",value:s.toArray()}}else if(s&&s.isVector3){t.uniforms[i]={type:"v3",value:s.toArray()}}else if(s&&s.isVector4){t.uniforms[i]={type:"v4",value:s.toArray()}}else if(s&&s.isMatrix3){t.uniforms[i]={type:"m3",value:s.toArray()}}else if(s&&s.isMatrix4){t.uniforms[i]={type:"m4",value:s.toArray()}}else{t.uniforms[i]={value:s}}}if(Object.keys(this.defines).length>0)t.defines=this.defines;t.vertexShader=this.vertexShader;t.fragmentShader=this.fragmentShader;t.lights=this.lights;t.clipping=this.clipping;const n={};for(const a in this.extensions){if(this.extensions[a]===true)n[a]=true}if(Object.keys(n).length>0)t.extensions=n;return t}}class Camera extends Object3D{constructor(){super();this.isCamera=true;this.type="Camera";this.matrixWorldInverse=new Matrix4;this.projectionMatrix=new Matrix4;this.projectionMatrixInverse=new Matrix4;this.coordinateSystem=WebGLCoordinateSystem}copy(e,t){super.copy(e,t);this.matrixWorldInverse.copy(e.matrixWorldInverse);this.projectionMatrix.copy(e.projectionMatrix);this.projectionMatrixInverse.copy(e.projectionMatrixInverse);this.coordinateSystem=e.coordinateSystem;return this}getWorldDirection(e){return super.getWorldDirection(e).negate()}updateMatrixWorld(e){super.updateMatrixWorld(e);this.matrixWorldInverse.copy(this.matrixWorld).invert()}updateWorldMatrix(e,t){super.updateWorldMatrix(e,t);this.matrixWorldInverse.copy(this.matrixWorld).invert()}clone(){return(new this.constructor).copy(this)}}const _v3$1=new Vector3;const _minTarget=new Vector2;const _maxTarget=new Vector2;class PerspectiveCamera extends Camera{constructor(e=50,t=1,n=.1,i=2e3){super();this.isPerspectiveCamera=true;this.type="PerspectiveCamera";this.fov=e;this.zoom=1;this.near=n;this.far=i;this.focus=10;this.aspect=t;this.view=null;this.filmGauge=35;this.filmOffset=0;this.updateProjectionMatrix()}copy(e,t){super.copy(e,t);this.fov=e.fov;this.zoom=e.zoom;this.near=e.near;this.far=e.far;this.focus=e.focus;this.aspect=e.aspect;this.view=e.view===null?null:Object.assign({},e.view);this.filmGauge=e.filmGauge;this.filmOffset=e.filmOffset;return this}setFocalLength(e){const t=.5*this.getFilmHeight()/e;this.fov=RAD2DEG*2*Math.atan(t);this.updateProjectionMatrix()}getFocalLength(){const e=Math.tan(DEG2RAD*.5*this.fov);return.5*this.getFilmHeight()/e}getEffectiveFOV(){return RAD2DEG*2*Math.atan(Math.tan(DEG2RAD*.5*this.fov)/this.zoom)}getFilmWidth(){return this.filmGauge*Math.min(this.aspect,1)}getFilmHeight(){return this.filmGauge/Math.max(this.aspect,1)}getViewBounds(e,t,n){_v3$1.set(-1,-1,.5).applyMatrix4(this.projectionMatrixInverse);t.set(_v3$1.x,_v3$1.y).multiplyScalar(-e/_v3$1.z);_v3$1.set(1,1,.5).applyMatrix4(this.projectionMatrixInverse);n.set(_v3$1.x,_v3$1.y).multiplyScalar(-e/_v3$1.z)}getViewSize(e,t){this.getViewBounds(e,_minTarget,_maxTarget);return t.subVectors(_maxTarget,_minTarget)}setViewOffset(e,t,n,i,r,s){this.aspect=e/t;if(this.view===null){this.view={enabled:true,fullWidth:1,fullHeight:1,offsetX:0,offsetY:0,width:1,height:1}}this.view.enabled=true;this.view.fullWidth=e;this.view.fullHeight=t;this.view.offsetX=n;this.view.offsetY=i;this.view.width=r;this.view.height=s;this.updateProjectionMatrix()}clearViewOffset(){if(this.view!==null){this.view.enabled=false}this.updateProjectionMatrix()}updateProjectionMatrix(){const e=this.near;let t=e*Math.tan(DEG2RAD*.5*this.fov)/this.zoom;let n=2*t;let i=this.aspect*n;let r=-.5*i;const s=this.view;if(this.view!==null&&this.view.enabled){const o=s.fullWidth,l=s.fullHeight;r+=s.offsetX*i/o;t-=s.offsetY*n/l;i*=s.width/o;n*=s.height/l}const a=this.filmOffset;if(a!==0)r+=e*a/this.getFilmWidth();this.projectionMatrix.makePerspective(r,r+i,t,t-n,e,this.far,this.coordinateSystem);this.projectionMatrixInverse.copy(this.projectionMatrix).invert()}toJSON(e){const t=super.toJSON(e);t.object.fov=this.fov;t.object.zoom=this.zoom;t.object.near=this.near;t.object.far=this.far;t.object.focus=this.focus;t.object.aspect=this.aspect;if(this.view!==null)t.object.view=Object.assign({},this.view);t.object.filmGauge=this.filmGauge;t.object.filmOffset=this.filmOffset;return t}}const fov=-90;const aspect=1;class CubeCamera extends Object3D{constructor(e,t,n){super();this.type="CubeCamera";this.renderTarget=n;this.coordinateSystem=null;this.activeMipmapLevel=0;const i=new PerspectiveCamera(fov,aspect,e,t);i.layers=this.layers;this.add(i);const r=new PerspectiveCamera(fov,aspect,e,t);r.layers=this.layers;this.add(r);const s=new PerspectiveCamera(fov,aspect,e,t);s.layers=this.layers;this.add(s);const a=new PerspectiveCamera(fov,aspect,e,t);a.layers=this.layers;this.add(a);const o=new PerspectiveCamera(fov,aspect,e,t);o.layers=this.layers;this.add(o);const l=new PerspectiveCamera(fov,aspect,e,t);l.layers=this.layers;this.add(l)}updateCoordinateSystem(){const e=this.coordinateSystem;const t=this.children.concat();const[n,i,r,s,a,o]=t;for(const l of t)this.remove(l);if(e===WebGLCoordinateSystem){n.up.set(0,1,0);n.lookAt(1,0,0);i.up.set(0,1,0);i.lookAt(-1,0,0);r.up.set(0,0,-1);r.lookAt(0,1,0);s.up.set(0,0,1);s.lookAt(0,-1,0);a.up.set(0,1,0);a.lookAt(0,0,1);o.up.set(0,1,0);o.lookAt(0,0,-1)}else if(e===WebGPUCoordinateSystem){n.up.set(0,-1,0);n.lookAt(-1,0,0);i.up.set(0,-1,0);i.lookAt(1,0,0);r.up.set(0,0,1);r.lookAt(0,1,0);s.up.set(0,0,-1);s.lookAt(0,-1,0);a.up.set(0,-1,0);a.lookAt(0,0,1);o.up.set(0,-1,0);o.lookAt(0,0,-1)}else{throw new Error("THREE.CubeCamera.updateCoordinateSystem(): Invalid coordinate system: "+e)}for(const l of t){this.add(l);l.updateMatrixWorld()}}update(e,t){if(this.parent===null)this.updateMatrixWorld();const{renderTarget:n,activeMipmapLevel:i}=this;if(this.coordinateSystem!==e.coordinateSystem){this.coordinateSystem=e.coordinateSystem;this.updateCoordinateSystem()}const[r,s,a,o,l,c]=this.children;const u=e.getRenderTarget();const h=e.getActiveCubeFace();const d=e.getActiveMipmapLevel();const f=e.xr.enabled;e.xr.enabled=false;const p=n.texture.generateMipmaps;n.texture.generateMipmaps=false;e.setRenderTarget(n,0,i);e.render(t,r);e.setRenderTarget(n,1,i);e.render(t,s);e.setRenderTarget(n,2,i);e.render(t,a);e.setRenderTarget(n,3,i);e.render(t,o);e.setRenderTarget(n,4,i);e.render(t,l);n.texture.generateMipmaps=p;e.setRenderTarget(n,5,i);e.render(t,c);e.setRenderTarget(u,h,d);e.xr.enabled=f;n.texture.needsPMREMUpdate=true}}class CubeTexture extends Texture{constructor(e,t,n,i,r,s,a,o,l,c){e=e!==undefined?e:[];t=t!==undefined?t:CubeReflectionMapping;super(e,t,n,i,r,s,a,o,l,c);this.isCubeTexture=true;this.flipY=false}get images(){return this.image}set images(e){this.image=e}}class WebGLCubeRenderTarget extends WebGLRenderTarget{constructor(e=1,t={}){super(e,e,t);this.isWebGLCubeRenderTarget=true;const n={width:e,height:e,depth:1};const i=[n,n,n,n,n,n];this.texture=new CubeTexture(i,t.mapping,t.wrapS,t.wrapT,t.magFilter,t.minFilter,t.format,t.type,t.anisotropy,t.colorSpace);this.texture.isRenderTargetTexture=true;this.texture.generateMipmaps=t.generateMipmaps!==undefined?t.generateMipmaps:false;this.texture.minFilter=t.minFilter!==undefined?t.minFilter:LinearFilter}fromEquirectangularTexture(e,t){this.texture.type=t.type;this.texture.colorSpace=t.colorSpace;this.texture.generateMipmaps=t.generateMipmaps;this.texture.minFilter=t.minFilter;this.texture.magFilter=t.magFilter;const n={uniforms:{tEquirect:{value:null}},vertexShader:`

				varying vec3 vWorldDirection;

				vec3 transformDirection( in vec3 dir, in mat4 matrix ) {

					return normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );

				}

				void main() {

					vWorldDirection = transformDirection( position, modelMatrix );

					#include <begin_vertex>
					#include <project_vertex>

				}
			`,fragmentShader:`

				uniform sampler2D tEquirect;

				varying vec3 vWorldDirection;

				#include <common>

				void main() {

					vec3 direction = normalize( vWorldDirection );

					vec2 sampleUV = equirectUv( direction );

					gl_FragColor = texture2D( tEquirect, sampleUV );

				}
			`};const i=new BoxGeometry(5,5,5);const r=new ShaderMaterial({name:"CubemapFromEquirect",uniforms:cloneUniforms(n.uniforms),vertexShader:n.vertexShader,fragmentShader:n.fragmentShader,side:BackSide,blending:NoBlending});r.uniforms.tEquirect.value=t;const s=new Mesh(i,r);const a=t.minFilter;if(t.minFilter===LinearMipmapLinearFilter)t.minFilter=LinearFilter;const o=new CubeCamera(1,10,this);o.update(e,s);t.minFilter=a;s.geometry.dispose();s.material.dispose();return this}clear(t,n,i,r){const e=t.getRenderTarget();for(let e=0;e<6;e++){t.setRenderTarget(this,e);t.clear(n,i,r)}t.setRenderTarget(e)}}const _vector1=new Vector3;const _vector2=new Vector3;const _normalMatrix=new Matrix3;class Plane{constructor(e=new Vector3(1,0,0),t=0){this.isPlane=true;this.normal=e;this.constant=t}set(e,t){this.normal.copy(e);this.constant=t;return this}setComponents(e,t,n,i){this.normal.set(e,t,n);this.constant=i;return this}setFromNormalAndCoplanarPoint(e,t){this.normal.copy(e);this.constant=-t.dot(this.normal);return this}setFromCoplanarPoints(e,t,n){const i=_vector1.subVectors(n,t).cross(_vector2.subVectors(e,t)).normalize();this.setFromNormalAndCoplanarPoint(i,e);return this}copy(e){this.normal.copy(e.normal);this.constant=e.constant;return this}normalize(){const e=1/this.normal.length();this.normal.multiplyScalar(e);this.constant*=e;return this}negate(){this.constant*=-1;this.normal.negate();return this}distanceToPoint(e){return this.normal.dot(e)+this.constant}distanceToSphere(e){return this.distanceToPoint(e.center)-e.radius}projectPoint(e,t){return t.copy(e).addScaledVector(this.normal,-this.distanceToPoint(e))}intersectLine(e,t){const n=e.delta(_vector1);const i=this.normal.dot(n);if(i===0){if(this.distanceToPoint(e.start)===0){return t.copy(e.start)}return null}const r=-(e.start.dot(this.normal)+this.constant)/i;if(r<0||r>1){return null}return t.copy(e.start).addScaledVector(n,r)}intersectsLine(e){const t=this.distanceToPoint(e.start);const n=this.distanceToPoint(e.end);return t<0&&n>0||n<0&&t>0}intersectsBox(e){return e.intersectsPlane(this)}intersectsSphere(e){return e.intersectsPlane(this)}coplanarPoint(e){return e.copy(this.normal).multiplyScalar(-this.constant)}applyMatrix4(e,t){const n=t||_normalMatrix.getNormalMatrix(e);const i=this.coplanarPoint(_vector1).applyMatrix4(e);const r=this.normal.applyMatrix3(n).normalize();this.constant=-i.dot(r);return this}translate(e){this.constant-=e.dot(this.normal);return this}equals(e){return e.normal.equals(this.normal)&&e.constant===this.constant}clone(){return(new this.constructor).copy(this)}}const _sphere$5=new Sphere;const _vector$7=new Vector3;class Frustum{constructor(e=new Plane,t=new Plane,n=new Plane,i=new Plane,r=new Plane,s=new Plane){this.planes=[e,t,n,i,r,s]}set(e,t,n,i,r,s){const a=this.planes;a[0].copy(e);a[1].copy(t);a[2].copy(n);a[3].copy(i);a[4].copy(r);a[5].copy(s);return this}copy(t){const n=this.planes;for(let e=0;e<6;e++){n[e].copy(t.planes[e])}return this}setFromProjectionMatrix(e,t=WebGLCoordinateSystem){const n=this.planes;const i=e.elements;const r=i[0],s=i[1],a=i[2],o=i[3];const l=i[4],c=i[5],u=i[6],h=i[7];const d=i[8],f=i[9],p=i[10],m=i[11];const g=i[12],_=i[13],v=i[14],y=i[15];n[0].setComponents(o-r,h-l,m-d,y-g).normalize();n[1].setComponents(o+r,h+l,m+d,y+g).normalize();n[2].setComponents(o+s,h+c,m+f,y+_).normalize();n[3].setComponents(o-s,h-c,m-f,y-_).normalize();n[4].setComponents(o-a,h-u,m-p,y-v).normalize();if(t===WebGLCoordinateSystem){n[5].setComponents(o+a,h+u,m+p,y+v).normalize()}else if(t===WebGPUCoordinateSystem){n[5].setComponents(a,u,p,v).normalize()}else{throw new Error("THREE.Frustum.setFromProjectionMatrix(): Invalid coordinate system: "+t)}return this}intersectsObject(e){if(e.boundingSphere!==undefined){if(e.boundingSphere===null)e.computeBoundingSphere();_sphere$5.copy(e.boundingSphere).applyMatrix4(e.matrixWorld)}else{const t=e.geometry;if(t.boundingSphere===null)t.computeBoundingSphere();_sphere$5.copy(t.boundingSphere).applyMatrix4(e.matrixWorld)}return this.intersectsSphere(_sphere$5)}intersectsSprite(e){_sphere$5.center.set(0,0,0);_sphere$5.radius=.7071067811865476;_sphere$5.applyMatrix4(e.matrixWorld);return this.intersectsSphere(_sphere$5)}intersectsSphere(e){const t=this.planes;const n=e.center;const i=-e.radius;for(let e=0;e<6;e++){const r=t[e].distanceToPoint(n);if(r<i){return false}}return true}intersectsBox(t){const n=this.planes;for(let e=0;e<6;e++){const i=n[e];_vector$7.x=i.normal.x>0?t.max.x:t.min.x;_vector$7.y=i.normal.y>0?t.max.y:t.min.y;_vector$7.z=i.normal.z>0?t.max.z:t.min.z;if(i.distanceToPoint(_vector$7)<0){return false}}return true}containsPoint(t){const n=this.planes;for(let e=0;e<6;e++){if(n[e].distanceToPoint(t)<0){return false}}return true}clone(){return(new this.constructor).copy(this)}}function WebGLAnimation(){let n=null;let e=false;let i=null;let r=null;function s(e,t){i(e,t);r=n.requestAnimationFrame(s)}return{start:function(){if(e===true)return;if(i===null)return;r=n.requestAnimationFrame(s);e=true},stop:function(){n.cancelAnimationFrame(r);e=false},setAnimationLoop:function(e){i=e},setContext:function(e){n=e}}}function WebGLAttributes(o){const r=new WeakMap;function s(e,t){const n=e.array;const i=e.usage;const r=n.byteLength;const s=o.createBuffer();o.bindBuffer(t,s);o.bufferData(t,n,i);e.onUploadCallback();let a;if(n instanceof Float32Array){a=o.FLOAT}else if(n instanceof Uint16Array){if(e.isFloat16BufferAttribute){a=o.HALF_FLOAT}else{a=o.UNSIGNED_SHORT}}else if(n instanceof Int16Array){a=o.SHORT}else if(n instanceof Uint32Array){a=o.UNSIGNED_INT}else if(n instanceof Int32Array){a=o.INT}else if(n instanceof Int8Array){a=o.BYTE}else if(n instanceof Uint8Array){a=o.UNSIGNED_BYTE}else if(n instanceof Uint8ClampedArray){a=o.UNSIGNED_BYTE}else{throw new Error("THREE.WebGLAttributes: Unsupported buffer data format: "+n)}return{buffer:s,type:a,bytesPerElement:n.BYTES_PER_ELEMENT,version:e.version,size:r}}function a(e,t,n){const i=t.array;const r=t._updateRange;const s=t.updateRanges;o.bindBuffer(n,e);if(r.count===-1&&s.length===0){o.bufferSubData(n,0,i)}if(s.length!==0){for(let e=0,t=s.length;e<t;e++){const a=s[e];o.bufferSubData(n,a.start*i.BYTES_PER_ELEMENT,i,a.start,a.count)}t.clearUpdateRanges()}if(r.count!==-1){o.bufferSubData(n,r.offset*i.BYTES_PER_ELEMENT,i,r.offset,r.count);r.count=-1}t.onUploadCallback()}function e(e){if(e.isInterleavedBufferAttribute)e=e.data;return r.get(e)}function t(e){if(e.isInterleavedBufferAttribute)e=e.data;const t=r.get(e);if(t){o.deleteBuffer(t.buffer);r.delete(e)}}function n(e,t){if(e.isGLBufferAttribute){const i=r.get(e);if(!i||i.version<e.version){r.set(e,{buffer:e.buffer,type:e.type,bytesPerElement:e.elementSize,version:e.version})}return}if(e.isInterleavedBufferAttribute)e=e.data;const n=r.get(e);if(n===undefined){r.set(e,s(e,t))}else if(n.version<e.version){if(n.size!==e.array.byteLength){throw new Error("THREE.WebGLAttributes: The size of the buffer attribute's array buffer does not match the original size. Resizing buffer attributes is not supported.")}a(n.buffer,e,t);n.version=e.version}}return{get:e,remove:t,update:n}}class PlaneGeometry extends BufferGeometry{constructor(e=1,t=1,n=1,i=1){super();this.type="PlaneGeometry";this.parameters={width:e,height:t,widthSegments:n,heightSegments:i};const r=e/2;const s=t/2;const a=Math.floor(n);const o=Math.floor(i);const l=a+1;const c=o+1;const u=e/a;const h=t/o;const d=[];const f=[];const p=[];const m=[];for(let t=0;t<c;t++){const g=t*h-s;for(let e=0;e<l;e++){const _=e*u-r;f.push(_,-g,0);p.push(0,0,1);m.push(e/a);m.push(1-t/o)}}for(let t=0;t<o;t++){for(let e=0;e<a;e++){const v=e+l*t;const y=e+l*(t+1);const x=e+1+l*(t+1);const M=e+1+l*t;d.push(v,y,M);d.push(y,x,M)}}this.setIndex(d);this.setAttribute("position",new Float32BufferAttribute(f,3));this.setAttribute("normal",new Float32BufferAttribute(p,3));this.setAttribute("uv",new Float32BufferAttribute(m,2))}copy(e){super.copy(e);this.parameters=Object.assign({},e.parameters);return this}static fromJSON(e){return new PlaneGeometry(e.width,e.height,e.widthSegments,e.heightSegments)}}var alphahash_fragment="#ifdef USE_ALPHAHASH\n\tif ( diffuseColor.a < getAlphaHashThreshold( vPosition ) ) discard;\n#endif";var alphahash_pars_fragment="#ifdef USE_ALPHAHASH\n\tconst float ALPHA_HASH_SCALE = 0.05;\n\tfloat hash2D( vec2 value ) {\n\t\treturn fract( 1.0e4 * sin( 17.0 * value.x + 0.1 * value.y ) * ( 0.1 + abs( sin( 13.0 * value.y + value.x ) ) ) );\n\t}\n\tfloat hash3D( vec3 value ) {\n\t\treturn hash2D( vec2( hash2D( value.xy ), value.z ) );\n\t}\n\tfloat getAlphaHashThreshold( vec3 position ) {\n\t\tfloat maxDeriv = max(\n\t\t\tlength( dFdx( position.xyz ) ),\n\t\t\tlength( dFdy( position.xyz ) )\n\t\t);\n\t\tfloat pixScale = 1.0 / ( ALPHA_HASH_SCALE * maxDeriv );\n\t\tvec2 pixScales = vec2(\n\t\t\texp2( floor( log2( pixScale ) ) ),\n\t\t\texp2( ceil( log2( pixScale ) ) )\n\t\t);\n\t\tvec2 alpha = vec2(\n\t\t\thash3D( floor( pixScales.x * position.xyz ) ),\n\t\t\thash3D( floor( pixScales.y * position.xyz ) )\n\t\t);\n\t\tfloat lerpFactor = fract( log2( pixScale ) );\n\t\tfloat x = ( 1.0 - lerpFactor ) * alpha.x + lerpFactor * alpha.y;\n\t\tfloat a = min( lerpFactor, 1.0 - lerpFactor );\n\t\tvec3 cases = vec3(\n\t\t\tx * x / ( 2.0 * a * ( 1.0 - a ) ),\n\t\t\t( x - 0.5 * a ) / ( 1.0 - a ),\n\t\t\t1.0 - ( ( 1.0 - x ) * ( 1.0 - x ) / ( 2.0 * a * ( 1.0 - a ) ) )\n\t\t);\n\t\tfloat threshold = ( x < ( 1.0 - a ) )\n\t\t\t? ( ( x < a ) ? cases.x : cases.y )\n\t\t\t: cases.z;\n\t\treturn clamp( threshold , 1.0e-6, 1.0 );\n\t}\n#endif";var alphamap_fragment="#ifdef USE_ALPHAMAP\n\tdiffuseColor.a *= texture2D( alphaMap, vAlphaMapUv ).g;\n#endif";var alphamap_pars_fragment="#ifdef USE_ALPHAMAP\n\tuniform sampler2D alphaMap;\n#endif";var alphatest_fragment="#ifdef USE_ALPHATEST\n\t#ifdef ALPHA_TO_COVERAGE\n\tdiffuseColor.a = smoothstep( alphaTest, alphaTest + fwidth( diffuseColor.a ), diffuseColor.a );\n\tif ( diffuseColor.a == 0.0 ) discard;\n\t#else\n\tif ( diffuseColor.a < alphaTest ) discard;\n\t#endif\n#endif";var alphatest_pars_fragment="#ifdef USE_ALPHATEST\n\tuniform float alphaTest;\n#endif";var aomap_fragment="#ifdef USE_AOMAP\n\tfloat ambientOcclusion = ( texture2D( aoMap, vAoMapUv ).r - 1.0 ) * aoMapIntensity + 1.0;\n\treflectedLight.indirectDiffuse *= ambientOcclusion;\n\t#if defined( USE_CLEARCOAT ) \n\t\tclearcoatSpecularIndirect *= ambientOcclusion;\n\t#endif\n\t#if defined( USE_SHEEN ) \n\t\tsheenSpecularIndirect *= ambientOcclusion;\n\t#endif\n\t#if defined( USE_ENVMAP ) && defined( STANDARD )\n\t\tfloat dotNV = saturate( dot( geometryNormal, geometryViewDir ) );\n\t\treflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.roughness );\n\t#endif\n#endif";var aomap_pars_fragment="#ifdef USE_AOMAP\n\tuniform sampler2D aoMap;\n\tuniform float aoMapIntensity;\n#endif";var batching_pars_vertex="#ifdef USE_BATCHING\n\tattribute float batchId;\n\tuniform highp sampler2D batchingTexture;\n\tmat4 getBatchingMatrix( const in float i ) {\n\t\tint size = textureSize( batchingTexture, 0 ).x;\n\t\tint j = int( i ) * 4;\n\t\tint x = j % size;\n\t\tint y = j / size;\n\t\tvec4 v1 = texelFetch( batchingTexture, ivec2( x, y ), 0 );\n\t\tvec4 v2 = texelFetch( batchingTexture, ivec2( x + 1, y ), 0 );\n\t\tvec4 v3 = texelFetch( batchingTexture, ivec2( x + 2, y ), 0 );\n\t\tvec4 v4 = texelFetch( batchingTexture, ivec2( x + 3, y ), 0 );\n\t\treturn mat4( v1, v2, v3, v4 );\n\t}\n#endif";var batching_vertex="#ifdef USE_BATCHING\n\tmat4 batchingMatrix = getBatchingMatrix( batchId );\n#endif";var begin_vertex="vec3 transformed = vec3( position );\n#ifdef USE_ALPHAHASH\n\tvPosition = vec3( position );\n#endif";var beginnormal_vertex="vec3 objectNormal = vec3( normal );\n#ifdef USE_TANGENT\n\tvec3 objectTangent = vec3( tangent.xyz );\n#endif";var bsdfs="float G_BlinnPhong_Implicit( ) {\n\treturn 0.25;\n}\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\n\treturn RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\n}\nvec3 BRDF_BlinnPhong( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float shininess ) {\n\tvec3 halfDir = normalize( lightDir + viewDir );\n\tfloat dotNH = saturate( dot( normal, halfDir ) );\n\tfloat dotVH = saturate( dot( viewDir, halfDir ) );\n\tvec3 F = F_Schlick( specularColor, 1.0, dotVH );\n\tfloat G = G_BlinnPhong_Implicit( );\n\tfloat D = D_BlinnPhong( shininess, dotNH );\n\treturn F * ( G * D );\n} // validated";var iridescence_fragment="#ifdef USE_IRIDESCENCE\n\tconst mat3 XYZ_TO_REC709 = mat3(\n\t\t 3.2404542, -0.9692660,  0.0556434,\n\t\t-1.5371385,  1.8760108, -0.2040259,\n\t\t-0.4985314,  0.0415560,  1.0572252\n\t);\n\tvec3 Fresnel0ToIor( vec3 fresnel0 ) {\n\t\tvec3 sqrtF0 = sqrt( fresnel0 );\n\t\treturn ( vec3( 1.0 ) + sqrtF0 ) / ( vec3( 1.0 ) - sqrtF0 );\n\t}\n\tvec3 IorToFresnel0( vec3 transmittedIor, float incidentIor ) {\n\t\treturn pow2( ( transmittedIor - vec3( incidentIor ) ) / ( transmittedIor + vec3( incidentIor ) ) );\n\t}\n\tfloat IorToFresnel0( float transmittedIor, float incidentIor ) {\n\t\treturn pow2( ( transmittedIor - incidentIor ) / ( transmittedIor + incidentIor ));\n\t}\n\tvec3 evalSensitivity( float OPD, vec3 shift ) {\n\t\tfloat phase = 2.0 * PI * OPD * 1.0e-9;\n\t\tvec3 val = vec3( 5.4856e-13, 4.4201e-13, 5.2481e-13 );\n\t\tvec3 pos = vec3( 1.6810e+06, 1.7953e+06, 2.2084e+06 );\n\t\tvec3 var = vec3( 4.3278e+09, 9.3046e+09, 6.6121e+09 );\n\t\tvec3 xyz = val * sqrt( 2.0 * PI * var ) * cos( pos * phase + shift ) * exp( - pow2( phase ) * var );\n\t\txyz.x += 9.7470e-14 * sqrt( 2.0 * PI * 4.5282e+09 ) * cos( 2.2399e+06 * phase + shift[ 0 ] ) * exp( - 4.5282e+09 * pow2( phase ) );\n\t\txyz /= 1.0685e-7;\n\t\tvec3 rgb = XYZ_TO_REC709 * xyz;\n\t\treturn rgb;\n\t}\n\tvec3 evalIridescence( float outsideIOR, float eta2, float cosTheta1, float thinFilmThickness, vec3 baseF0 ) {\n\t\tvec3 I;\n\t\tfloat iridescenceIOR = mix( outsideIOR, eta2, smoothstep( 0.0, 0.03, thinFilmThickness ) );\n\t\tfloat sinTheta2Sq = pow2( outsideIOR / iridescenceIOR ) * ( 1.0 - pow2( cosTheta1 ) );\n\t\tfloat cosTheta2Sq = 1.0 - sinTheta2Sq;\n\t\tif ( cosTheta2Sq < 0.0 ) {\n\t\t\treturn vec3( 1.0 );\n\t\t}\n\t\tfloat cosTheta2 = sqrt( cosTheta2Sq );\n\t\tfloat R0 = IorToFresnel0( iridescenceIOR, outsideIOR );\n\t\tfloat R12 = F_Schlick( R0, 1.0, cosTheta1 );\n\t\tfloat T121 = 1.0 - R12;\n\t\tfloat phi12 = 0.0;\n\t\tif ( iridescenceIOR < outsideIOR ) phi12 = PI;\n\t\tfloat phi21 = PI - phi12;\n\t\tvec3 baseIOR = Fresnel0ToIor( clamp( baseF0, 0.0, 0.9999 ) );\t\tvec3 R1 = IorToFresnel0( baseIOR, iridescenceIOR );\n\t\tvec3 R23 = F_Schlick( R1, 1.0, cosTheta2 );\n\t\tvec3 phi23 = vec3( 0.0 );\n\t\tif ( baseIOR[ 0 ] < iridescenceIOR ) phi23[ 0 ] = PI;\n\t\tif ( baseIOR[ 1 ] < iridescenceIOR ) phi23[ 1 ] = PI;\n\t\tif ( baseIOR[ 2 ] < iridescenceIOR ) phi23[ 2 ] = PI;\n\t\tfloat OPD = 2.0 * iridescenceIOR * thinFilmThickness * cosTheta2;\n\t\tvec3 phi = vec3( phi21 ) + phi23;\n\t\tvec3 R123 = clamp( R12 * R23, 1e-5, 0.9999 );\n\t\tvec3 r123 = sqrt( R123 );\n\t\tvec3 Rs = pow2( T121 ) * R23 / ( vec3( 1.0 ) - R123 );\n\t\tvec3 C0 = R12 + Rs;\n\t\tI = C0;\n\t\tvec3 Cm = Rs - T121;\n\t\tfor ( int m = 1; m <= 2; ++ m ) {\n\t\t\tCm *= r123;\n\t\t\tvec3 Sm = 2.0 * evalSensitivity( float( m ) * OPD, float( m ) * phi );\n\t\t\tI += Cm * Sm;\n\t\t}\n\t\treturn max( I, vec3( 0.0 ) );\n\t}\n#endif";var bumpmap_pars_fragment="#ifdef USE_BUMPMAP\n\tuniform sampler2D bumpMap;\n\tuniform float bumpScale;\n\tvec2 dHdxy_fwd() {\n\t\tvec2 dSTdx = dFdx( vBumpMapUv );\n\t\tvec2 dSTdy = dFdy( vBumpMapUv );\n\t\tfloat Hll = bumpScale * texture2D( bumpMap, vBumpMapUv ).x;\n\t\tfloat dBx = bumpScale * texture2D( bumpMap, vBumpMapUv + dSTdx ).x - Hll;\n\t\tfloat dBy = bumpScale * texture2D( bumpMap, vBumpMapUv + dSTdy ).x - Hll;\n\t\treturn vec2( dBx, dBy );\n\t}\n\tvec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy, float faceDirection ) {\n\t\tvec3 vSigmaX = normalize( dFdx( surf_pos.xyz ) );\n\t\tvec3 vSigmaY = normalize( dFdy( surf_pos.xyz ) );\n\t\tvec3 vN = surf_norm;\n\t\tvec3 R1 = cross( vSigmaY, vN );\n\t\tvec3 R2 = cross( vN, vSigmaX );\n\t\tfloat fDet = dot( vSigmaX, R1 ) * faceDirection;\n\t\tvec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\n\t\treturn normalize( abs( fDet ) * surf_norm - vGrad );\n\t}\n#endif";var clipping_planes_fragment="#if NUM_CLIPPING_PLANES > 0\n\tvec4 plane;\n\t#ifdef ALPHA_TO_COVERAGE\n\t\tfloat distanceToPlane, distanceGradient;\n\t\tfloat clipOpacity = 1.0;\n\t\t#pragma unroll_loop_start\n\t\tfor ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {\n\t\t\tplane = clippingPlanes[ i ];\n\t\t\tdistanceToPlane = - dot( vClipPosition, plane.xyz ) + plane.w;\n\t\t\tdistanceGradient = fwidth( distanceToPlane ) / 2.0;\n\t\t\tclipOpacity *= smoothstep( - distanceGradient, distanceGradient, distanceToPlane );\n\t\t\tif ( clipOpacity == 0.0 ) discard;\n\t\t}\n\t\t#pragma unroll_loop_end\n\t\t#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES\n\t\t\tfloat unionClipOpacity = 1.0;\n\t\t\t#pragma unroll_loop_start\n\t\t\tfor ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {\n\t\t\t\tplane = clippingPlanes[ i ];\n\t\t\t\tdistanceToPlane = - dot( vClipPosition, plane.xyz ) + plane.w;\n\t\t\t\tdistanceGradient = fwidth( distanceToPlane ) / 2.0;\n\t\t\t\tunionClipOpacity *= 1.0 - smoothstep( - distanceGradient, distanceGradient, distanceToPlane );\n\t\t\t}\n\t\t\t#pragma unroll_loop_end\n\t\t\tclipOpacity *= 1.0 - unionClipOpacity;\n\t\t#endif\n\t\tdiffuseColor.a *= clipOpacity;\n\t\tif ( diffuseColor.a == 0.0 ) discard;\n\t#else\n\t\t#pragma unroll_loop_start\n\t\tfor ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {\n\t\t\tplane = clippingPlanes[ i ];\n\t\t\tif ( dot( vClipPosition, plane.xyz ) > plane.w ) discard;\n\t\t}\n\t\t#pragma unroll_loop_end\n\t\t#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES\n\t\t\tbool clipped = true;\n\t\t\t#pragma unroll_loop_start\n\t\t\tfor ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {\n\t\t\t\tplane = clippingPlanes[ i ];\n\t\t\t\tclipped = ( dot( vClipPosition, plane.xyz ) > plane.w ) && clipped;\n\t\t\t}\n\t\t\t#pragma unroll_loop_end\n\t\t\tif ( clipped ) discard;\n\t\t#endif\n\t#endif\n#endif";var clipping_planes_pars_fragment="#if NUM_CLIPPING_PLANES > 0\n\tvarying vec3 vClipPosition;\n\tuniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];\n#endif";var clipping_planes_pars_vertex="#if NUM_CLIPPING_PLANES > 0\n\tvarying vec3 vClipPosition;\n#endif";var clipping_planes_vertex="#if NUM_CLIPPING_PLANES > 0\n\tvClipPosition = - mvPosition.xyz;\n#endif";var color_fragment="#if defined( USE_COLOR_ALPHA )\n\tdiffuseColor *= vColor;\n#elif defined( USE_COLOR )\n\tdiffuseColor.rgb *= vColor;\n#endif";var color_pars_fragment="#if defined( USE_COLOR_ALPHA )\n\tvarying vec4 vColor;\n#elif defined( USE_COLOR )\n\tvarying vec3 vColor;\n#endif";var color_pars_vertex="#if defined( USE_COLOR_ALPHA )\n\tvarying vec4 vColor;\n#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )\n\tvarying vec3 vColor;\n#endif";var color_vertex="#if defined( USE_COLOR_ALPHA )\n\tvColor = vec4( 1.0 );\n#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )\n\tvColor = vec3( 1.0 );\n#endif\n#ifdef USE_COLOR\n\tvColor *= color;\n#endif\n#ifdef USE_INSTANCING_COLOR\n\tvColor.xyz *= instanceColor.xyz;\n#endif";var common="#define PI 3.141592653589793\n#define PI2 6.283185307179586\n#define PI_HALF 1.5707963267948966\n#define RECIPROCAL_PI 0.3183098861837907\n#define RECIPROCAL_PI2 0.15915494309189535\n#define EPSILON 1e-6\n#ifndef saturate\n#define saturate( a ) clamp( a, 0.0, 1.0 )\n#endif\n#define whiteComplement( a ) ( 1.0 - saturate( a ) )\nfloat pow2( const in float x ) { return x*x; }\nvec3 pow2( const in vec3 x ) { return x*x; }\nfloat pow3( const in float x ) { return x*x*x; }\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\nfloat max3( const in vec3 v ) { return max( max( v.x, v.y ), v.z ); }\nfloat average( const in vec3 v ) { return dot( v, vec3( 0.3333333 ) ); }\nhighp float rand( const in vec2 uv ) {\n\tconst highp float a = 12.9898, b = 78.233, c = 43758.5453;\n\thighp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\n\treturn fract( sin( sn ) * c );\n}\n#ifdef HIGH_PRECISION\n\tfloat precisionSafeLength( vec3 v ) { return length( v ); }\n#else\n\tfloat precisionSafeLength( vec3 v ) {\n\t\tfloat maxComponent = max3( abs( v ) );\n\t\treturn length( v / maxComponent ) * maxComponent;\n\t}\n#endif\nstruct IncidentLight {\n\tvec3 color;\n\tvec3 direction;\n\tbool visible;\n};\nstruct ReflectedLight {\n\tvec3 directDiffuse;\n\tvec3 directSpecular;\n\tvec3 indirectDiffuse;\n\tvec3 indirectSpecular;\n};\n#ifdef USE_ALPHAHASH\n\tvarying vec3 vPosition;\n#endif\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\n}\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\n}\nmat3 transposeMat3( const in mat3 m ) {\n\tmat3 tmp;\n\ttmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );\n\ttmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );\n\ttmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );\n\treturn tmp;\n}\nfloat luminance( const in vec3 rgb ) {\n\tconst vec3 weights = vec3( 0.2126729, 0.7151522, 0.0721750 );\n\treturn dot( weights, rgb );\n}\nbool isPerspectiveMatrix( mat4 m ) {\n\treturn m[ 2 ][ 3 ] == - 1.0;\n}\nvec2 equirectUv( in vec3 dir ) {\n\tfloat u = atan( dir.z, dir.x ) * RECIPROCAL_PI2 + 0.5;\n\tfloat v = asin( clamp( dir.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n\treturn vec2( u, v );\n}\nvec3 BRDF_Lambert( const in vec3 diffuseColor ) {\n\treturn RECIPROCAL_PI * diffuseColor;\n}\nvec3 F_Schlick( const in vec3 f0, const in float f90, const in float dotVH ) {\n\tfloat fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );\n\treturn f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );\n}\nfloat F_Schlick( const in float f0, const in float f90, const in float dotVH ) {\n\tfloat fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );\n\treturn f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );\n} // validated";var cube_uv_reflection_fragment="#ifdef ENVMAP_TYPE_CUBE_UV\n\t#define cubeUV_minMipLevel 4.0\n\t#define cubeUV_minTileSize 16.0\n\tfloat getFace( vec3 direction ) {\n\t\tvec3 absDirection = abs( direction );\n\t\tfloat face = - 1.0;\n\t\tif ( absDirection.x > absDirection.z ) {\n\t\t\tif ( absDirection.x > absDirection.y )\n\t\t\t\tface = direction.x > 0.0 ? 0.0 : 3.0;\n\t\t\telse\n\t\t\t\tface = direction.y > 0.0 ? 1.0 : 4.0;\n\t\t} else {\n\t\t\tif ( absDirection.z > absDirection.y )\n\t\t\t\tface = direction.z > 0.0 ? 2.0 : 5.0;\n\t\t\telse\n\t\t\t\tface = direction.y > 0.0 ? 1.0 : 4.0;\n\t\t}\n\t\treturn face;\n\t}\n\tvec2 getUV( vec3 direction, float face ) {\n\t\tvec2 uv;\n\t\tif ( face == 0.0 ) {\n\t\t\tuv = vec2( direction.z, direction.y ) / abs( direction.x );\n\t\t} else if ( face == 1.0 ) {\n\t\t\tuv = vec2( - direction.x, - direction.z ) / abs( direction.y );\n\t\t} else if ( face == 2.0 ) {\n\t\t\tuv = vec2( - direction.x, direction.y ) / abs( direction.z );\n\t\t} else if ( face == 3.0 ) {\n\t\t\tuv = vec2( - direction.z, direction.y ) / abs( direction.x );\n\t\t} else if ( face == 4.0 ) {\n\t\t\tuv = vec2( - direction.x, direction.z ) / abs( direction.y );\n\t\t} else {\n\t\t\tuv = vec2( direction.x, direction.y ) / abs( direction.z );\n\t\t}\n\t\treturn 0.5 * ( uv + 1.0 );\n\t}\n\tvec3 bilinearCubeUV( sampler2D envMap, vec3 direction, float mipInt ) {\n\t\tfloat face = getFace( direction );\n\t\tfloat filterInt = max( cubeUV_minMipLevel - mipInt, 0.0 );\n\t\tmipInt = max( mipInt, cubeUV_minMipLevel );\n\t\tfloat faceSize = exp2( mipInt );\n\t\thighp vec2 uv = getUV( direction, face ) * ( faceSize - 2.0 ) + 1.0;\n\t\tif ( face > 2.0 ) {\n\t\t\tuv.y += faceSize;\n\t\t\tface -= 3.0;\n\t\t}\n\t\tuv.x += face * faceSize;\n\t\tuv.x += filterInt * 3.0 * cubeUV_minTileSize;\n\t\tuv.y += 4.0 * ( exp2( CUBEUV_MAX_MIP ) - faceSize );\n\t\tuv.x *= CUBEUV_TEXEL_WIDTH;\n\t\tuv.y *= CUBEUV_TEXEL_HEIGHT;\n\t\t#ifdef texture2DGradEXT\n\t\t\treturn texture2DGradEXT( envMap, uv, vec2( 0.0 ), vec2( 0.0 ) ).rgb;\n\t\t#else\n\t\t\treturn texture2D( envMap, uv ).rgb;\n\t\t#endif\n\t}\n\t#define cubeUV_r0 1.0\n\t#define cubeUV_m0 - 2.0\n\t#define cubeUV_r1 0.8\n\t#define cubeUV_m1 - 1.0\n\t#define cubeUV_r4 0.4\n\t#define cubeUV_m4 2.0\n\t#define cubeUV_r5 0.305\n\t#define cubeUV_m5 3.0\n\t#define cubeUV_r6 0.21\n\t#define cubeUV_m6 4.0\n\tfloat roughnessToMip( float roughness ) {\n\t\tfloat mip = 0.0;\n\t\tif ( roughness >= cubeUV_r1 ) {\n\t\t\tmip = ( cubeUV_r0 - roughness ) * ( cubeUV_m1 - cubeUV_m0 ) / ( cubeUV_r0 - cubeUV_r1 ) + cubeUV_m0;\n\t\t} else if ( roughness >= cubeUV_r4 ) {\n\t\t\tmip = ( cubeUV_r1 - roughness ) * ( cubeUV_m4 - cubeUV_m1 ) / ( cubeUV_r1 - cubeUV_r4 ) + cubeUV_m1;\n\t\t} else if ( roughness >= cubeUV_r5 ) {\n\t\t\tmip = ( cubeUV_r4 - roughness ) * ( cubeUV_m5 - cubeUV_m4 ) / ( cubeUV_r4 - cubeUV_r5 ) + cubeUV_m4;\n\t\t} else if ( roughness >= cubeUV_r6 ) {\n\t\t\tmip = ( cubeUV_r5 - roughness ) * ( cubeUV_m6 - cubeUV_m5 ) / ( cubeUV_r5 - cubeUV_r6 ) + cubeUV_m5;\n\t\t} else {\n\t\t\tmip = - 2.0 * log2( 1.16 * roughness );\t\t}\n\t\treturn mip;\n\t}\n\tvec4 textureCubeUV( sampler2D envMap, vec3 sampleDir, float roughness ) {\n\t\tfloat mip = clamp( roughnessToMip( roughness ), cubeUV_m0, CUBEUV_MAX_MIP );\n\t\tfloat mipF = fract( mip );\n\t\tfloat mipInt = floor( mip );\n\t\tvec3 color0 = bilinearCubeUV( envMap, sampleDir, mipInt );\n\t\tif ( mipF == 0.0 ) {\n\t\t\treturn vec4( color0, 1.0 );\n\t\t} else {\n\t\t\tvec3 color1 = bilinearCubeUV( envMap, sampleDir, mipInt + 1.0 );\n\t\t\treturn vec4( mix( color0, color1, mipF ), 1.0 );\n\t\t}\n\t}\n#endif";var defaultnormal_vertex="vec3 transformedNormal = objectNormal;\n#ifdef USE_TANGENT\n\tvec3 transformedTangent = objectTangent;\n#endif\n#ifdef USE_BATCHING\n\tmat3 bm = mat3( batchingMatrix );\n\ttransformedNormal /= vec3( dot( bm[ 0 ], bm[ 0 ] ), dot( bm[ 1 ], bm[ 1 ] ), dot( bm[ 2 ], bm[ 2 ] ) );\n\ttransformedNormal = bm * transformedNormal;\n\t#ifdef USE_TANGENT\n\t\ttransformedTangent = bm * transformedTangent;\n\t#endif\n#endif\n#ifdef USE_INSTANCING\n\tmat3 im = mat3( instanceMatrix );\n\ttransformedNormal /= vec3( dot( im[ 0 ], im[ 0 ] ), dot( im[ 1 ], im[ 1 ] ), dot( im[ 2 ], im[ 2 ] ) );\n\ttransformedNormal = im * transformedNormal;\n\t#ifdef USE_TANGENT\n\t\ttransformedTangent = im * transformedTangent;\n\t#endif\n#endif\ntransformedNormal = normalMatrix * transformedNormal;\n#ifdef FLIP_SIDED\n\ttransformedNormal = - transformedNormal;\n#endif\n#ifdef USE_TANGENT\n\ttransformedTangent = ( modelViewMatrix * vec4( transformedTangent, 0.0 ) ).xyz;\n\t#ifdef FLIP_SIDED\n\t\ttransformedTangent = - transformedTangent;\n\t#endif\n#endif";var displacementmap_pars_vertex="#ifdef USE_DISPLACEMENTMAP\n\tuniform sampler2D displacementMap;\n\tuniform float displacementScale;\n\tuniform float displacementBias;\n#endif";var displacementmap_vertex="#ifdef USE_DISPLACEMENTMAP\n\ttransformed += normalize( objectNormal ) * ( texture2D( displacementMap, vDisplacementMapUv ).x * displacementScale + displacementBias );\n#endif";var emissivemap_fragment="#ifdef USE_EMISSIVEMAP\n\tvec4 emissiveColor = texture2D( emissiveMap, vEmissiveMapUv );\n\ttotalEmissiveRadiance *= emissiveColor.rgb;\n#endif";var emissivemap_pars_fragment="#ifdef USE_EMISSIVEMAP\n\tuniform sampler2D emissiveMap;\n#endif";var colorspace_fragment="gl_FragColor = linearToOutputTexel( gl_FragColor );";var colorspace_pars_fragment="\nconst mat3 LINEAR_SRGB_TO_LINEAR_DISPLAY_P3 = mat3(\n\tvec3( 0.8224621, 0.177538, 0.0 ),\n\tvec3( 0.0331941, 0.9668058, 0.0 ),\n\tvec3( 0.0170827, 0.0723974, 0.9105199 )\n);\nconst mat3 LINEAR_DISPLAY_P3_TO_LINEAR_SRGB = mat3(\n\tvec3( 1.2249401, - 0.2249404, 0.0 ),\n\tvec3( - 0.0420569, 1.0420571, 0.0 ),\n\tvec3( - 0.0196376, - 0.0786361, 1.0982735 )\n);\nvec4 LinearSRGBToLinearDisplayP3( in vec4 value ) {\n\treturn vec4( value.rgb * LINEAR_SRGB_TO_LINEAR_DISPLAY_P3, value.a );\n}\nvec4 LinearDisplayP3ToLinearSRGB( in vec4 value ) {\n\treturn vec4( value.rgb * LINEAR_DISPLAY_P3_TO_LINEAR_SRGB, value.a );\n}\nvec4 LinearTransferOETF( in vec4 value ) {\n\treturn value;\n}\nvec4 sRGBTransferOETF( in vec4 value ) {\n\treturn vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.a );\n}\nvec4 LinearToLinear( in vec4 value ) {\n\treturn value;\n}\nvec4 LinearTosRGB( in vec4 value ) {\n\treturn sRGBTransferOETF( value );\n}";var envmap_fragment="#ifdef USE_ENVMAP\n\t#ifdef ENV_WORLDPOS\n\t\tvec3 cameraToFrag;\n\t\tif ( isOrthographic ) {\n\t\t\tcameraToFrag = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\n\t\t} else {\n\t\t\tcameraToFrag = normalize( vWorldPosition - cameraPosition );\n\t\t}\n\t\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvec3 reflectVec = reflect( cameraToFrag, worldNormal );\n\t\t#else\n\t\t\tvec3 reflectVec = refract( cameraToFrag, worldNormal, refractionRatio );\n\t\t#endif\n\t#else\n\t\tvec3 reflectVec = vReflect;\n\t#endif\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tvec4 envColor = textureCube( envMap, envMapRotation * vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\n\t#else\n\t\tvec4 envColor = vec4( 0.0 );\n\t#endif\n\t#ifdef ENVMAP_BLENDING_MULTIPLY\n\t\toutgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\n\t#elif defined( ENVMAP_BLENDING_MIX )\n\t\toutgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\n\t#elif defined( ENVMAP_BLENDING_ADD )\n\t\toutgoingLight += envColor.xyz * specularStrength * reflectivity;\n\t#endif\n#endif";var envmap_common_pars_fragment="#ifdef USE_ENVMAP\n\tuniform float envMapIntensity;\n\tuniform float flipEnvMap;\n\tuniform mat3 envMapRotation;\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tuniform samplerCube envMap;\n\t#else\n\t\tuniform sampler2D envMap;\n\t#endif\n\t\n#endif";var envmap_pars_fragment="#ifdef USE_ENVMAP\n\tuniform float reflectivity;\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( LAMBERT )\n\t\t#define ENV_WORLDPOS\n\t#endif\n\t#ifdef ENV_WORLDPOS\n\t\tvarying vec3 vWorldPosition;\n\t\tuniform float refractionRatio;\n\t#else\n\t\tvarying vec3 vReflect;\n\t#endif\n#endif";var envmap_pars_vertex="#ifdef USE_ENVMAP\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( LAMBERT )\n\t\t#define ENV_WORLDPOS\n\t#endif\n\t#ifdef ENV_WORLDPOS\n\t\t\n\t\tvarying vec3 vWorldPosition;\n\t#else\n\t\tvarying vec3 vReflect;\n\t\tuniform float refractionRatio;\n\t#endif\n#endif";var envmap_vertex="#ifdef USE_ENVMAP\n\t#ifdef ENV_WORLDPOS\n\t\tvWorldPosition = worldPosition.xyz;\n\t#else\n\t\tvec3 cameraToVertex;\n\t\tif ( isOrthographic ) {\n\t\t\tcameraToVertex = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\n\t\t} else {\n\t\t\tcameraToVertex = normalize( worldPosition.xyz - cameraPosition );\n\t\t}\n\t\tvec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvReflect = reflect( cameraToVertex, worldNormal );\n\t\t#else\n\t\t\tvReflect = refract( cameraToVertex, worldNormal, refractionRatio );\n\t\t#endif\n\t#endif\n#endif";var fog_vertex="#ifdef USE_FOG\n\tvFogDepth = - mvPosition.z;\n#endif";var fog_pars_vertex="#ifdef USE_FOG\n\tvarying float vFogDepth;\n#endif";var fog_fragment="#ifdef USE_FOG\n\t#ifdef FOG_EXP2\n\t\tfloat fogFactor = 1.0 - exp( - fogDensity * fogDensity * vFogDepth * vFogDepth );\n\t#else\n\t\tfloat fogFactor = smoothstep( fogNear, fogFar, vFogDepth );\n\t#endif\n\tgl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\n#endif";var fog_pars_fragment="#ifdef USE_FOG\n\tuniform vec3 fogColor;\n\tvarying float vFogDepth;\n\t#ifdef FOG_EXP2\n\t\tuniform float fogDensity;\n\t#else\n\t\tuniform float fogNear;\n\t\tuniform float fogFar;\n\t#endif\n#endif";var gradientmap_pars_fragment="#ifdef USE_GRADIENTMAP\n\tuniform sampler2D gradientMap;\n#endif\nvec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {\n\tfloat dotNL = dot( normal, lightDirection );\n\tvec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );\n\t#ifdef USE_GRADIENTMAP\n\t\treturn vec3( texture2D( gradientMap, coord ).r );\n\t#else\n\t\tvec2 fw = fwidth( coord ) * 0.5;\n\t\treturn mix( vec3( 0.7 ), vec3( 1.0 ), smoothstep( 0.7 - fw.x, 0.7 + fw.x, coord.x ) );\n\t#endif\n}";var lightmap_pars_fragment="#ifdef USE_LIGHTMAP\n\tuniform sampler2D lightMap;\n\tuniform float lightMapIntensity;\n#endif";var lights_lambert_fragment="LambertMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;\nmaterial.specularStrength = specularStrength;";var lights_lambert_pars_fragment="varying vec3 vViewPosition;\nstruct LambertMaterial {\n\tvec3 diffuseColor;\n\tfloat specularStrength;\n};\nvoid RE_Direct_Lambert( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in LambertMaterial material, inout ReflectedLight reflectedLight ) {\n\tfloat dotNL = saturate( dot( geometryNormal, directLight.direction ) );\n\tvec3 irradiance = dotNL * directLight.color;\n\treflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectDiffuse_Lambert( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in LambertMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\n#define RE_Direct\t\t\t\tRE_Direct_Lambert\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Lambert";var lights_pars_begin="uniform bool receiveShadow;\nuniform vec3 ambientLightColor;\n#if defined( USE_LIGHT_PROBES )\n\tuniform vec3 lightProbe[ 9 ];\n#endif\nvec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {\n\tfloat x = normal.x, y = normal.y, z = normal.z;\n\tvec3 result = shCoefficients[ 0 ] * 0.886227;\n\tresult += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;\n\tresult += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;\n\tresult += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;\n\tresult += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;\n\tresult += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;\n\tresult += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );\n\tresult += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;\n\tresult += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );\n\treturn result;\n}\nvec3 getLightProbeIrradiance( const in vec3 lightProbe[ 9 ], const in vec3 normal ) {\n\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n\tvec3 irradiance = shGetIrradianceAt( worldNormal, lightProbe );\n\treturn irradiance;\n}\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\n\tvec3 irradiance = ambientLightColor;\n\treturn irradiance;\n}\nfloat getDistanceAttenuation( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\n\t#if defined ( LEGACY_LIGHTS )\n\t\tif ( cutoffDistance > 0.0 && decayExponent > 0.0 ) {\n\t\t\treturn pow( saturate( - lightDistance / cutoffDistance + 1.0 ), decayExponent );\n\t\t}\n\t\treturn 1.0;\n\t#else\n\t\tfloat distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\n\t\tif ( cutoffDistance > 0.0 ) {\n\t\t\tdistanceFalloff *= pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\n\t\t}\n\t\treturn distanceFalloff;\n\t#endif\n}\nfloat getSpotAttenuation( const in float coneCosine, const in float penumbraCosine, const in float angleCosine ) {\n\treturn smoothstep( coneCosine, penumbraCosine, angleCosine );\n}\n#if NUM_DIR_LIGHTS > 0\n\tstruct DirectionalLight {\n\t\tvec3 direction;\n\t\tvec3 color;\n\t};\n\tuniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\n\tvoid getDirectionalLightInfo( const in DirectionalLight directionalLight, out IncidentLight light ) {\n\t\tlight.color = directionalLight.color;\n\t\tlight.direction = directionalLight.direction;\n\t\tlight.visible = true;\n\t}\n#endif\n#if NUM_POINT_LIGHTS > 0\n\tstruct PointLight {\n\t\tvec3 position;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t};\n\tuniform PointLight pointLights[ NUM_POINT_LIGHTS ];\n\tvoid getPointLightInfo( const in PointLight pointLight, const in vec3 geometryPosition, out IncidentLight light ) {\n\t\tvec3 lVector = pointLight.position - geometryPosition;\n\t\tlight.direction = normalize( lVector );\n\t\tfloat lightDistance = length( lVector );\n\t\tlight.color = pointLight.color;\n\t\tlight.color *= getDistanceAttenuation( lightDistance, pointLight.distance, pointLight.decay );\n\t\tlight.visible = ( light.color != vec3( 0.0 ) );\n\t}\n#endif\n#if NUM_SPOT_LIGHTS > 0\n\tstruct SpotLight {\n\t\tvec3 position;\n\t\tvec3 direction;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t\tfloat coneCos;\n\t\tfloat penumbraCos;\n\t};\n\tuniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\n\tvoid getSpotLightInfo( const in SpotLight spotLight, const in vec3 geometryPosition, out IncidentLight light ) {\n\t\tvec3 lVector = spotLight.position - geometryPosition;\n\t\tlight.direction = normalize( lVector );\n\t\tfloat angleCos = dot( light.direction, spotLight.direction );\n\t\tfloat spotAttenuation = getSpotAttenuation( spotLight.coneCos, spotLight.penumbraCos, angleCos );\n\t\tif ( spotAttenuation > 0.0 ) {\n\t\t\tfloat lightDistance = length( lVector );\n\t\t\tlight.color = spotLight.color * spotAttenuation;\n\t\t\tlight.color *= getDistanceAttenuation( lightDistance, spotLight.distance, spotLight.decay );\n\t\t\tlight.visible = ( light.color != vec3( 0.0 ) );\n\t\t} else {\n\t\t\tlight.color = vec3( 0.0 );\n\t\t\tlight.visible = false;\n\t\t}\n\t}\n#endif\n#if NUM_RECT_AREA_LIGHTS > 0\n\tstruct RectAreaLight {\n\t\tvec3 color;\n\t\tvec3 position;\n\t\tvec3 halfWidth;\n\t\tvec3 halfHeight;\n\t};\n\tuniform sampler2D ltc_1;\tuniform sampler2D ltc_2;\n\tuniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];\n#endif\n#if NUM_HEMI_LIGHTS > 0\n\tstruct HemisphereLight {\n\t\tvec3 direction;\n\t\tvec3 skyColor;\n\t\tvec3 groundColor;\n\t};\n\tuniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\n\tvec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in vec3 normal ) {\n\t\tfloat dotNL = dot( normal, hemiLight.direction );\n\t\tfloat hemiDiffuseWeight = 0.5 * dotNL + 0.5;\n\t\tvec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\n\t\treturn irradiance;\n\t}\n#endif";var envmap_physical_pars_fragment="#ifdef USE_ENVMAP\n\tvec3 getIBLIrradiance( const in vec3 normal ) {\n\t\t#ifdef ENVMAP_TYPE_CUBE_UV\n\t\t\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n\t\t\tvec4 envMapColor = textureCubeUV( envMap, envMapRotation * worldNormal, 1.0 );\n\t\t\treturn PI * envMapColor.rgb * envMapIntensity;\n\t\t#else\n\t\t\treturn vec3( 0.0 );\n\t\t#endif\n\t}\n\tvec3 getIBLRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness ) {\n\t\t#ifdef ENVMAP_TYPE_CUBE_UV\n\t\t\tvec3 reflectVec = reflect( - viewDir, normal );\n\t\t\treflectVec = normalize( mix( reflectVec, normal, roughness * roughness) );\n\t\t\treflectVec = inverseTransformDirection( reflectVec, viewMatrix );\n\t\t\tvec4 envMapColor = textureCubeUV( envMap, envMapRotation * reflectVec, roughness );\n\t\t\treturn envMapColor.rgb * envMapIntensity;\n\t\t#else\n\t\t\treturn vec3( 0.0 );\n\t\t#endif\n\t}\n\t#ifdef USE_ANISOTROPY\n\t\tvec3 getIBLAnisotropyRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness, const in vec3 bitangent, const in float anisotropy ) {\n\t\t\t#ifdef ENVMAP_TYPE_CUBE_UV\n\t\t\t\tvec3 bentNormal = cross( bitangent, viewDir );\n\t\t\t\tbentNormal = normalize( cross( bentNormal, bitangent ) );\n\t\t\t\tbentNormal = normalize( mix( bentNormal, normal, pow2( pow2( 1.0 - anisotropy * ( 1.0 - roughness ) ) ) ) );\n\t\t\t\treturn getIBLRadiance( viewDir, bentNormal, roughness );\n\t\t\t#else\n\t\t\t\treturn vec3( 0.0 );\n\t\t\t#endif\n\t\t}\n\t#endif\n#endif";var lights_toon_fragment="ToonMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;";var lights_toon_pars_fragment="varying vec3 vViewPosition;\nstruct ToonMaterial {\n\tvec3 diffuseColor;\n};\nvoid RE_Direct_Toon( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\n\tvec3 irradiance = getGradientIrradiance( geometryNormal, directLight.direction ) * directLight.color;\n\treflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectDiffuse_Toon( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\n#define RE_Direct\t\t\t\tRE_Direct_Toon\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Toon";var lights_phong_fragment="BlinnPhongMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;\nmaterial.specularColor = specular;\nmaterial.specularShininess = shininess;\nmaterial.specularStrength = specularStrength;";var lights_phong_pars_fragment="varying vec3 vViewPosition;\nstruct BlinnPhongMaterial {\n\tvec3 diffuseColor;\n\tvec3 specularColor;\n\tfloat specularShininess;\n\tfloat specularStrength;\n};\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\tfloat dotNL = saturate( dot( geometryNormal, directLight.direction ) );\n\tvec3 irradiance = dotNL * directLight.color;\n\treflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n\treflectedLight.directSpecular += irradiance * BRDF_BlinnPhong( directLight.direction, geometryViewDir, geometryNormal, material.specularColor, material.specularShininess ) * material.specularStrength;\n}\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\n#define RE_Direct\t\t\t\tRE_Direct_BlinnPhong\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_BlinnPhong";var lights_physical_fragment="PhysicalMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\nvec3 dxy = max( abs( dFdx( nonPerturbedNormal ) ), abs( dFdy( nonPerturbedNormal ) ) );\nfloat geometryRoughness = max( max( dxy.x, dxy.y ), dxy.z );\nmaterial.roughness = max( roughnessFactor, 0.0525 );material.roughness += geometryRoughness;\nmaterial.roughness = min( material.roughness, 1.0 );\n#ifdef IOR\n\tmaterial.ior = ior;\n\t#ifdef USE_SPECULAR\n\t\tfloat specularIntensityFactor = specularIntensity;\n\t\tvec3 specularColorFactor = specularColor;\n\t\t#ifdef USE_SPECULAR_COLORMAP\n\t\t\tspecularColorFactor *= texture2D( specularColorMap, vSpecularColorMapUv ).rgb;\n\t\t#endif\n\t\t#ifdef USE_SPECULAR_INTENSITYMAP\n\t\t\tspecularIntensityFactor *= texture2D( specularIntensityMap, vSpecularIntensityMapUv ).a;\n\t\t#endif\n\t\tmaterial.specularF90 = mix( specularIntensityFactor, 1.0, metalnessFactor );\n\t#else\n\t\tfloat specularIntensityFactor = 1.0;\n\t\tvec3 specularColorFactor = vec3( 1.0 );\n\t\tmaterial.specularF90 = 1.0;\n\t#endif\n\tmaterial.specularColor = mix( min( pow2( ( material.ior - 1.0 ) / ( material.ior + 1.0 ) ) * specularColorFactor, vec3( 1.0 ) ) * specularIntensityFactor, diffuseColor.rgb, metalnessFactor );\n#else\n\tmaterial.specularColor = mix( vec3( 0.04 ), diffuseColor.rgb, metalnessFactor );\n\tmaterial.specularF90 = 1.0;\n#endif\n#ifdef USE_CLEARCOAT\n\tmaterial.clearcoat = clearcoat;\n\tmaterial.clearcoatRoughness = clearcoatRoughness;\n\tmaterial.clearcoatF0 = vec3( 0.04 );\n\tmaterial.clearcoatF90 = 1.0;\n\t#ifdef USE_CLEARCOATMAP\n\t\tmaterial.clearcoat *= texture2D( clearcoatMap, vClearcoatMapUv ).x;\n\t#endif\n\t#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n\t\tmaterial.clearcoatRoughness *= texture2D( clearcoatRoughnessMap, vClearcoatRoughnessMapUv ).y;\n\t#endif\n\tmaterial.clearcoat = saturate( material.clearcoat );\tmaterial.clearcoatRoughness = max( material.clearcoatRoughness, 0.0525 );\n\tmaterial.clearcoatRoughness += geometryRoughness;\n\tmaterial.clearcoatRoughness = min( material.clearcoatRoughness, 1.0 );\n#endif\n#ifdef USE_DISPERSION\n\tmaterial.dispersion = dispersion;\n#endif\n#ifdef USE_IRIDESCENCE\n\tmaterial.iridescence = iridescence;\n\tmaterial.iridescenceIOR = iridescenceIOR;\n\t#ifdef USE_IRIDESCENCEMAP\n\t\tmaterial.iridescence *= texture2D( iridescenceMap, vIridescenceMapUv ).r;\n\t#endif\n\t#ifdef USE_IRIDESCENCE_THICKNESSMAP\n\t\tmaterial.iridescenceThickness = (iridescenceThicknessMaximum - iridescenceThicknessMinimum) * texture2D( iridescenceThicknessMap, vIridescenceThicknessMapUv ).g + iridescenceThicknessMinimum;\n\t#else\n\t\tmaterial.iridescenceThickness = iridescenceThicknessMaximum;\n\t#endif\n#endif\n#ifdef USE_SHEEN\n\tmaterial.sheenColor = sheenColor;\n\t#ifdef USE_SHEEN_COLORMAP\n\t\tmaterial.sheenColor *= texture2D( sheenColorMap, vSheenColorMapUv ).rgb;\n\t#endif\n\tmaterial.sheenRoughness = clamp( sheenRoughness, 0.07, 1.0 );\n\t#ifdef USE_SHEEN_ROUGHNESSMAP\n\t\tmaterial.sheenRoughness *= texture2D( sheenRoughnessMap, vSheenRoughnessMapUv ).a;\n\t#endif\n#endif\n#ifdef USE_ANISOTROPY\n\t#ifdef USE_ANISOTROPYMAP\n\t\tmat2 anisotropyMat = mat2( anisotropyVector.x, anisotropyVector.y, - anisotropyVector.y, anisotropyVector.x );\n\t\tvec3 anisotropyPolar = texture2D( anisotropyMap, vAnisotropyMapUv ).rgb;\n\t\tvec2 anisotropyV = anisotropyMat * normalize( 2.0 * anisotropyPolar.rg - vec2( 1.0 ) ) * anisotropyPolar.b;\n\t#else\n\t\tvec2 anisotropyV = anisotropyVector;\n\t#endif\n\tmaterial.anisotropy = length( anisotropyV );\n\tif( material.anisotropy == 0.0 ) {\n\t\tanisotropyV = vec2( 1.0, 0.0 );\n\t} else {\n\t\tanisotropyV /= material.anisotropy;\n\t\tmaterial.anisotropy = saturate( material.anisotropy );\n\t}\n\tmaterial.alphaT = mix( pow2( material.roughness ), 1.0, pow2( material.anisotropy ) );\n\tmaterial.anisotropyT = tbn[ 0 ] * anisotropyV.x + tbn[ 1 ] * anisotropyV.y;\n\tmaterial.anisotropyB = tbn[ 1 ] * anisotropyV.x - tbn[ 0 ] * anisotropyV.y;\n#endif";var lights_physical_pars_fragment="struct PhysicalMaterial {\n\tvec3 diffuseColor;\n\tfloat roughness;\n\tvec3 specularColor;\n\tfloat specularF90;\n\tfloat dispersion;\n\t#ifdef USE_CLEARCOAT\n\t\tfloat clearcoat;\n\t\tfloat clearcoatRoughness;\n\t\tvec3 clearcoatF0;\n\t\tfloat clearcoatF90;\n\t#endif\n\t#ifdef USE_IRIDESCENCE\n\t\tfloat iridescence;\n\t\tfloat iridescenceIOR;\n\t\tfloat iridescenceThickness;\n\t\tvec3 iridescenceFresnel;\n\t\tvec3 iridescenceF0;\n\t#endif\n\t#ifdef USE_SHEEN\n\t\tvec3 sheenColor;\n\t\tfloat sheenRoughness;\n\t#endif\n\t#ifdef IOR\n\t\tfloat ior;\n\t#endif\n\t#ifdef USE_TRANSMISSION\n\t\tfloat transmission;\n\t\tfloat transmissionAlpha;\n\t\tfloat thickness;\n\t\tfloat attenuationDistance;\n\t\tvec3 attenuationColor;\n\t#endif\n\t#ifdef USE_ANISOTROPY\n\t\tfloat anisotropy;\n\t\tfloat alphaT;\n\t\tvec3 anisotropyT;\n\t\tvec3 anisotropyB;\n\t#endif\n};\nvec3 clearcoatSpecularDirect = vec3( 0.0 );\nvec3 clearcoatSpecularIndirect = vec3( 0.0 );\nvec3 sheenSpecularDirect = vec3( 0.0 );\nvec3 sheenSpecularIndirect = vec3(0.0 );\nvec3 Schlick_to_F0( const in vec3 f, const in float f90, const in float dotVH ) {\n    float x = clamp( 1.0 - dotVH, 0.0, 1.0 );\n    float x2 = x * x;\n    float x5 = clamp( x * x2 * x2, 0.0, 0.9999 );\n    return ( f - vec3( f90 ) * x5 ) / ( 1.0 - x5 );\n}\nfloat V_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\n\tfloat a2 = pow2( alpha );\n\tfloat gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n\tfloat gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n\treturn 0.5 / max( gv + gl, EPSILON );\n}\nfloat D_GGX( const in float alpha, const in float dotNH ) {\n\tfloat a2 = pow2( alpha );\n\tfloat denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;\n\treturn RECIPROCAL_PI * a2 / pow2( denom );\n}\n#ifdef USE_ANISOTROPY\n\tfloat V_GGX_SmithCorrelated_Anisotropic( const in float alphaT, const in float alphaB, const in float dotTV, const in float dotBV, const in float dotTL, const in float dotBL, const in float dotNV, const in float dotNL ) {\n\t\tfloat gv = dotNL * length( vec3( alphaT * dotTV, alphaB * dotBV, dotNV ) );\n\t\tfloat gl = dotNV * length( vec3( alphaT * dotTL, alphaB * dotBL, dotNL ) );\n\t\tfloat v = 0.5 / ( gv + gl );\n\t\treturn saturate(v);\n\t}\n\tfloat D_GGX_Anisotropic( const in float alphaT, const in float alphaB, const in float dotNH, const in float dotTH, const in float dotBH ) {\n\t\tfloat a2 = alphaT * alphaB;\n\t\thighp vec3 v = vec3( alphaB * dotTH, alphaT * dotBH, a2 * dotNH );\n\t\thighp float v2 = dot( v, v );\n\t\tfloat w2 = a2 / v2;\n\t\treturn RECIPROCAL_PI * a2 * pow2 ( w2 );\n\t}\n#endif\n#ifdef USE_CLEARCOAT\n\tvec3 BRDF_GGX_Clearcoat( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in PhysicalMaterial material) {\n\t\tvec3 f0 = material.clearcoatF0;\n\t\tfloat f90 = material.clearcoatF90;\n\t\tfloat roughness = material.clearcoatRoughness;\n\t\tfloat alpha = pow2( roughness );\n\t\tvec3 halfDir = normalize( lightDir + viewDir );\n\t\tfloat dotNL = saturate( dot( normal, lightDir ) );\n\t\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\t\tfloat dotNH = saturate( dot( normal, halfDir ) );\n\t\tfloat dotVH = saturate( dot( viewDir, halfDir ) );\n\t\tvec3 F = F_Schlick( f0, f90, dotVH );\n\t\tfloat V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );\n\t\tfloat D = D_GGX( alpha, dotNH );\n\t\treturn F * ( V * D );\n\t}\n#endif\nvec3 BRDF_GGX( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in PhysicalMaterial material ) {\n\tvec3 f0 = material.specularColor;\n\tfloat f90 = material.specularF90;\n\tfloat roughness = material.roughness;\n\tfloat alpha = pow2( roughness );\n\tvec3 halfDir = normalize( lightDir + viewDir );\n\tfloat dotNL = saturate( dot( normal, lightDir ) );\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tfloat dotNH = saturate( dot( normal, halfDir ) );\n\tfloat dotVH = saturate( dot( viewDir, halfDir ) );\n\tvec3 F = F_Schlick( f0, f90, dotVH );\n\t#ifdef USE_IRIDESCENCE\n\t\tF = mix( F, material.iridescenceFresnel, material.iridescence );\n\t#endif\n\t#ifdef USE_ANISOTROPY\n\t\tfloat dotTL = dot( material.anisotropyT, lightDir );\n\t\tfloat dotTV = dot( material.anisotropyT, viewDir );\n\t\tfloat dotTH = dot( material.anisotropyT, halfDir );\n\t\tfloat dotBL = dot( material.anisotropyB, lightDir );\n\t\tfloat dotBV = dot( material.anisotropyB, viewDir );\n\t\tfloat dotBH = dot( material.anisotropyB, halfDir );\n\t\tfloat V = V_GGX_SmithCorrelated_Anisotropic( material.alphaT, alpha, dotTV, dotBV, dotTL, dotBL, dotNV, dotNL );\n\t\tfloat D = D_GGX_Anisotropic( material.alphaT, alpha, dotNH, dotTH, dotBH );\n\t#else\n\t\tfloat V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );\n\t\tfloat D = D_GGX( alpha, dotNH );\n\t#endif\n\treturn F * ( V * D );\n}\nvec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {\n\tconst float LUT_SIZE = 64.0;\n\tconst float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;\n\tconst float LUT_BIAS = 0.5 / LUT_SIZE;\n\tfloat dotNV = saturate( dot( N, V ) );\n\tvec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );\n\tuv = uv * LUT_SCALE + LUT_BIAS;\n\treturn uv;\n}\nfloat LTC_ClippedSphereFormFactor( const in vec3 f ) {\n\tfloat l = length( f );\n\treturn max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );\n}\nvec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {\n\tfloat x = dot( v1, v2 );\n\tfloat y = abs( x );\n\tfloat a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;\n\tfloat b = 3.4175940 + ( 4.1616724 + y ) * y;\n\tfloat v = a / b;\n\tfloat theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;\n\treturn cross( v1, v2 ) * theta_sintheta;\n}\nvec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {\n\tvec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];\n\tvec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];\n\tvec3 lightNormal = cross( v1, v2 );\n\tif( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );\n\tvec3 T1, T2;\n\tT1 = normalize( V - N * dot( V, N ) );\n\tT2 = - cross( N, T1 );\n\tmat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );\n\tvec3 coords[ 4 ];\n\tcoords[ 0 ] = mat * ( rectCoords[ 0 ] - P );\n\tcoords[ 1 ] = mat * ( rectCoords[ 1 ] - P );\n\tcoords[ 2 ] = mat * ( rectCoords[ 2 ] - P );\n\tcoords[ 3 ] = mat * ( rectCoords[ 3 ] - P );\n\tcoords[ 0 ] = normalize( coords[ 0 ] );\n\tcoords[ 1 ] = normalize( coords[ 1 ] );\n\tcoords[ 2 ] = normalize( coords[ 2 ] );\n\tcoords[ 3 ] = normalize( coords[ 3 ] );\n\tvec3 vectorFormFactor = vec3( 0.0 );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );\n\tfloat result = LTC_ClippedSphereFormFactor( vectorFormFactor );\n\treturn vec3( result );\n}\n#if defined( USE_SHEEN )\nfloat D_Charlie( float roughness, float dotNH ) {\n\tfloat alpha = pow2( roughness );\n\tfloat invAlpha = 1.0 / alpha;\n\tfloat cos2h = dotNH * dotNH;\n\tfloat sin2h = max( 1.0 - cos2h, 0.0078125 );\n\treturn ( 2.0 + invAlpha ) * pow( sin2h, invAlpha * 0.5 ) / ( 2.0 * PI );\n}\nfloat V_Neubelt( float dotNV, float dotNL ) {\n\treturn saturate( 1.0 / ( 4.0 * ( dotNL + dotNV - dotNL * dotNV ) ) );\n}\nvec3 BRDF_Sheen( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, vec3 sheenColor, const in float sheenRoughness ) {\n\tvec3 halfDir = normalize( lightDir + viewDir );\n\tfloat dotNL = saturate( dot( normal, lightDir ) );\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tfloat dotNH = saturate( dot( normal, halfDir ) );\n\tfloat D = D_Charlie( sheenRoughness, dotNH );\n\tfloat V = V_Neubelt( dotNV, dotNL );\n\treturn sheenColor * ( D * V );\n}\n#endif\nfloat IBLSheenBRDF( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tfloat r2 = roughness * roughness;\n\tfloat a = roughness < 0.25 ? -339.2 * r2 + 161.4 * roughness - 25.9 : -8.48 * r2 + 14.3 * roughness - 9.95;\n\tfloat b = roughness < 0.25 ? 44.0 * r2 - 23.7 * roughness + 3.26 : 1.97 * r2 - 3.27 * roughness + 0.72;\n\tfloat DG = exp( a * dotNV + b ) + ( roughness < 0.25 ? 0.0 : 0.1 * ( roughness - 0.25 ) );\n\treturn saturate( DG * RECIPROCAL_PI );\n}\nvec2 DFGApprox( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tconst vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\n\tconst vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\n\tvec4 r = roughness * c0 + c1;\n\tfloat a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\n\tvec2 fab = vec2( - 1.04, 1.04 ) * a004 + r.zw;\n\treturn fab;\n}\nvec3 EnvironmentBRDF( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness ) {\n\tvec2 fab = DFGApprox( normal, viewDir, roughness );\n\treturn specularColor * fab.x + specularF90 * fab.y;\n}\n#ifdef USE_IRIDESCENCE\nvoid computeMultiscatteringIridescence( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float iridescence, const in vec3 iridescenceF0, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {\n#else\nvoid computeMultiscattering( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {\n#endif\n\tvec2 fab = DFGApprox( normal, viewDir, roughness );\n\t#ifdef USE_IRIDESCENCE\n\t\tvec3 Fr = mix( specularColor, iridescenceF0, iridescence );\n\t#else\n\t\tvec3 Fr = specularColor;\n\t#endif\n\tvec3 FssEss = Fr * fab.x + specularF90 * fab.y;\n\tfloat Ess = fab.x + fab.y;\n\tfloat Ems = 1.0 - Ess;\n\tvec3 Favg = Fr + ( 1.0 - Fr ) * 0.047619;\tvec3 Fms = FssEss * Favg / ( 1.0 - Ems * Favg );\n\tsingleScatter += FssEss;\n\tmultiScatter += Fms * Ems;\n}\n#if NUM_RECT_AREA_LIGHTS > 0\n\tvoid RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\t\tvec3 normal = geometryNormal;\n\t\tvec3 viewDir = geometryViewDir;\n\t\tvec3 position = geometryPosition;\n\t\tvec3 lightPos = rectAreaLight.position;\n\t\tvec3 halfWidth = rectAreaLight.halfWidth;\n\t\tvec3 halfHeight = rectAreaLight.halfHeight;\n\t\tvec3 lightColor = rectAreaLight.color;\n\t\tfloat roughness = material.roughness;\n\t\tvec3 rectCoords[ 4 ];\n\t\trectCoords[ 0 ] = lightPos + halfWidth - halfHeight;\t\trectCoords[ 1 ] = lightPos - halfWidth - halfHeight;\n\t\trectCoords[ 2 ] = lightPos - halfWidth + halfHeight;\n\t\trectCoords[ 3 ] = lightPos + halfWidth + halfHeight;\n\t\tvec2 uv = LTC_Uv( normal, viewDir, roughness );\n\t\tvec4 t1 = texture2D( ltc_1, uv );\n\t\tvec4 t2 = texture2D( ltc_2, uv );\n\t\tmat3 mInv = mat3(\n\t\t\tvec3( t1.x, 0, t1.y ),\n\t\t\tvec3(    0, 1,    0 ),\n\t\t\tvec3( t1.z, 0, t1.w )\n\t\t);\n\t\tvec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );\n\t\treflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );\n\t\treflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );\n\t}\n#endif\nvoid RE_Direct_Physical( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\tfloat dotNL = saturate( dot( geometryNormal, directLight.direction ) );\n\tvec3 irradiance = dotNL * directLight.color;\n\t#ifdef USE_CLEARCOAT\n\t\tfloat dotNLcc = saturate( dot( geometryClearcoatNormal, directLight.direction ) );\n\t\tvec3 ccIrradiance = dotNLcc * directLight.color;\n\t\tclearcoatSpecularDirect += ccIrradiance * BRDF_GGX_Clearcoat( directLight.direction, geometryViewDir, geometryClearcoatNormal, material );\n\t#endif\n\t#ifdef USE_SHEEN\n\t\tsheenSpecularDirect += irradiance * BRDF_Sheen( directLight.direction, geometryViewDir, geometryNormal, material.sheenColor, material.sheenRoughness );\n\t#endif\n\treflectedLight.directSpecular += irradiance * BRDF_GGX( directLight.direction, geometryViewDir, geometryNormal, material );\n\treflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 irradiance, const in vec3 clearcoatRadiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight) {\n\t#ifdef USE_CLEARCOAT\n\t\tclearcoatSpecularIndirect += clearcoatRadiance * EnvironmentBRDF( geometryClearcoatNormal, geometryViewDir, material.clearcoatF0, material.clearcoatF90, material.clearcoatRoughness );\n\t#endif\n\t#ifdef USE_SHEEN\n\t\tsheenSpecularIndirect += irradiance * material.sheenColor * IBLSheenBRDF( geometryNormal, geometryViewDir, material.sheenRoughness );\n\t#endif\n\tvec3 singleScattering = vec3( 0.0 );\n\tvec3 multiScattering = vec3( 0.0 );\n\tvec3 cosineWeightedIrradiance = irradiance * RECIPROCAL_PI;\n\t#ifdef USE_IRIDESCENCE\n\t\tcomputeMultiscatteringIridescence( geometryNormal, geometryViewDir, material.specularColor, material.specularF90, material.iridescence, material.iridescenceFresnel, material.roughness, singleScattering, multiScattering );\n\t#else\n\t\tcomputeMultiscattering( geometryNormal, geometryViewDir, material.specularColor, material.specularF90, material.roughness, singleScattering, multiScattering );\n\t#endif\n\tvec3 totalScattering = singleScattering + multiScattering;\n\tvec3 diffuse = material.diffuseColor * ( 1.0 - max( max( totalScattering.r, totalScattering.g ), totalScattering.b ) );\n\treflectedLight.indirectSpecular += radiance * singleScattering;\n\treflectedLight.indirectSpecular += multiScattering * cosineWeightedIrradiance;\n\treflectedLight.indirectDiffuse += diffuse * cosineWeightedIrradiance;\n}\n#define RE_Direct\t\t\t\tRE_Direct_Physical\n#define RE_Direct_RectArea\t\tRE_Direct_RectArea_Physical\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Physical\n#define RE_IndirectSpecular\t\tRE_IndirectSpecular_Physical\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\n\treturn saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\n}";var lights_fragment_begin="\nvec3 geometryPosition = - vViewPosition;\nvec3 geometryNormal = normal;\nvec3 geometryViewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( vViewPosition );\nvec3 geometryClearcoatNormal = vec3( 0.0 );\n#ifdef USE_CLEARCOAT\n\tgeometryClearcoatNormal = clearcoatNormal;\n#endif\n#ifdef USE_IRIDESCENCE\n\tfloat dotNVi = saturate( dot( normal, geometryViewDir ) );\n\tif ( material.iridescenceThickness == 0.0 ) {\n\t\tmaterial.iridescence = 0.0;\n\t} else {\n\t\tmaterial.iridescence = saturate( material.iridescence );\n\t}\n\tif ( material.iridescence > 0.0 ) {\n\t\tmaterial.iridescenceFresnel = evalIridescence( 1.0, material.iridescenceIOR, dotNVi, material.iridescenceThickness, material.specularColor );\n\t\tmaterial.iridescenceF0 = Schlick_to_F0( material.iridescenceFresnel, 1.0, dotNVi );\n\t}\n#endif\nIncidentLight directLight;\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\n\tPointLight pointLight;\n\t#if defined( USE_SHADOWMAP ) && NUM_POINT_LIGHT_SHADOWS > 0\n\tPointLightShadow pointLightShadow;\n\t#endif\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tpointLight = pointLights[ i ];\n\t\tgetPointLightInfo( pointLight, geometryPosition, directLight );\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_POINT_LIGHT_SHADOWS )\n\t\tpointLightShadow = pointLightShadows[ i ];\n\t\tdirectLight.color *= ( directLight.visible && receiveShadow ) ? getPointShadow( pointShadowMap[ i ], pointLightShadow.shadowMapSize, pointLightShadow.shadowBias, pointLightShadow.shadowRadius, vPointShadowCoord[ i ], pointLightShadow.shadowCameraNear, pointLightShadow.shadowCameraFar ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\n\tSpotLight spotLight;\n\tvec4 spotColor;\n\tvec3 spotLightCoord;\n\tbool inSpotLightMap;\n\t#if defined( USE_SHADOWMAP ) && NUM_SPOT_LIGHT_SHADOWS > 0\n\tSpotLightShadow spotLightShadow;\n\t#endif\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tspotLight = spotLights[ i ];\n\t\tgetSpotLightInfo( spotLight, geometryPosition, directLight );\n\t\t#if ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS )\n\t\t#define SPOT_LIGHT_MAP_INDEX UNROLLED_LOOP_INDEX\n\t\t#elif ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\n\t\t#define SPOT_LIGHT_MAP_INDEX NUM_SPOT_LIGHT_MAPS\n\t\t#else\n\t\t#define SPOT_LIGHT_MAP_INDEX ( UNROLLED_LOOP_INDEX - NUM_SPOT_LIGHT_SHADOWS + NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS )\n\t\t#endif\n\t\t#if ( SPOT_LIGHT_MAP_INDEX < NUM_SPOT_LIGHT_MAPS )\n\t\t\tspotLightCoord = vSpotLightCoord[ i ].xyz / vSpotLightCoord[ i ].w;\n\t\t\tinSpotLightMap = all( lessThan( abs( spotLightCoord * 2. - 1. ), vec3( 1.0 ) ) );\n\t\t\tspotColor = texture2D( spotLightMap[ SPOT_LIGHT_MAP_INDEX ], spotLightCoord.xy );\n\t\t\tdirectLight.color = inSpotLightMap ? directLight.color * spotColor.rgb : directLight.color;\n\t\t#endif\n\t\t#undef SPOT_LIGHT_MAP_INDEX\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\n\t\tspotLightShadow = spotLightShadows[ i ];\n\t\tdirectLight.color *= ( directLight.visible && receiveShadow ) ? getShadow( spotShadowMap[ i ], spotLightShadow.shadowMapSize, spotLightShadow.shadowBias, spotLightShadow.shadowRadius, vSpotLightCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\n\tDirectionalLight directionalLight;\n\t#if defined( USE_SHADOWMAP ) && NUM_DIR_LIGHT_SHADOWS > 0\n\tDirectionalLightShadow directionalLightShadow;\n\t#endif\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tdirectionalLight = directionalLights[ i ];\n\t\tgetDirectionalLightInfo( directionalLight, directLight );\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_DIR_LIGHT_SHADOWS )\n\t\tdirectionalLightShadow = directionalLightShadows[ i ];\n\t\tdirectLight.color *= ( directLight.visible && receiveShadow ) ? getShadow( directionalShadowMap[ i ], directionalLightShadow.shadowMapSize, directionalLightShadow.shadowBias, directionalLightShadow.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )\n\tRectAreaLight rectAreaLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {\n\t\trectAreaLight = rectAreaLights[ i ];\n\t\tRE_Direct_RectArea( rectAreaLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if defined( RE_IndirectDiffuse )\n\tvec3 iblIrradiance = vec3( 0.0 );\n\tvec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\n\t#if defined( USE_LIGHT_PROBES )\n\t\tirradiance += getLightProbeIrradiance( lightProbe, geometryNormal );\n\t#endif\n\t#if ( NUM_HEMI_LIGHTS > 0 )\n\t\t#pragma unroll_loop_start\n\t\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n\t\t\tirradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometryNormal );\n\t\t}\n\t\t#pragma unroll_loop_end\n\t#endif\n#endif\n#if defined( RE_IndirectSpecular )\n\tvec3 radiance = vec3( 0.0 );\n\tvec3 clearcoatRadiance = vec3( 0.0 );\n#endif";var lights_fragment_maps="#if defined( RE_IndirectDiffuse )\n\t#ifdef USE_LIGHTMAP\n\t\tvec4 lightMapTexel = texture2D( lightMap, vLightMapUv );\n\t\tvec3 lightMapIrradiance = lightMapTexel.rgb * lightMapIntensity;\n\t\tirradiance += lightMapIrradiance;\n\t#endif\n\t#if defined( USE_ENVMAP ) && defined( STANDARD ) && defined( ENVMAP_TYPE_CUBE_UV )\n\t\tiblIrradiance += getIBLIrradiance( geometryNormal );\n\t#endif\n#endif\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\n\t#ifdef USE_ANISOTROPY\n\t\tradiance += getIBLAnisotropyRadiance( geometryViewDir, geometryNormal, material.roughness, material.anisotropyB, material.anisotropy );\n\t#else\n\t\tradiance += getIBLRadiance( geometryViewDir, geometryNormal, material.roughness );\n\t#endif\n\t#ifdef USE_CLEARCOAT\n\t\tclearcoatRadiance += getIBLRadiance( geometryViewDir, geometryClearcoatNormal, material.clearcoatRoughness );\n\t#endif\n#endif";var lights_fragment_end="#if defined( RE_IndirectDiffuse )\n\tRE_IndirectDiffuse( irradiance, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );\n#endif\n#if defined( RE_IndirectSpecular )\n\tRE_IndirectSpecular( radiance, iblIrradiance, clearcoatRadiance, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );\n#endif";var logdepthbuf_fragment="#if defined( USE_LOGDEPTHBUF )\n\tgl_FragDepth = vIsPerspective == 0.0 ? gl_FragCoord.z : log2( vFragDepth ) * logDepthBufFC * 0.5;\n#endif";var logdepthbuf_pars_fragment="#if defined( USE_LOGDEPTHBUF )\n\tuniform float logDepthBufFC;\n\tvarying float vFragDepth;\n\tvarying float vIsPerspective;\n#endif";var logdepthbuf_pars_vertex="#ifdef USE_LOGDEPTHBUF\n\tvarying float vFragDepth;\n\tvarying float vIsPerspective;\n#endif";var logdepthbuf_vertex="#ifdef USE_LOGDEPTHBUF\n\tvFragDepth = 1.0 + gl_Position.w;\n\tvIsPerspective = float( isPerspectiveMatrix( projectionMatrix ) );\n#endif";var map_fragment="#ifdef USE_MAP\n\tvec4 sampledDiffuseColor = texture2D( map, vMapUv );\n\t#ifdef DECODE_VIDEO_TEXTURE\n\t\tsampledDiffuseColor = vec4( mix( pow( sampledDiffuseColor.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), sampledDiffuseColor.rgb * 0.0773993808, vec3( lessThanEqual( sampledDiffuseColor.rgb, vec3( 0.04045 ) ) ) ), sampledDiffuseColor.w );\n\t\n\t#endif\n\tdiffuseColor *= sampledDiffuseColor;\n#endif";var map_pars_fragment="#ifdef USE_MAP\n\tuniform sampler2D map;\n#endif";var map_particle_fragment="#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\n\t#if defined( USE_POINTS_UV )\n\t\tvec2 uv = vUv;\n\t#else\n\t\tvec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;\n\t#endif\n#endif\n#ifdef USE_MAP\n\tdiffuseColor *= texture2D( map, uv );\n#endif\n#ifdef USE_ALPHAMAP\n\tdiffuseColor.a *= texture2D( alphaMap, uv ).g;\n#endif";var map_particle_pars_fragment="#if defined( USE_POINTS_UV )\n\tvarying vec2 vUv;\n#else\n\t#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\n\t\tuniform mat3 uvTransform;\n\t#endif\n#endif\n#ifdef USE_MAP\n\tuniform sampler2D map;\n#endif\n#ifdef USE_ALPHAMAP\n\tuniform sampler2D alphaMap;\n#endif";var metalnessmap_fragment="float metalnessFactor = metalness;\n#ifdef USE_METALNESSMAP\n\tvec4 texelMetalness = texture2D( metalnessMap, vMetalnessMapUv );\n\tmetalnessFactor *= texelMetalness.b;\n#endif";var metalnessmap_pars_fragment="#ifdef USE_METALNESSMAP\n\tuniform sampler2D metalnessMap;\n#endif";var morphinstance_vertex="#ifdef USE_INSTANCING_MORPH\n\tfloat morphTargetInfluences[MORPHTARGETS_COUNT];\n\tfloat morphTargetBaseInfluence = texelFetch( morphTexture, ivec2( 0, gl_InstanceID ), 0 ).r;\n\tfor ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\n\t\tmorphTargetInfluences[i] =  texelFetch( morphTexture, ivec2( i + 1, gl_InstanceID ), 0 ).r;\n\t}\n#endif";var morphcolor_vertex="#if defined( USE_MORPHCOLORS ) && defined( MORPHTARGETS_TEXTURE )\n\tvColor *= morphTargetBaseInfluence;\n\tfor ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\n\t\t#if defined( USE_COLOR_ALPHA )\n\t\t\tif ( morphTargetInfluences[ i ] != 0.0 ) vColor += getMorph( gl_VertexID, i, 2 ) * morphTargetInfluences[ i ];\n\t\t#elif defined( USE_COLOR )\n\t\t\tif ( morphTargetInfluences[ i ] != 0.0 ) vColor += getMorph( gl_VertexID, i, 2 ).rgb * morphTargetInfluences[ i ];\n\t\t#endif\n\t}\n#endif";var morphnormal_vertex="#ifdef USE_MORPHNORMALS\n\tobjectNormal *= morphTargetBaseInfluence;\n\t#ifdef MORPHTARGETS_TEXTURE\n\t\tfor ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\n\t\t\tif ( morphTargetInfluences[ i ] != 0.0 ) objectNormal += getMorph( gl_VertexID, i, 1 ).xyz * morphTargetInfluences[ i ];\n\t\t}\n\t#else\n\t\tobjectNormal += morphNormal0 * morphTargetInfluences[ 0 ];\n\t\tobjectNormal += morphNormal1 * morphTargetInfluences[ 1 ];\n\t\tobjectNormal += morphNormal2 * morphTargetInfluences[ 2 ];\n\t\tobjectNormal += morphNormal3 * morphTargetInfluences[ 3 ];\n\t#endif\n#endif";var morphtarget_pars_vertex="#ifdef USE_MORPHTARGETS\n\t#ifndef USE_INSTANCING_MORPH\n\t\tuniform float morphTargetBaseInfluence;\n\t#endif\n\t#ifdef MORPHTARGETS_TEXTURE\n\t\t#ifndef USE_INSTANCING_MORPH\n\t\t\tuniform float morphTargetInfluences[ MORPHTARGETS_COUNT ];\n\t\t#endif\n\t\tuniform sampler2DArray morphTargetsTexture;\n\t\tuniform ivec2 morphTargetsTextureSize;\n\t\tvec4 getMorph( const in int vertexIndex, const in int morphTargetIndex, const in int offset ) {\n\t\t\tint texelIndex = vertexIndex * MORPHTARGETS_TEXTURE_STRIDE + offset;\n\t\t\tint y = texelIndex / morphTargetsTextureSize.x;\n\t\t\tint x = texelIndex - y * morphTargetsTextureSize.x;\n\t\t\tivec3 morphUV = ivec3( x, y, morphTargetIndex );\n\t\t\treturn texelFetch( morphTargetsTexture, morphUV, 0 );\n\t\t}\n\t#else\n\t\t#ifndef USE_MORPHNORMALS\n\t\t\tuniform float morphTargetInfluences[ 8 ];\n\t\t#else\n\t\t\tuniform float morphTargetInfluences[ 4 ];\n\t\t#endif\n\t#endif\n#endif";var morphtarget_vertex="#ifdef USE_MORPHTARGETS\n\ttransformed *= morphTargetBaseInfluence;\n\t#ifdef MORPHTARGETS_TEXTURE\n\t\tfor ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\n\t\t\tif ( morphTargetInfluences[ i ] != 0.0 ) transformed += getMorph( gl_VertexID, i, 0 ).xyz * morphTargetInfluences[ i ];\n\t\t}\n\t#else\n\t\ttransformed += morphTarget0 * morphTargetInfluences[ 0 ];\n\t\ttransformed += morphTarget1 * morphTargetInfluences[ 1 ];\n\t\ttransformed += morphTarget2 * morphTargetInfluences[ 2 ];\n\t\ttransformed += morphTarget3 * morphTargetInfluences[ 3 ];\n\t\t#ifndef USE_MORPHNORMALS\n\t\t\ttransformed += morphTarget4 * morphTargetInfluences[ 4 ];\n\t\t\ttransformed += morphTarget5 * morphTargetInfluences[ 5 ];\n\t\t\ttransformed += morphTarget6 * morphTargetInfluences[ 6 ];\n\t\t\ttransformed += morphTarget7 * morphTargetInfluences[ 7 ];\n\t\t#endif\n\t#endif\n#endif";var normal_fragment_begin="float faceDirection = gl_FrontFacing ? 1.0 : - 1.0;\n#ifdef FLAT_SHADED\n\tvec3 fdx = dFdx( vViewPosition );\n\tvec3 fdy = dFdy( vViewPosition );\n\tvec3 normal = normalize( cross( fdx, fdy ) );\n#else\n\tvec3 normal = normalize( vNormal );\n\t#ifdef DOUBLE_SIDED\n\t\tnormal *= faceDirection;\n\t#endif\n#endif\n#if defined( USE_NORMALMAP_TANGENTSPACE ) || defined( USE_CLEARCOAT_NORMALMAP ) || defined( USE_ANISOTROPY )\n\t#ifdef USE_TANGENT\n\t\tmat3 tbn = mat3( normalize( vTangent ), normalize( vBitangent ), normal );\n\t#else\n\t\tmat3 tbn = getTangentFrame( - vViewPosition, normal,\n\t\t#if defined( USE_NORMALMAP )\n\t\t\tvNormalMapUv\n\t\t#elif defined( USE_CLEARCOAT_NORMALMAP )\n\t\t\tvClearcoatNormalMapUv\n\t\t#else\n\t\t\tvUv\n\t\t#endif\n\t\t);\n\t#endif\n\t#if defined( DOUBLE_SIDED ) && ! defined( FLAT_SHADED )\n\t\ttbn[0] *= faceDirection;\n\t\ttbn[1] *= faceDirection;\n\t#endif\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n\t#ifdef USE_TANGENT\n\t\tmat3 tbn2 = mat3( normalize( vTangent ), normalize( vBitangent ), normal );\n\t#else\n\t\tmat3 tbn2 = getTangentFrame( - vViewPosition, normal, vClearcoatNormalMapUv );\n\t#endif\n\t#if defined( DOUBLE_SIDED ) && ! defined( FLAT_SHADED )\n\t\ttbn2[0] *= faceDirection;\n\t\ttbn2[1] *= faceDirection;\n\t#endif\n#endif\nvec3 nonPerturbedNormal = normal;";var normal_fragment_maps="#ifdef USE_NORMALMAP_OBJECTSPACE\n\tnormal = texture2D( normalMap, vNormalMapUv ).xyz * 2.0 - 1.0;\n\t#ifdef FLIP_SIDED\n\t\tnormal = - normal;\n\t#endif\n\t#ifdef DOUBLE_SIDED\n\t\tnormal = normal * faceDirection;\n\t#endif\n\tnormal = normalize( normalMatrix * normal );\n#elif defined( USE_NORMALMAP_TANGENTSPACE )\n\tvec3 mapN = texture2D( normalMap, vNormalMapUv ).xyz * 2.0 - 1.0;\n\tmapN.xy *= normalScale;\n\tnormal = normalize( tbn * mapN );\n#elif defined( USE_BUMPMAP )\n\tnormal = perturbNormalArb( - vViewPosition, normal, dHdxy_fwd(), faceDirection );\n#endif";var normal_pars_fragment="#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif";var normal_pars_vertex="#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif";var normal_vertex="#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n\t#ifdef USE_TANGENT\n\t\tvTangent = normalize( transformedTangent );\n\t\tvBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );\n\t#endif\n#endif";var normalmap_pars_fragment="#ifdef USE_NORMALMAP\n\tuniform sampler2D normalMap;\n\tuniform vec2 normalScale;\n#endif\n#ifdef USE_NORMALMAP_OBJECTSPACE\n\tuniform mat3 normalMatrix;\n#endif\n#if ! defined ( USE_TANGENT ) && ( defined ( USE_NORMALMAP_TANGENTSPACE ) || defined ( USE_CLEARCOAT_NORMALMAP ) || defined( USE_ANISOTROPY ) )\n\tmat3 getTangentFrame( vec3 eye_pos, vec3 surf_norm, vec2 uv ) {\n\t\tvec3 q0 = dFdx( eye_pos.xyz );\n\t\tvec3 q1 = dFdy( eye_pos.xyz );\n\t\tvec2 st0 = dFdx( uv.st );\n\t\tvec2 st1 = dFdy( uv.st );\n\t\tvec3 N = surf_norm;\n\t\tvec3 q1perp = cross( q1, N );\n\t\tvec3 q0perp = cross( N, q0 );\n\t\tvec3 T = q1perp * st0.x + q0perp * st1.x;\n\t\tvec3 B = q1perp * st0.y + q0perp * st1.y;\n\t\tfloat det = max( dot( T, T ), dot( B, B ) );\n\t\tfloat scale = ( det == 0.0 ) ? 0.0 : inversesqrt( det );\n\t\treturn mat3( T * scale, B * scale, N );\n\t}\n#endif";var clearcoat_normal_fragment_begin="#ifdef USE_CLEARCOAT\n\tvec3 clearcoatNormal = nonPerturbedNormal;\n#endif";var clearcoat_normal_fragment_maps="#ifdef USE_CLEARCOAT_NORMALMAP\n\tvec3 clearcoatMapN = texture2D( clearcoatNormalMap, vClearcoatNormalMapUv ).xyz * 2.0 - 1.0;\n\tclearcoatMapN.xy *= clearcoatNormalScale;\n\tclearcoatNormal = normalize( tbn2 * clearcoatMapN );\n#endif";var clearcoat_pars_fragment="#ifdef USE_CLEARCOATMAP\n\tuniform sampler2D clearcoatMap;\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n\tuniform sampler2D clearcoatNormalMap;\n\tuniform vec2 clearcoatNormalScale;\n#endif\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n\tuniform sampler2D clearcoatRoughnessMap;\n#endif";var iridescence_pars_fragment="#ifdef USE_IRIDESCENCEMAP\n\tuniform sampler2D iridescenceMap;\n#endif\n#ifdef USE_IRIDESCENCE_THICKNESSMAP\n\tuniform sampler2D iridescenceThicknessMap;\n#endif";var opaque_fragment="#ifdef OPAQUE\ndiffuseColor.a = 1.0;\n#endif\n#ifdef USE_TRANSMISSION\ndiffuseColor.a *= material.transmissionAlpha;\n#endif\ngl_FragColor = vec4( outgoingLight, diffuseColor.a );";var packing="vec3 packNormalToRGB( const in vec3 normal ) {\n\treturn normalize( normal ) * 0.5 + 0.5;\n}\nvec3 unpackRGBToNormal( const in vec3 rgb ) {\n\treturn 2.0 * rgb.xyz - 1.0;\n}\nconst float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;\nconst vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256., 256. );\nconst vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );\nconst float ShiftRight8 = 1. / 256.;\nvec4 packDepthToRGBA( const in float v ) {\n\tvec4 r = vec4( fract( v * PackFactors ), v );\n\tr.yzw -= r.xyz * ShiftRight8;\treturn r * PackUpscale;\n}\nfloat unpackRGBAToDepth( const in vec4 v ) {\n\treturn dot( v, UnpackFactors );\n}\nvec2 packDepthToRG( in highp float v ) {\n\treturn packDepthToRGBA( v ).yx;\n}\nfloat unpackRGToDepth( const in highp vec2 v ) {\n\treturn unpackRGBAToDepth( vec4( v.xy, 0.0, 0.0 ) );\n}\nvec4 pack2HalfToRGBA( vec2 v ) {\n\tvec4 r = vec4( v.x, fract( v.x * 255.0 ), v.y, fract( v.y * 255.0 ) );\n\treturn vec4( r.x - r.y / 255.0, r.y, r.z - r.w / 255.0, r.w );\n}\nvec2 unpackRGBATo2Half( vec4 v ) {\n\treturn vec2( v.x + ( v.y / 255.0 ), v.z + ( v.w / 255.0 ) );\n}\nfloat viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {\n\treturn ( viewZ + near ) / ( near - far );\n}\nfloat orthographicDepthToViewZ( const in float depth, const in float near, const in float far ) {\n\treturn depth * ( near - far ) - near;\n}\nfloat viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {\n\treturn ( ( near + viewZ ) * far ) / ( ( far - near ) * viewZ );\n}\nfloat perspectiveDepthToViewZ( const in float depth, const in float near, const in float far ) {\n\treturn ( near * far ) / ( ( far - near ) * depth - far );\n}";var premultiplied_alpha_fragment="#ifdef PREMULTIPLIED_ALPHA\n\tgl_FragColor.rgb *= gl_FragColor.a;\n#endif";var project_vertex="vec4 mvPosition = vec4( transformed, 1.0 );\n#ifdef USE_BATCHING\n\tmvPosition = batchingMatrix * mvPosition;\n#endif\n#ifdef USE_INSTANCING\n\tmvPosition = instanceMatrix * mvPosition;\n#endif\nmvPosition = modelViewMatrix * mvPosition;\ngl_Position = projectionMatrix * mvPosition;";var dithering_fragment="#ifdef DITHERING\n\tgl_FragColor.rgb = dithering( gl_FragColor.rgb );\n#endif";var dithering_pars_fragment="#ifdef DITHERING\n\tvec3 dithering( vec3 color ) {\n\t\tfloat grid_position = rand( gl_FragCoord.xy );\n\t\tvec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );\n\t\tdither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );\n\t\treturn color + dither_shift_RGB;\n\t}\n#endif";var roughnessmap_fragment="float roughnessFactor = roughness;\n#ifdef USE_ROUGHNESSMAP\n\tvec4 texelRoughness = texture2D( roughnessMap, vRoughnessMapUv );\n\troughnessFactor *= texelRoughness.g;\n#endif";var roughnessmap_pars_fragment="#ifdef USE_ROUGHNESSMAP\n\tuniform sampler2D roughnessMap;\n#endif";var shadowmap_pars_fragment="#if NUM_SPOT_LIGHT_COORDS > 0\n\tvarying vec4 vSpotLightCoord[ NUM_SPOT_LIGHT_COORDS ];\n#endif\n#if NUM_SPOT_LIGHT_MAPS > 0\n\tuniform sampler2D spotLightMap[ NUM_SPOT_LIGHT_MAPS ];\n#endif\n#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\t\tuniform sampler2D directionalShadowMap[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tstruct DirectionalLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\t\tuniform sampler2D spotShadowMap[ NUM_SPOT_LIGHT_SHADOWS ];\n\t\tstruct SpotLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\t\tuniform sampler2D pointShadowMap[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tstruct PointLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t\tfloat shadowCameraNear;\n\t\t\tfloat shadowCameraFar;\n\t\t};\n\t\tuniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\n\t#endif\n\tfloat texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\n\t\treturn step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\n\t}\n\tvec2 texture2DDistribution( sampler2D shadow, vec2 uv ) {\n\t\treturn unpackRGBATo2Half( texture2D( shadow, uv ) );\n\t}\n\tfloat VSMShadow (sampler2D shadow, vec2 uv, float compare ){\n\t\tfloat occlusion = 1.0;\n\t\tvec2 distribution = texture2DDistribution( shadow, uv );\n\t\tfloat hard_shadow = step( compare , distribution.x );\n\t\tif (hard_shadow != 1.0 ) {\n\t\t\tfloat distance = compare - distribution.x ;\n\t\t\tfloat variance = max( 0.00000, distribution.y * distribution.y );\n\t\t\tfloat softness_probability = variance / (variance + distance * distance );\t\t\tsoftness_probability = clamp( ( softness_probability - 0.3 ) / ( 0.95 - 0.3 ), 0.0, 1.0 );\t\t\tocclusion = clamp( max( hard_shadow, softness_probability ), 0.0, 1.0 );\n\t\t}\n\t\treturn occlusion;\n\t}\n\tfloat getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\n\t\tfloat shadow = 1.0;\n\t\tshadowCoord.xyz /= shadowCoord.w;\n\t\tshadowCoord.z += shadowBias;\n\t\tbool inFrustum = shadowCoord.x >= 0.0 && shadowCoord.x <= 1.0 && shadowCoord.y >= 0.0 && shadowCoord.y <= 1.0;\n\t\tbool frustumTest = inFrustum && shadowCoord.z <= 1.0;\n\t\tif ( frustumTest ) {\n\t\t#if defined( SHADOWMAP_TYPE_PCF )\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx0 = - texelSize.x * shadowRadius;\n\t\t\tfloat dy0 = - texelSize.y * shadowRadius;\n\t\t\tfloat dx1 = + texelSize.x * shadowRadius;\n\t\t\tfloat dy1 = + texelSize.y * shadowRadius;\n\t\t\tfloat dx2 = dx0 / 2.0;\n\t\t\tfloat dy2 = dy0 / 2.0;\n\t\t\tfloat dx3 = dx1 / 2.0;\n\t\t\tfloat dy3 = dy1 / 2.0;\n\t\t\tshadow = (\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\n\t\t\t) * ( 1.0 / 17.0 );\n\t\t#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx = texelSize.x;\n\t\t\tfloat dy = texelSize.y;\n\t\t\tvec2 uv = shadowCoord.xy;\n\t\t\tvec2 f = fract( uv * shadowMapSize + 0.5 );\n\t\t\tuv -= f * texelSize;\n\t\t\tshadow = (\n\t\t\t\ttexture2DCompare( shadowMap, uv, shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, uv + vec2( dx, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, uv + vec2( 0.0, dy ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, uv + texelSize, shadowCoord.z ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( -dx, 0.0 ), shadowCoord.z ),\n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 0.0 ), shadowCoord.z ),\n\t\t\t\t\t f.x ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( -dx, dy ), shadowCoord.z ),\n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, dy ), shadowCoord.z ),\n\t\t\t\t\t f.x ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( 0.0, -dy ), shadowCoord.z ),\n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( 0.0, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t f.y ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( dx, -dy ), shadowCoord.z ),\n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( dx, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t f.y ) +\n\t\t\t\tmix( mix( texture2DCompare( shadowMap, uv + vec2( -dx, -dy ), shadowCoord.z ),\n\t\t\t\t\t\t  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, -dy ), shadowCoord.z ),\n\t\t\t\t\t\t  f.x ),\n\t\t\t\t\t mix( texture2DCompare( shadowMap, uv + vec2( -dx, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t\t  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t\t  f.x ),\n\t\t\t\t\t f.y )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#elif defined( SHADOWMAP_TYPE_VSM )\n\t\t\tshadow = VSMShadow( shadowMap, shadowCoord.xy, shadowCoord.z );\n\t\t#else\n\t\t\tshadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\n\t\t#endif\n\t\t}\n\t\treturn shadow;\n\t}\n\tvec2 cubeToUV( vec3 v, float texelSizeY ) {\n\t\tvec3 absV = abs( v );\n\t\tfloat scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\n\t\tabsV *= scaleToCube;\n\t\tv *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\n\t\tvec2 planar = v.xy;\n\t\tfloat almostATexel = 1.5 * texelSizeY;\n\t\tfloat almostOne = 1.0 - almostATexel;\n\t\tif ( absV.z >= almostOne ) {\n\t\t\tif ( v.z > 0.0 )\n\t\t\t\tplanar.x = 4.0 - v.x;\n\t\t} else if ( absV.x >= almostOne ) {\n\t\t\tfloat signX = sign( v.x );\n\t\t\tplanar.x = v.z * signX + 2.0 * signX;\n\t\t} else if ( absV.y >= almostOne ) {\n\t\t\tfloat signY = sign( v.y );\n\t\t\tplanar.x = v.x + 2.0 * signY + 2.0;\n\t\t\tplanar.y = v.z * signY - 2.0;\n\t\t}\n\t\treturn vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\n\t}\n\tfloat getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {\n\t\tfloat shadow = 1.0;\n\t\tvec3 lightToPosition = shadowCoord.xyz;\n\t\t\n\t\tfloat lightToPositionLength = length( lightToPosition );\n\t\tif ( lightToPositionLength - shadowCameraFar <= 0.0 && lightToPositionLength - shadowCameraNear >= 0.0 ) {\n\t\t\tfloat dp = ( lightToPositionLength - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );\t\t\tdp += shadowBias;\n\t\t\tvec3 bd3D = normalize( lightToPosition );\n\t\t\tvec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\n\t\t\t#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT ) || defined( SHADOWMAP_TYPE_VSM )\n\t\t\t\tvec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\n\t\t\t\tshadow = (\n\t\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\n\t\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\n\t\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\n\t\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\n\t\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\n\t\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\n\t\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\n\t\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\n\t\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\n\t\t\t\t) * ( 1.0 / 9.0 );\n\t\t\t#else\n\t\t\t\tshadow = texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\n\t\t\t#endif\n\t\t}\n\t\treturn shadow;\n\t}\n#endif";var shadowmap_pars_vertex="#if NUM_SPOT_LIGHT_COORDS > 0\n\tuniform mat4 spotLightMatrix[ NUM_SPOT_LIGHT_COORDS ];\n\tvarying vec4 vSpotLightCoord[ NUM_SPOT_LIGHT_COORDS ];\n#endif\n#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\t\tuniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tstruct DirectionalLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\t\tstruct SpotLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\t\tuniform mat4 pointShadowMatrix[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tstruct PointLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t\tfloat shadowCameraNear;\n\t\t\tfloat shadowCameraFar;\n\t\t};\n\t\tuniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\n\t#endif\n#endif";var shadowmap_vertex="#if ( defined( USE_SHADOWMAP ) && ( NUM_DIR_LIGHT_SHADOWS > 0 || NUM_POINT_LIGHT_SHADOWS > 0 ) ) || ( NUM_SPOT_LIGHT_COORDS > 0 )\n\tvec3 shadowWorldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n\tvec4 shadowWorldPosition;\n#endif\n#if defined( USE_SHADOWMAP )\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\t\t#pragma unroll_loop_start\n\t\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\n\t\t\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * directionalLightShadows[ i ].shadowNormalBias, 0 );\n\t\t\tvDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * shadowWorldPosition;\n\t\t}\n\t\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\t\t#pragma unroll_loop_start\n\t\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\n\t\t\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * pointLightShadows[ i ].shadowNormalBias, 0 );\n\t\t\tvPointShadowCoord[ i ] = pointShadowMatrix[ i ] * shadowWorldPosition;\n\t\t}\n\t\t#pragma unroll_loop_end\n\t#endif\n#endif\n#if NUM_SPOT_LIGHT_COORDS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHT_COORDS; i ++ ) {\n\t\tshadowWorldPosition = worldPosition;\n\t\t#if ( defined( USE_SHADOWMAP ) && UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\n\t\t\tshadowWorldPosition.xyz += shadowWorldNormal * spotLightShadows[ i ].shadowNormalBias;\n\t\t#endif\n\t\tvSpotLightCoord[ i ] = spotLightMatrix[ i ] * shadowWorldPosition;\n\t}\n\t#pragma unroll_loop_end\n#endif";var shadowmask_pars_fragment="float getShadowMask() {\n\tfloat shadow = 1.0;\n\t#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\tDirectionalLightShadow directionalLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\n\t\tdirectionalLight = directionalLightShadows[ i ];\n\t\tshadow *= receiveShadow ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\tSpotLightShadow spotLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\n\t\tspotLight = spotLightShadows[ i ];\n\t\tshadow *= receiveShadow ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotLightCoord[ i ] ) : 1.0;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\tPointLightShadow pointLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\n\t\tpointLight = pointLightShadows[ i ];\n\t\tshadow *= receiveShadow ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#endif\n\treturn shadow;\n}";var skinbase_vertex="#ifdef USE_SKINNING\n\tmat4 boneMatX = getBoneMatrix( skinIndex.x );\n\tmat4 boneMatY = getBoneMatrix( skinIndex.y );\n\tmat4 boneMatZ = getBoneMatrix( skinIndex.z );\n\tmat4 boneMatW = getBoneMatrix( skinIndex.w );\n#endif";var skinning_pars_vertex="#ifdef USE_SKINNING\n\tuniform mat4 bindMatrix;\n\tuniform mat4 bindMatrixInverse;\n\tuniform highp sampler2D boneTexture;\n\tmat4 getBoneMatrix( const in float i ) {\n\t\tint size = textureSize( boneTexture, 0 ).x;\n\t\tint j = int( i ) * 4;\n\t\tint x = j % size;\n\t\tint y = j / size;\n\t\tvec4 v1 = texelFetch( boneTexture, ivec2( x, y ), 0 );\n\t\tvec4 v2 = texelFetch( boneTexture, ivec2( x + 1, y ), 0 );\n\t\tvec4 v3 = texelFetch( boneTexture, ivec2( x + 2, y ), 0 );\n\t\tvec4 v4 = texelFetch( boneTexture, ivec2( x + 3, y ), 0 );\n\t\treturn mat4( v1, v2, v3, v4 );\n\t}\n#endif";var skinning_vertex="#ifdef USE_SKINNING\n\tvec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\n\tvec4 skinned = vec4( 0.0 );\n\tskinned += boneMatX * skinVertex * skinWeight.x;\n\tskinned += boneMatY * skinVertex * skinWeight.y;\n\tskinned += boneMatZ * skinVertex * skinWeight.z;\n\tskinned += boneMatW * skinVertex * skinWeight.w;\n\ttransformed = ( bindMatrixInverse * skinned ).xyz;\n#endif";var skinnormal_vertex="#ifdef USE_SKINNING\n\tmat4 skinMatrix = mat4( 0.0 );\n\tskinMatrix += skinWeight.x * boneMatX;\n\tskinMatrix += skinWeight.y * boneMatY;\n\tskinMatrix += skinWeight.z * boneMatZ;\n\tskinMatrix += skinWeight.w * boneMatW;\n\tskinMatrix = bindMatrixInverse * skinMatrix * bindMatrix;\n\tobjectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\n\t#ifdef USE_TANGENT\n\t\tobjectTangent = vec4( skinMatrix * vec4( objectTangent, 0.0 ) ).xyz;\n\t#endif\n#endif";var specularmap_fragment="float specularStrength;\n#ifdef USE_SPECULARMAP\n\tvec4 texelSpecular = texture2D( specularMap, vSpecularMapUv );\n\tspecularStrength = texelSpecular.r;\n#else\n\tspecularStrength = 1.0;\n#endif";var specularmap_pars_fragment="#ifdef USE_SPECULARMAP\n\tuniform sampler2D specularMap;\n#endif";var tonemapping_fragment="#if defined( TONE_MAPPING )\n\tgl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\n#endif";var tonemapping_pars_fragment="#ifndef saturate\n#define saturate( a ) clamp( a, 0.0, 1.0 )\n#endif\nuniform float toneMappingExposure;\nvec3 LinearToneMapping( vec3 color ) {\n\treturn saturate( toneMappingExposure * color );\n}\nvec3 ReinhardToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\treturn saturate( color / ( vec3( 1.0 ) + color ) );\n}\nvec3 OptimizedCineonToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\tcolor = max( vec3( 0.0 ), color - 0.004 );\n\treturn pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\n}\nvec3 RRTAndODTFit( vec3 v ) {\n\tvec3 a = v * ( v + 0.0245786 ) - 0.000090537;\n\tvec3 b = v * ( 0.983729 * v + 0.4329510 ) + 0.238081;\n\treturn a / b;\n}\nvec3 ACESFilmicToneMapping( vec3 color ) {\n\tconst mat3 ACESInputMat = mat3(\n\t\tvec3( 0.59719, 0.07600, 0.02840 ),\t\tvec3( 0.35458, 0.90834, 0.13383 ),\n\t\tvec3( 0.04823, 0.01566, 0.83777 )\n\t);\n\tconst mat3 ACESOutputMat = mat3(\n\t\tvec3(  1.60475, -0.10208, -0.00327 ),\t\tvec3( -0.53108,  1.10813, -0.07276 ),\n\t\tvec3( -0.07367, -0.00605,  1.07602 )\n\t);\n\tcolor *= toneMappingExposure / 0.6;\n\tcolor = ACESInputMat * color;\n\tcolor = RRTAndODTFit( color );\n\tcolor = ACESOutputMat * color;\n\treturn saturate( color );\n}\nconst mat3 LINEAR_REC2020_TO_LINEAR_SRGB = mat3(\n\tvec3( 1.6605, - 0.1246, - 0.0182 ),\n\tvec3( - 0.5876, 1.1329, - 0.1006 ),\n\tvec3( - 0.0728, - 0.0083, 1.1187 )\n);\nconst mat3 LINEAR_SRGB_TO_LINEAR_REC2020 = mat3(\n\tvec3( 0.6274, 0.0691, 0.0164 ),\n\tvec3( 0.3293, 0.9195, 0.0880 ),\n\tvec3( 0.0433, 0.0113, 0.8956 )\n);\nvec3 agxDefaultContrastApprox( vec3 x ) {\n\tvec3 x2 = x * x;\n\tvec3 x4 = x2 * x2;\n\treturn + 15.5 * x4 * x2\n\t\t- 40.14 * x4 * x\n\t\t+ 31.96 * x4\n\t\t- 6.868 * x2 * x\n\t\t+ 0.4298 * x2\n\t\t+ 0.1191 * x\n\t\t- 0.00232;\n}\nvec3 AgXToneMapping( vec3 color ) {\n\tconst mat3 AgXInsetMatrix = mat3(\n\t\tvec3( 0.856627153315983, 0.137318972929847, 0.11189821299995 ),\n\t\tvec3( 0.0951212405381588, 0.761241990602591, 0.0767994186031903 ),\n\t\tvec3( 0.0482516061458583, 0.101439036467562, 0.811302368396859 )\n\t);\n\tconst mat3 AgXOutsetMatrix = mat3(\n\t\tvec3( 1.1271005818144368, - 0.1413297634984383, - 0.14132976349843826 ),\n\t\tvec3( - 0.11060664309660323, 1.157823702216272, - 0.11060664309660294 ),\n\t\tvec3( - 0.016493938717834573, - 0.016493938717834257, 1.2519364065950405 )\n\t);\n\tconst float AgxMinEv = - 12.47393;\tconst float AgxMaxEv = 4.026069;\n\tcolor *= toneMappingExposure;\n\tcolor = LINEAR_SRGB_TO_LINEAR_REC2020 * color;\n\tcolor = AgXInsetMatrix * color;\n\tcolor = max( color, 1e-10 );\tcolor = log2( color );\n\tcolor = ( color - AgxMinEv ) / ( AgxMaxEv - AgxMinEv );\n\tcolor = clamp( color, 0.0, 1.0 );\n\tcolor = agxDefaultContrastApprox( color );\n\tcolor = AgXOutsetMatrix * color;\n\tcolor = pow( max( vec3( 0.0 ), color ), vec3( 2.2 ) );\n\tcolor = LINEAR_REC2020_TO_LINEAR_SRGB * color;\n\tcolor = clamp( color, 0.0, 1.0 );\n\treturn color;\n}\nvec3 NeutralToneMapping( vec3 color ) {\n\tconst float StartCompression = 0.8 - 0.04;\n\tconst float Desaturation = 0.15;\n\tcolor *= toneMappingExposure;\n\tfloat x = min( color.r, min( color.g, color.b ) );\n\tfloat offset = x < 0.08 ? x - 6.25 * x * x : 0.04;\n\tcolor -= offset;\n\tfloat peak = max( color.r, max( color.g, color.b ) );\n\tif ( peak < StartCompression ) return color;\n\tfloat d = 1. - StartCompression;\n\tfloat newPeak = 1. - d * d / ( peak + d - StartCompression );\n\tcolor *= newPeak / peak;\n\tfloat g = 1. - 1. / ( Desaturation * ( peak - newPeak ) + 1. );\n\treturn mix( color, vec3( newPeak ), g );\n}\nvec3 CustomToneMapping( vec3 color ) { return color; }";var transmission_fragment="#ifdef USE_TRANSMISSION\n\tmaterial.transmission = transmission;\n\tmaterial.transmissionAlpha = 1.0;\n\tmaterial.thickness = thickness;\n\tmaterial.attenuationDistance = attenuationDistance;\n\tmaterial.attenuationColor = attenuationColor;\n\t#ifdef USE_TRANSMISSIONMAP\n\t\tmaterial.transmission *= texture2D( transmissionMap, vTransmissionMapUv ).r;\n\t#endif\n\t#ifdef USE_THICKNESSMAP\n\t\tmaterial.thickness *= texture2D( thicknessMap, vThicknessMapUv ).g;\n\t#endif\n\tvec3 pos = vWorldPosition;\n\tvec3 v = normalize( cameraPosition - pos );\n\tvec3 n = inverseTransformDirection( normal, viewMatrix );\n\tvec4 transmitted = getIBLVolumeRefraction(\n\t\tn, v, material.roughness, material.diffuseColor, material.specularColor, material.specularF90,\n\t\tpos, modelMatrix, viewMatrix, projectionMatrix, material.dispersion, material.ior, material.thickness,\n\t\tmaterial.attenuationColor, material.attenuationDistance );\n\tmaterial.transmissionAlpha = mix( material.transmissionAlpha, transmitted.a, material.transmission );\n\ttotalDiffuse = mix( totalDiffuse, transmitted.rgb, material.transmission );\n#endif";var transmission_pars_fragment="#ifdef USE_TRANSMISSION\n\tuniform float transmission;\n\tuniform float thickness;\n\tuniform float attenuationDistance;\n\tuniform vec3 attenuationColor;\n\t#ifdef USE_TRANSMISSIONMAP\n\t\tuniform sampler2D transmissionMap;\n\t#endif\n\t#ifdef USE_THICKNESSMAP\n\t\tuniform sampler2D thicknessMap;\n\t#endif\n\tuniform vec2 transmissionSamplerSize;\n\tuniform sampler2D transmissionSamplerMap;\n\tuniform mat4 modelMatrix;\n\tuniform mat4 projectionMatrix;\n\tvarying vec3 vWorldPosition;\n\tfloat w0( float a ) {\n\t\treturn ( 1.0 / 6.0 ) * ( a * ( a * ( - a + 3.0 ) - 3.0 ) + 1.0 );\n\t}\n\tfloat w1( float a ) {\n\t\treturn ( 1.0 / 6.0 ) * ( a *  a * ( 3.0 * a - 6.0 ) + 4.0 );\n\t}\n\tfloat w2( float a ){\n\t\treturn ( 1.0 / 6.0 ) * ( a * ( a * ( - 3.0 * a + 3.0 ) + 3.0 ) + 1.0 );\n\t}\n\tfloat w3( float a ) {\n\t\treturn ( 1.0 / 6.0 ) * ( a * a * a );\n\t}\n\tfloat g0( float a ) {\n\t\treturn w0( a ) + w1( a );\n\t}\n\tfloat g1( float a ) {\n\t\treturn w2( a ) + w3( a );\n\t}\n\tfloat h0( float a ) {\n\t\treturn - 1.0 + w1( a ) / ( w0( a ) + w1( a ) );\n\t}\n\tfloat h1( float a ) {\n\t\treturn 1.0 + w3( a ) / ( w2( a ) + w3( a ) );\n\t}\n\tvec4 bicubic( sampler2D tex, vec2 uv, vec4 texelSize, float lod ) {\n\t\tuv = uv * texelSize.zw + 0.5;\n\t\tvec2 iuv = floor( uv );\n\t\tvec2 fuv = fract( uv );\n\t\tfloat g0x = g0( fuv.x );\n\t\tfloat g1x = g1( fuv.x );\n\t\tfloat h0x = h0( fuv.x );\n\t\tfloat h1x = h1( fuv.x );\n\t\tfloat h0y = h0( fuv.y );\n\t\tfloat h1y = h1( fuv.y );\n\t\tvec2 p0 = ( vec2( iuv.x + h0x, iuv.y + h0y ) - 0.5 ) * texelSize.xy;\n\t\tvec2 p1 = ( vec2( iuv.x + h1x, iuv.y + h0y ) - 0.5 ) * texelSize.xy;\n\t\tvec2 p2 = ( vec2( iuv.x + h0x, iuv.y + h1y ) - 0.5 ) * texelSize.xy;\n\t\tvec2 p3 = ( vec2( iuv.x + h1x, iuv.y + h1y ) - 0.5 ) * texelSize.xy;\n\t\treturn g0( fuv.y ) * ( g0x * textureLod( tex, p0, lod ) + g1x * textureLod( tex, p1, lod ) ) +\n\t\t\tg1( fuv.y ) * ( g0x * textureLod( tex, p2, lod ) + g1x * textureLod( tex, p3, lod ) );\n\t}\n\tvec4 textureBicubic( sampler2D sampler, vec2 uv, float lod ) {\n\t\tvec2 fLodSize = vec2( textureSize( sampler, int( lod ) ) );\n\t\tvec2 cLodSize = vec2( textureSize( sampler, int( lod + 1.0 ) ) );\n\t\tvec2 fLodSizeInv = 1.0 / fLodSize;\n\t\tvec2 cLodSizeInv = 1.0 / cLodSize;\n\t\tvec4 fSample = bicubic( sampler, uv, vec4( fLodSizeInv, fLodSize ), floor( lod ) );\n\t\tvec4 cSample = bicubic( sampler, uv, vec4( cLodSizeInv, cLodSize ), ceil( lod ) );\n\t\treturn mix( fSample, cSample, fract( lod ) );\n\t}\n\tvec3 getVolumeTransmissionRay( const in vec3 n, const in vec3 v, const in float thickness, const in float ior, const in mat4 modelMatrix ) {\n\t\tvec3 refractionVector = refract( - v, normalize( n ), 1.0 / ior );\n\t\tvec3 modelScale;\n\t\tmodelScale.x = length( vec3( modelMatrix[ 0 ].xyz ) );\n\t\tmodelScale.y = length( vec3( modelMatrix[ 1 ].xyz ) );\n\t\tmodelScale.z = length( vec3( modelMatrix[ 2 ].xyz ) );\n\t\treturn normalize( refractionVector ) * thickness * modelScale;\n\t}\n\tfloat applyIorToRoughness( const in float roughness, const in float ior ) {\n\t\treturn roughness * clamp( ior * 2.0 - 2.0, 0.0, 1.0 );\n\t}\n\tvec4 getTransmissionSample( const in vec2 fragCoord, const in float roughness, const in float ior ) {\n\t\tfloat lod = log2( transmissionSamplerSize.x ) * applyIorToRoughness( roughness, ior );\n\t\treturn textureBicubic( transmissionSamplerMap, fragCoord.xy, lod );\n\t}\n\tvec3 volumeAttenuation( const in float transmissionDistance, const in vec3 attenuationColor, const in float attenuationDistance ) {\n\t\tif ( isinf( attenuationDistance ) ) {\n\t\t\treturn vec3( 1.0 );\n\t\t} else {\n\t\t\tvec3 attenuationCoefficient = -log( attenuationColor ) / attenuationDistance;\n\t\t\tvec3 transmittance = exp( - attenuationCoefficient * transmissionDistance );\t\t\treturn transmittance;\n\t\t}\n\t}\n\tvec4 getIBLVolumeRefraction( const in vec3 n, const in vec3 v, const in float roughness, const in vec3 diffuseColor,\n\t\tconst in vec3 specularColor, const in float specularF90, const in vec3 position, const in mat4 modelMatrix,\n\t\tconst in mat4 viewMatrix, const in mat4 projMatrix, const in float dispersion, const in float ior, const in float thickness,\n\t\tconst in vec3 attenuationColor, const in float attenuationDistance ) {\n\t\tvec4 transmittedLight;\n\t\tvec3 transmittance;\n\t\t#ifdef USE_DISPERSION\n\t\t\tfloat halfSpread = ( ior - 1.0 ) * 0.025 * dispersion;\n\t\t\tvec3 iors = vec3( ior - halfSpread, ior, ior + halfSpread );\n\t\t\tfor ( int i = 0; i < 3; i ++ ) {\n\t\t\t\tvec3 transmissionRay = getVolumeTransmissionRay( n, v, thickness, iors[ i ], modelMatrix );\n\t\t\t\tvec3 refractedRayExit = position + transmissionRay;\n\t\t\n\t\t\t\tvec4 ndcPos = projMatrix * viewMatrix * vec4( refractedRayExit, 1.0 );\n\t\t\t\tvec2 refractionCoords = ndcPos.xy / ndcPos.w;\n\t\t\t\trefractionCoords += 1.0;\n\t\t\t\trefractionCoords /= 2.0;\n\t\t\n\t\t\t\tvec4 transmissionSample = getTransmissionSample( refractionCoords, roughness, iors[ i ] );\n\t\t\t\ttransmittedLight[ i ] = transmissionSample[ i ];\n\t\t\t\ttransmittedLight.a += transmissionSample.a;\n\t\t\t\ttransmittance[ i ] = diffuseColor[ i ] * volumeAttenuation( length( transmissionRay ), attenuationColor, attenuationDistance )[ i ];\n\t\t\t}\n\t\t\ttransmittedLight.a /= 3.0;\n\t\t\n\t\t#else\n\t\t\n\t\t\tvec3 transmissionRay = getVolumeTransmissionRay( n, v, thickness, ior, modelMatrix );\n\t\t\tvec3 refractedRayExit = position + transmissionRay;\n\t\t\tvec4 ndcPos = projMatrix * viewMatrix * vec4( refractedRayExit, 1.0 );\n\t\t\tvec2 refractionCoords = ndcPos.xy / ndcPos.w;\n\t\t\trefractionCoords += 1.0;\n\t\t\trefractionCoords /= 2.0;\n\t\t\ttransmittedLight = getTransmissionSample( refractionCoords, roughness, ior );\n\t\t\ttransmittance = diffuseColor * volumeAttenuation( length( transmissionRay ), attenuationColor, attenuationDistance );\n\t\t\n\t\t#endif\n\t\tvec3 attenuatedColor = transmittance * transmittedLight.rgb;\n\t\tvec3 F = EnvironmentBRDF( n, v, specularColor, specularF90, roughness );\n\t\tfloat transmittanceFactor = ( transmittance.r + transmittance.g + transmittance.b ) / 3.0;\n\t\treturn vec4( ( 1.0 - F ) * attenuatedColor, 1.0 - ( 1.0 - transmittedLight.a ) * transmittanceFactor );\n\t}\n#endif";var uv_pars_fragment="#if defined( USE_UV ) || defined( USE_ANISOTROPY )\n\tvarying vec2 vUv;\n#endif\n#ifdef USE_MAP\n\tvarying vec2 vMapUv;\n#endif\n#ifdef USE_ALPHAMAP\n\tvarying vec2 vAlphaMapUv;\n#endif\n#ifdef USE_LIGHTMAP\n\tvarying vec2 vLightMapUv;\n#endif\n#ifdef USE_AOMAP\n\tvarying vec2 vAoMapUv;\n#endif\n#ifdef USE_BUMPMAP\n\tvarying vec2 vBumpMapUv;\n#endif\n#ifdef USE_NORMALMAP\n\tvarying vec2 vNormalMapUv;\n#endif\n#ifdef USE_EMISSIVEMAP\n\tvarying vec2 vEmissiveMapUv;\n#endif\n#ifdef USE_METALNESSMAP\n\tvarying vec2 vMetalnessMapUv;\n#endif\n#ifdef USE_ROUGHNESSMAP\n\tvarying vec2 vRoughnessMapUv;\n#endif\n#ifdef USE_ANISOTROPYMAP\n\tvarying vec2 vAnisotropyMapUv;\n#endif\n#ifdef USE_CLEARCOATMAP\n\tvarying vec2 vClearcoatMapUv;\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n\tvarying vec2 vClearcoatNormalMapUv;\n#endif\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n\tvarying vec2 vClearcoatRoughnessMapUv;\n#endif\n#ifdef USE_IRIDESCENCEMAP\n\tvarying vec2 vIridescenceMapUv;\n#endif\n#ifdef USE_IRIDESCENCE_THICKNESSMAP\n\tvarying vec2 vIridescenceThicknessMapUv;\n#endif\n#ifdef USE_SHEEN_COLORMAP\n\tvarying vec2 vSheenColorMapUv;\n#endif\n#ifdef USE_SHEEN_ROUGHNESSMAP\n\tvarying vec2 vSheenRoughnessMapUv;\n#endif\n#ifdef USE_SPECULARMAP\n\tvarying vec2 vSpecularMapUv;\n#endif\n#ifdef USE_SPECULAR_COLORMAP\n\tvarying vec2 vSpecularColorMapUv;\n#endif\n#ifdef USE_SPECULAR_INTENSITYMAP\n\tvarying vec2 vSpecularIntensityMapUv;\n#endif\n#ifdef USE_TRANSMISSIONMAP\n\tuniform mat3 transmissionMapTransform;\n\tvarying vec2 vTransmissionMapUv;\n#endif\n#ifdef USE_THICKNESSMAP\n\tuniform mat3 thicknessMapTransform;\n\tvarying vec2 vThicknessMapUv;\n#endif";var uv_pars_vertex="#if defined( USE_UV ) || defined( USE_ANISOTROPY )\n\tvarying vec2 vUv;\n#endif\n#ifdef USE_MAP\n\tuniform mat3 mapTransform;\n\tvarying vec2 vMapUv;\n#endif\n#ifdef USE_ALPHAMAP\n\tuniform mat3 alphaMapTransform;\n\tvarying vec2 vAlphaMapUv;\n#endif\n#ifdef USE_LIGHTMAP\n\tuniform mat3 lightMapTransform;\n\tvarying vec2 vLightMapUv;\n#endif\n#ifdef USE_AOMAP\n\tuniform mat3 aoMapTransform;\n\tvarying vec2 vAoMapUv;\n#endif\n#ifdef USE_BUMPMAP\n\tuniform mat3 bumpMapTransform;\n\tvarying vec2 vBumpMapUv;\n#endif\n#ifdef USE_NORMALMAP\n\tuniform mat3 normalMapTransform;\n\tvarying vec2 vNormalMapUv;\n#endif\n#ifdef USE_DISPLACEMENTMAP\n\tuniform mat3 displacementMapTransform;\n\tvarying vec2 vDisplacementMapUv;\n#endif\n#ifdef USE_EMISSIVEMAP\n\tuniform mat3 emissiveMapTransform;\n\tvarying vec2 vEmissiveMapUv;\n#endif\n#ifdef USE_METALNESSMAP\n\tuniform mat3 metalnessMapTransform;\n\tvarying vec2 vMetalnessMapUv;\n#endif\n#ifdef USE_ROUGHNESSMAP\n\tuniform mat3 roughnessMapTransform;\n\tvarying vec2 vRoughnessMapUv;\n#endif\n#ifdef USE_ANISOTROPYMAP\n\tuniform mat3 anisotropyMapTransform;\n\tvarying vec2 vAnisotropyMapUv;\n#endif\n#ifdef USE_CLEARCOATMAP\n\tuniform mat3 clearcoatMapTransform;\n\tvarying vec2 vClearcoatMapUv;\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n\tuniform mat3 clearcoatNormalMapTransform;\n\tvarying vec2 vClearcoatNormalMapUv;\n#endif\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n\tuniform mat3 clearcoatRoughnessMapTransform;\n\tvarying vec2 vClearcoatRoughnessMapUv;\n#endif\n#ifdef USE_SHEEN_COLORMAP\n\tuniform mat3 sheenColorMapTransform;\n\tvarying vec2 vSheenColorMapUv;\n#endif\n#ifdef USE_SHEEN_ROUGHNESSMAP\n\tuniform mat3 sheenRoughnessMapTransform;\n\tvarying vec2 vSheenRoughnessMapUv;\n#endif\n#ifdef USE_IRIDESCENCEMAP\n\tuniform mat3 iridescenceMapTransform;\n\tvarying vec2 vIridescenceMapUv;\n#endif\n#ifdef USE_IRIDESCENCE_THICKNESSMAP\n\tuniform mat3 iridescenceThicknessMapTransform;\n\tvarying vec2 vIridescenceThicknessMapUv;\n#endif\n#ifdef USE_SPECULARMAP\n\tuniform mat3 specularMapTransform;\n\tvarying vec2 vSpecularMapUv;\n#endif\n#ifdef USE_SPECULAR_COLORMAP\n\tuniform mat3 specularColorMapTransform;\n\tvarying vec2 vSpecularColorMapUv;\n#endif\n#ifdef USE_SPECULAR_INTENSITYMAP\n\tuniform mat3 specularIntensityMapTransform;\n\tvarying vec2 vSpecularIntensityMapUv;\n#endif\n#ifdef USE_TRANSMISSIONMAP\n\tuniform mat3 transmissionMapTransform;\n\tvarying vec2 vTransmissionMapUv;\n#endif\n#ifdef USE_THICKNESSMAP\n\tuniform mat3 thicknessMapTransform;\n\tvarying vec2 vThicknessMapUv;\n#endif";var uv_vertex="#if defined( USE_UV ) || defined( USE_ANISOTROPY )\n\tvUv = vec3( uv, 1 ).xy;\n#endif\n#ifdef USE_MAP\n\tvMapUv = ( mapTransform * vec3( MAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_ALPHAMAP\n\tvAlphaMapUv = ( alphaMapTransform * vec3( ALPHAMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_LIGHTMAP\n\tvLightMapUv = ( lightMapTransform * vec3( LIGHTMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_AOMAP\n\tvAoMapUv = ( aoMapTransform * vec3( AOMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_BUMPMAP\n\tvBumpMapUv = ( bumpMapTransform * vec3( BUMPMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_NORMALMAP\n\tvNormalMapUv = ( normalMapTransform * vec3( NORMALMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_DISPLACEMENTMAP\n\tvDisplacementMapUv = ( displacementMapTransform * vec3( DISPLACEMENTMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_EMISSIVEMAP\n\tvEmissiveMapUv = ( emissiveMapTransform * vec3( EMISSIVEMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_METALNESSMAP\n\tvMetalnessMapUv = ( metalnessMapTransform * vec3( METALNESSMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_ROUGHNESSMAP\n\tvRoughnessMapUv = ( roughnessMapTransform * vec3( ROUGHNESSMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_ANISOTROPYMAP\n\tvAnisotropyMapUv = ( anisotropyMapTransform * vec3( ANISOTROPYMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_CLEARCOATMAP\n\tvClearcoatMapUv = ( clearcoatMapTransform * vec3( CLEARCOATMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n\tvClearcoatNormalMapUv = ( clearcoatNormalMapTransform * vec3( CLEARCOAT_NORMALMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n\tvClearcoatRoughnessMapUv = ( clearcoatRoughnessMapTransform * vec3( CLEARCOAT_ROUGHNESSMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_IRIDESCENCEMAP\n\tvIridescenceMapUv = ( iridescenceMapTransform * vec3( IRIDESCENCEMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_IRIDESCENCE_THICKNESSMAP\n\tvIridescenceThicknessMapUv = ( iridescenceThicknessMapTransform * vec3( IRIDESCENCE_THICKNESSMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_SHEEN_COLORMAP\n\tvSheenColorMapUv = ( sheenColorMapTransform * vec3( SHEEN_COLORMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_SHEEN_ROUGHNESSMAP\n\tvSheenRoughnessMapUv = ( sheenRoughnessMapTransform * vec3( SHEEN_ROUGHNESSMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_SPECULARMAP\n\tvSpecularMapUv = ( specularMapTransform * vec3( SPECULARMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_SPECULAR_COLORMAP\n\tvSpecularColorMapUv = ( specularColorMapTransform * vec3( SPECULAR_COLORMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_SPECULAR_INTENSITYMAP\n\tvSpecularIntensityMapUv = ( specularIntensityMapTransform * vec3( SPECULAR_INTENSITYMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_TRANSMISSIONMAP\n\tvTransmissionMapUv = ( transmissionMapTransform * vec3( TRANSMISSIONMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_THICKNESSMAP\n\tvThicknessMapUv = ( thicknessMapTransform * vec3( THICKNESSMAP_UV, 1 ) ).xy;\n#endif";var worldpos_vertex="#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP ) || defined ( USE_TRANSMISSION ) || NUM_SPOT_LIGHT_COORDS > 0\n\tvec4 worldPosition = vec4( transformed, 1.0 );\n\t#ifdef USE_BATCHING\n\t\tworldPosition = batchingMatrix * worldPosition;\n\t#endif\n\t#ifdef USE_INSTANCING\n\t\tworldPosition = instanceMatrix * worldPosition;\n\t#endif\n\tworldPosition = modelMatrix * worldPosition;\n#endif";const vertex$h="varying vec2 vUv;\nuniform mat3 uvTransform;\nvoid main() {\n\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n\tgl_Position = vec4( position.xy, 1.0, 1.0 );\n}";const fragment$h="uniform sampler2D t2D;\nuniform float backgroundIntensity;\nvarying vec2 vUv;\nvoid main() {\n\tvec4 texColor = texture2D( t2D, vUv );\n\t#ifdef DECODE_VIDEO_TEXTURE\n\t\ttexColor = vec4( mix( pow( texColor.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), texColor.rgb * 0.0773993808, vec3( lessThanEqual( texColor.rgb, vec3( 0.04045 ) ) ) ), texColor.w );\n\t#endif\n\ttexColor.rgb *= backgroundIntensity;\n\tgl_FragColor = texColor;\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n}";const vertex$g="varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvWorldDirection = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\tgl_Position.z = gl_Position.w;\n}";const fragment$g="#ifdef ENVMAP_TYPE_CUBE\n\tuniform samplerCube envMap;\n#elif defined( ENVMAP_TYPE_CUBE_UV )\n\tuniform sampler2D envMap;\n#endif\nuniform float flipEnvMap;\nuniform float backgroundBlurriness;\nuniform float backgroundIntensity;\nuniform mat3 backgroundRotation;\nvarying vec3 vWorldDirection;\n#include <cube_uv_reflection_fragment>\nvoid main() {\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tvec4 texColor = textureCube( envMap, backgroundRotation * vec3( flipEnvMap * vWorldDirection.x, vWorldDirection.yz ) );\n\t#elif defined( ENVMAP_TYPE_CUBE_UV )\n\t\tvec4 texColor = textureCubeUV( envMap, backgroundRotation * vWorldDirection, backgroundBlurriness );\n\t#else\n\t\tvec4 texColor = vec4( 0.0, 0.0, 0.0, 1.0 );\n\t#endif\n\ttexColor.rgb *= backgroundIntensity;\n\tgl_FragColor = texColor;\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n}";const vertex$f="varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvWorldDirection = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\tgl_Position.z = gl_Position.w;\n}";const fragment$f="uniform samplerCube tCube;\nuniform float tFlip;\nuniform float opacity;\nvarying vec3 vWorldDirection;\nvoid main() {\n\tvec4 texColor = textureCube( tCube, vec3( tFlip * vWorldDirection.x, vWorldDirection.yz ) );\n\tgl_FragColor = texColor;\n\tgl_FragColor.a *= opacity;\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n}";const vertex$e="#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvarying vec2 vHighPrecisionZW;\nvoid main() {\n\t#include <uv_vertex>\n\t#include <batching_vertex>\n\t#include <skinbase_vertex>\n\t#include <morphinstance_vertex>\n\t#ifdef USE_DISPLACEMENTMAP\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvHighPrecisionZW = gl_Position.zw;\n}";const fragment$e="#if DEPTH_PACKING == 3200\n\tuniform float opacity;\n#endif\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvarying vec2 vHighPrecisionZW;\nvoid main() {\n\tvec4 diffuseColor = vec4( 1.0 );\n\t#include <clipping_planes_fragment>\n\t#if DEPTH_PACKING == 3200\n\t\tdiffuseColor.a = opacity;\n\t#endif\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <alphahash_fragment>\n\t#include <logdepthbuf_fragment>\n\tfloat fragCoordZ = 0.5 * vHighPrecisionZW[0] / vHighPrecisionZW[1] + 0.5;\n\t#if DEPTH_PACKING == 3200\n\t\tgl_FragColor = vec4( vec3( 1.0 - fragCoordZ ), opacity );\n\t#elif DEPTH_PACKING == 3201\n\t\tgl_FragColor = packDepthToRGBA( fragCoordZ );\n\t#endif\n}";const vertex$d="#define DISTANCE\nvarying vec3 vWorldPosition;\n#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <batching_vertex>\n\t#include <skinbase_vertex>\n\t#include <morphinstance_vertex>\n\t#ifdef USE_DISPLACEMENTMAP\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <worldpos_vertex>\n\t#include <clipping_planes_vertex>\n\tvWorldPosition = worldPosition.xyz;\n}";const fragment$d="#define DISTANCE\nuniform vec3 referencePosition;\nuniform float nearDistance;\nuniform float farDistance;\nvarying vec3 vWorldPosition;\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main () {\n\tvec4 diffuseColor = vec4( 1.0 );\n\t#include <clipping_planes_fragment>\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <alphahash_fragment>\n\tfloat dist = length( vWorldPosition - referencePosition );\n\tdist = ( dist - nearDistance ) / ( farDistance - nearDistance );\n\tdist = saturate( dist );\n\tgl_FragColor = packDepthToRGBA( dist );\n}";const vertex$c="varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvWorldDirection = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n}";const fragment$c="uniform sampler2D tEquirect;\nvarying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvec3 direction = normalize( vWorldDirection );\n\tvec2 sampleUV = equirectUv( direction );\n\tgl_FragColor = texture2D( tEquirect, sampleUV );\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n}";const vertex$b="uniform float scale;\nattribute float lineDistance;\nvarying float vLineDistance;\n#include <common>\n#include <uv_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\tvLineDistance = scale * lineDistance;\n\t#include <uv_vertex>\n\t#include <color_vertex>\n\t#include <morphinstance_vertex>\n\t#include <morphcolor_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n}";const fragment$b="uniform vec3 diffuse;\nuniform float opacity;\nuniform float dashSize;\nuniform float totalSize;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <clipping_planes_fragment>\n\tif ( mod( vLineDistance, totalSize ) > dashSize ) {\n\t\tdiscard;\n\t}\n\tvec3 outgoingLight = vec3( 0.0 );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\t#include <opaque_fragment>\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n}";const vertex$a="#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <color_vertex>\n\t#include <morphinstance_vertex>\n\t#include <morphcolor_vertex>\n\t#include <batching_vertex>\n\t#if defined ( USE_ENVMAP ) || defined ( USE_SKINNING )\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinbase_vertex>\n\t\t#include <skinnormal_vertex>\n\t\t#include <defaultnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <fog_vertex>\n}";const fragment$a="uniform vec3 diffuse;\nuniform float opacity;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <clipping_planes_fragment>\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <alphahash_fragment>\n\t#include <specularmap_fragment>\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\t#ifdef USE_LIGHTMAP\n\t\tvec4 lightMapTexel = texture2D( lightMap, vLightMapUv );\n\t\treflectedLight.indirectDiffuse += lightMapTexel.rgb * lightMapIntensity * RECIPROCAL_PI;\n\t#else\n\t\treflectedLight.indirectDiffuse += vec3( 1.0 );\n\t#endif\n\t#include <aomap_fragment>\n\treflectedLight.indirectDiffuse *= diffuseColor.rgb;\n\tvec3 outgoingLight = reflectedLight.indirectDiffuse;\n\t#include <envmap_fragment>\n\t#include <opaque_fragment>\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}";const vertex$9="#define LAMBERT\nvarying vec3 vViewPosition;\n#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <color_vertex>\n\t#include <morphinstance_vertex>\n\t#include <morphcolor_vertex>\n\t#include <batching_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}";const fragment$9="#define LAMBERT\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_lambert_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <clipping_planes_fragment>\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <alphahash_fragment>\n\t#include <specularmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_lambert_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n\t#include <envmap_fragment>\n\t#include <opaque_fragment>\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}";const vertex$8="#define MATCAP\nvarying vec3 vViewPosition;\n#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <color_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <color_vertex>\n\t#include <morphinstance_vertex>\n\t#include <morphcolor_vertex>\n\t#include <batching_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n\tvViewPosition = - mvPosition.xyz;\n}";const fragment$8="#define MATCAP\nuniform vec3 diffuse;\nuniform float opacity;\nuniform sampler2D matcap;\nvarying vec3 vViewPosition;\n#include <common>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <fog_pars_fragment>\n#include <normal_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <clipping_planes_fragment>\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <alphahash_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\tvec3 viewDir = normalize( vViewPosition );\n\tvec3 x = normalize( vec3( viewDir.z, 0.0, - viewDir.x ) );\n\tvec3 y = cross( viewDir, x );\n\tvec2 uv = vec2( dot( x, normal ), dot( y, normal ) ) * 0.495 + 0.5;\n\t#ifdef USE_MATCAP\n\t\tvec4 matcapColor = texture2D( matcap, uv );\n\t#else\n\t\tvec4 matcapColor = vec4( vec3( mix( 0.2, 0.8, uv.y ) ), 1.0 );\n\t#endif\n\tvec3 outgoingLight = diffuseColor.rgb * matcapColor.rgb;\n\t#include <opaque_fragment>\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}";const vertex$7="#define NORMAL\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )\n\tvarying vec3 vViewPosition;\n#endif\n#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <batching_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphinstance_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )\n\tvViewPosition = - mvPosition.xyz;\n#endif\n}";const fragment$7="#define NORMAL\nuniform float opacity;\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )\n\tvarying vec3 vViewPosition;\n#endif\n#include <packing>\n#include <uv_pars_fragment>\n#include <normal_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\tvec4 diffuseColor = vec4( 0.0, 0.0, 0.0, opacity );\n\t#include <clipping_planes_fragment>\n\t#include <logdepthbuf_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\tgl_FragColor = vec4( packNormalToRGB( normal ), diffuseColor.a );\n\t#ifdef OPAQUE\n\t\tgl_FragColor.a = 1.0;\n\t#endif\n}";const vertex$6="#define PHONG\nvarying vec3 vViewPosition;\n#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <color_vertex>\n\t#include <morphcolor_vertex>\n\t#include <batching_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphinstance_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}";const fragment$6="#define PHONG\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform vec3 specular;\nuniform float shininess;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_phong_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <clipping_planes_fragment>\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <alphahash_fragment>\n\t#include <specularmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_phong_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n\t#include <envmap_fragment>\n\t#include <opaque_fragment>\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}";const vertex$5="#define STANDARD\nvarying vec3 vViewPosition;\n#ifdef USE_TRANSMISSION\n\tvarying vec3 vWorldPosition;\n#endif\n#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <color_vertex>\n\t#include <morphinstance_vertex>\n\t#include <morphcolor_vertex>\n\t#include <batching_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n#ifdef USE_TRANSMISSION\n\tvWorldPosition = worldPosition.xyz;\n#endif\n}";const fragment$5="#define STANDARD\n#ifdef PHYSICAL\n\t#define IOR\n\t#define USE_SPECULAR\n#endif\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float roughness;\nuniform float metalness;\nuniform float opacity;\n#ifdef IOR\n\tuniform float ior;\n#endif\n#ifdef USE_SPECULAR\n\tuniform float specularIntensity;\n\tuniform vec3 specularColor;\n\t#ifdef USE_SPECULAR_COLORMAP\n\t\tuniform sampler2D specularColorMap;\n\t#endif\n\t#ifdef USE_SPECULAR_INTENSITYMAP\n\t\tuniform sampler2D specularIntensityMap;\n\t#endif\n#endif\n#ifdef USE_CLEARCOAT\n\tuniform float clearcoat;\n\tuniform float clearcoatRoughness;\n#endif\n#ifdef USE_DISPERSION\n\tuniform float dispersion;\n#endif\n#ifdef USE_IRIDESCENCE\n\tuniform float iridescence;\n\tuniform float iridescenceIOR;\n\tuniform float iridescenceThicknessMinimum;\n\tuniform float iridescenceThicknessMaximum;\n#endif\n#ifdef USE_SHEEN\n\tuniform vec3 sheenColor;\n\tuniform float sheenRoughness;\n\t#ifdef USE_SHEEN_COLORMAP\n\t\tuniform sampler2D sheenColorMap;\n\t#endif\n\t#ifdef USE_SHEEN_ROUGHNESSMAP\n\t\tuniform sampler2D sheenRoughnessMap;\n\t#endif\n#endif\n#ifdef USE_ANISOTROPY\n\tuniform vec2 anisotropyVector;\n\t#ifdef USE_ANISOTROPYMAP\n\t\tuniform sampler2D anisotropyMap;\n\t#endif\n#endif\nvarying vec3 vViewPosition;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <iridescence_fragment>\n#include <cube_uv_reflection_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_physical_pars_fragment>\n#include <fog_pars_fragment>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_physical_pars_fragment>\n#include <transmission_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <clearcoat_pars_fragment>\n#include <iridescence_pars_fragment>\n#include <roughnessmap_pars_fragment>\n#include <metalnessmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <clipping_planes_fragment>\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <alphahash_fragment>\n\t#include <roughnessmap_fragment>\n\t#include <metalnessmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <clearcoat_normal_fragment_begin>\n\t#include <clearcoat_normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_physical_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 totalDiffuse = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse;\n\tvec3 totalSpecular = reflectedLight.directSpecular + reflectedLight.indirectSpecular;\n\t#include <transmission_fragment>\n\tvec3 outgoingLight = totalDiffuse + totalSpecular + totalEmissiveRadiance;\n\t#ifdef USE_SHEEN\n\t\tfloat sheenEnergyComp = 1.0 - 0.157 * max3( material.sheenColor );\n\t\toutgoingLight = outgoingLight * sheenEnergyComp + sheenSpecularDirect + sheenSpecularIndirect;\n\t#endif\n\t#ifdef USE_CLEARCOAT\n\t\tfloat dotNVcc = saturate( dot( geometryClearcoatNormal, geometryViewDir ) );\n\t\tvec3 Fcc = F_Schlick( material.clearcoatF0, material.clearcoatF90, dotNVcc );\n\t\toutgoingLight = outgoingLight * ( 1.0 - material.clearcoat * Fcc ) + ( clearcoatSpecularDirect + clearcoatSpecularIndirect ) * material.clearcoat;\n\t#endif\n\t#include <opaque_fragment>\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}";const vertex$4="#define TOON\nvarying vec3 vViewPosition;\n#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <color_vertex>\n\t#include <morphinstance_vertex>\n\t#include <morphcolor_vertex>\n\t#include <batching_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}";const fragment$4="#define TOON\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <gradientmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_toon_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <clipping_planes_fragment>\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <alphahash_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_toon_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n\t#include <opaque_fragment>\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}";const vertex$3="uniform float size;\nuniform float scale;\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\n#ifdef USE_POINTS_UV\n\tvarying vec2 vUv;\n\tuniform mat3 uvTransform;\n#endif\nvoid main() {\n\t#ifdef USE_POINTS_UV\n\t\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n\t#endif\n\t#include <color_vertex>\n\t#include <morphinstance_vertex>\n\t#include <morphcolor_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <project_vertex>\n\tgl_PointSize = size;\n\t#ifdef USE_SIZEATTENUATION\n\t\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\n\t\tif ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );\n\t#endif\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <fog_vertex>\n}";const fragment$3="uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <color_pars_fragment>\n#include <map_particle_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <clipping_planes_fragment>\n\tvec3 outgoingLight = vec3( 0.0 );\n\t#include <logdepthbuf_fragment>\n\t#include <map_particle_fragment>\n\t#include <color_fragment>\n\t#include <alphatest_fragment>\n\t#include <alphahash_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\t#include <opaque_fragment>\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n}";const vertex$2="#include <common>\n#include <batching_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <shadowmap_pars_vertex>\nvoid main() {\n\t#include <batching_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphinstance_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}";const fragment$2="uniform vec3 color;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <logdepthbuf_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\nvoid main() {\n\t#include <logdepthbuf_fragment>\n\tgl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n\t#include <fog_fragment>\n}";const vertex$1="uniform float rotation;\nuniform vec2 center;\n#include <common>\n#include <uv_pars_vertex>\n#include <fog_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\tvec4 mvPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );\n\tvec2 scale;\n\tscale.x = length( vec3( modelMatrix[ 0 ].x, modelMatrix[ 0 ].y, modelMatrix[ 0 ].z ) );\n\tscale.y = length( vec3( modelMatrix[ 1 ].x, modelMatrix[ 1 ].y, modelMatrix[ 1 ].z ) );\n\t#ifndef USE_SIZEATTENUATION\n\t\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\n\t\tif ( isPerspective ) scale *= - mvPosition.z;\n\t#endif\n\tvec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;\n\tvec2 rotatedPosition;\n\trotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;\n\trotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;\n\tmvPosition.xy += rotatedPosition;\n\tgl_Position = projectionMatrix * mvPosition;\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n}";const fragment$1="uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <clipping_planes_fragment>\n\tvec3 outgoingLight = vec3( 0.0 );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <alphahash_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\t#include <opaque_fragment>\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n\t#include <fog_fragment>\n}";const ShaderChunk={alphahash_fragment:alphahash_fragment,alphahash_pars_fragment:alphahash_pars_fragment,alphamap_fragment:alphamap_fragment,alphamap_pars_fragment:alphamap_pars_fragment,alphatest_fragment:alphatest_fragment,alphatest_pars_fragment:alphatest_pars_fragment,aomap_fragment:aomap_fragment,aomap_pars_fragment:aomap_pars_fragment,batching_pars_vertex:batching_pars_vertex,batching_vertex:batching_vertex,begin_vertex:begin_vertex,beginnormal_vertex:beginnormal_vertex,bsdfs:bsdfs,iridescence_fragment:iridescence_fragment,bumpmap_pars_fragment:bumpmap_pars_fragment,clipping_planes_fragment:clipping_planes_fragment,clipping_planes_pars_fragment:clipping_planes_pars_fragment,clipping_planes_pars_vertex:clipping_planes_pars_vertex,clipping_planes_vertex:clipping_planes_vertex,color_fragment:color_fragment,color_pars_fragment:color_pars_fragment,color_pars_vertex:color_pars_vertex,color_vertex:color_vertex,common:common,cube_uv_reflection_fragment:cube_uv_reflection_fragment,defaultnormal_vertex:defaultnormal_vertex,displacementmap_pars_vertex:displacementmap_pars_vertex,displacementmap_vertex:displacementmap_vertex,emissivemap_fragment:emissivemap_fragment,emissivemap_pars_fragment:emissivemap_pars_fragment,colorspace_fragment:colorspace_fragment,colorspace_pars_fragment:colorspace_pars_fragment,envmap_fragment:envmap_fragment,envmap_common_pars_fragment:envmap_common_pars_fragment,envmap_pars_fragment:envmap_pars_fragment,envmap_pars_vertex:envmap_pars_vertex,envmap_physical_pars_fragment:envmap_physical_pars_fragment,envmap_vertex:envmap_vertex,fog_vertex:fog_vertex,fog_pars_vertex:fog_pars_vertex,fog_fragment:fog_fragment,fog_pars_fragment:fog_pars_fragment,gradientmap_pars_fragment:gradientmap_pars_fragment,lightmap_pars_fragment:lightmap_pars_fragment,lights_lambert_fragment:lights_lambert_fragment,lights_lambert_pars_fragment:lights_lambert_pars_fragment,lights_pars_begin:lights_pars_begin,lights_toon_fragment:lights_toon_fragment,lights_toon_pars_fragment:lights_toon_pars_fragment,lights_phong_fragment:lights_phong_fragment,lights_phong_pars_fragment:lights_phong_pars_fragment,lights_physical_fragment:lights_physical_fragment,lights_physical_pars_fragment:lights_physical_pars_fragment,lights_fragment_begin:lights_fragment_begin,lights_fragment_maps:lights_fragment_maps,lights_fragment_end:lights_fragment_end,logdepthbuf_fragment:logdepthbuf_fragment,logdepthbuf_pars_fragment:logdepthbuf_pars_fragment,logdepthbuf_pars_vertex:logdepthbuf_pars_vertex,logdepthbuf_vertex:logdepthbuf_vertex,map_fragment:map_fragment,map_pars_fragment:map_pars_fragment,map_particle_fragment:map_particle_fragment,map_particle_pars_fragment:map_particle_pars_fragment,metalnessmap_fragment:metalnessmap_fragment,metalnessmap_pars_fragment:metalnessmap_pars_fragment,morphinstance_vertex:morphinstance_vertex,morphcolor_vertex:morphcolor_vertex,morphnormal_vertex:morphnormal_vertex,morphtarget_pars_vertex:morphtarget_pars_vertex,morphtarget_vertex:morphtarget_vertex,normal_fragment_begin:normal_fragment_begin,normal_fragment_maps:normal_fragment_maps,normal_pars_fragment:normal_pars_fragment,normal_pars_vertex:normal_pars_vertex,normal_vertex:normal_vertex,normalmap_pars_fragment:normalmap_pars_fragment,clearcoat_normal_fragment_begin:clearcoat_normal_fragment_begin,clearcoat_normal_fragment_maps:clearcoat_normal_fragment_maps,clearcoat_pars_fragment:clearcoat_pars_fragment,iridescence_pars_fragment:iridescence_pars_fragment,opaque_fragment:opaque_fragment,packing:packing,premultiplied_alpha_fragment:premultiplied_alpha_fragment,project_vertex:project_vertex,dithering_fragment:dithering_fragment,dithering_pars_fragment:dithering_pars_fragment,roughnessmap_fragment:roughnessmap_fragment,roughnessmap_pars_fragment:roughnessmap_pars_fragment,shadowmap_pars_fragment:shadowmap_pars_fragment,shadowmap_pars_vertex:shadowmap_pars_vertex,shadowmap_vertex:shadowmap_vertex,shadowmask_pars_fragment:shadowmask_pars_fragment,skinbase_vertex:skinbase_vertex,skinning_pars_vertex:skinning_pars_vertex,skinning_vertex:skinning_vertex,skinnormal_vertex:skinnormal_vertex,specularmap_fragment:specularmap_fragment,specularmap_pars_fragment:specularmap_pars_fragment,tonemapping_fragment:tonemapping_fragment,tonemapping_pars_fragment:tonemapping_pars_fragment,transmission_fragment:transmission_fragment,transmission_pars_fragment:transmission_pars_fragment,uv_pars_fragment:uv_pars_fragment,uv_pars_vertex:uv_pars_vertex,uv_vertex:uv_vertex,worldpos_vertex:worldpos_vertex,background_vert:vertex$h,background_frag:fragment$h,backgroundCube_vert:vertex$g,backgroundCube_frag:fragment$g,cube_vert:vertex$f,cube_frag:fragment$f,depth_vert:vertex$e,depth_frag:fragment$e,distanceRGBA_vert:vertex$d,distanceRGBA_frag:fragment$d,equirect_vert:vertex$c,equirect_frag:fragment$c,linedashed_vert:vertex$b,linedashed_frag:fragment$b,meshbasic_vert:vertex$a,meshbasic_frag:fragment$a,meshlambert_vert:vertex$9,meshlambert_frag:fragment$9,meshmatcap_vert:vertex$8,meshmatcap_frag:fragment$8,meshnormal_vert:vertex$7,meshnormal_frag:fragment$7,meshphong_vert:vertex$6,meshphong_frag:fragment$6,meshphysical_vert:vertex$5,meshphysical_frag:fragment$5,meshtoon_vert:vertex$4,meshtoon_frag:fragment$4,points_vert:vertex$3,points_frag:fragment$3,shadow_vert:vertex$2,shadow_frag:fragment$2,sprite_vert:vertex$1,sprite_frag:fragment$1};const UniformsLib={common:{diffuse:{value:new Color(16777215)},opacity:{value:1},map:{value:null},mapTransform:{value:new Matrix3},alphaMap:{value:null},alphaMapTransform:{value:new Matrix3},alphaTest:{value:0}},specularmap:{specularMap:{value:null},specularMapTransform:{value:new Matrix3}},envmap:{envMap:{value:null},envMapRotation:{value:new Matrix3},flipEnvMap:{value:-1},reflectivity:{value:1},ior:{value:1.5},refractionRatio:{value:.98}},aomap:{aoMap:{value:null},aoMapIntensity:{value:1},aoMapTransform:{value:new Matrix3}},lightmap:{lightMap:{value:null},lightMapIntensity:{value:1},lightMapTransform:{value:new Matrix3}},bumpmap:{bumpMap:{value:null},bumpMapTransform:{value:new Matrix3},bumpScale:{value:1}},normalmap:{normalMap:{value:null},normalMapTransform:{value:new Matrix3},normalScale:{value:new Vector2(1,1)}},displacementmap:{displacementMap:{value:null},displacementMapTransform:{value:new Matrix3},displacementScale:{value:1},displacementBias:{value:0}},emissivemap:{emissiveMap:{value:null},emissiveMapTransform:{value:new Matrix3}},metalnessmap:{metalnessMap:{value:null},metalnessMapTransform:{value:new Matrix3}},roughnessmap:{roughnessMap:{value:null},roughnessMapTransform:{value:new Matrix3}},gradientmap:{gradientMap:{value:null}},fog:{fogDensity:{value:25e-5},fogNear:{value:1},fogFar:{value:2e3},fogColor:{value:new Color(16777215)}},lights:{ambientLightColor:{value:[]},lightProbe:{value:[]},directionalLights:{value:[],properties:{direction:{},color:{}}},directionalLightShadows:{value:[],properties:{shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{}}},directionalShadowMap:{value:[]},directionalShadowMatrix:{value:[]},spotLights:{value:[],properties:{color:{},position:{},direction:{},distance:{},coneCos:{},penumbraCos:{},decay:{}}},spotLightShadows:{value:[],properties:{shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{}}},spotLightMap:{value:[]},spotShadowMap:{value:[]},spotLightMatrix:{value:[]},pointLights:{value:[],properties:{color:{},position:{},decay:{},distance:{}}},pointLightShadows:{value:[],properties:{shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{},shadowCameraNear:{},shadowCameraFar:{}}},pointShadowMap:{value:[]},pointShadowMatrix:{value:[]},hemisphereLights:{value:[],properties:{direction:{},skyColor:{},groundColor:{}}},rectAreaLights:{value:[],properties:{color:{},position:{},width:{},height:{}}},ltc_1:{value:null},ltc_2:{value:null}},points:{diffuse:{value:new Color(16777215)},opacity:{value:1},size:{value:1},scale:{value:1},map:{value:null},alphaMap:{value:null},alphaMapTransform:{value:new Matrix3},alphaTest:{value:0},uvTransform:{value:new Matrix3}},sprite:{diffuse:{value:new Color(16777215)},opacity:{value:1},center:{value:new Vector2(.5,.5)},rotation:{value:0},map:{value:null},mapTransform:{value:new Matrix3},alphaMap:{value:null},alphaMapTransform:{value:new Matrix3},alphaTest:{value:0}}};const ShaderLib={basic:{uniforms:mergeUniforms([UniformsLib.common,UniformsLib.specularmap,UniformsLib.envmap,UniformsLib.aomap,UniformsLib.lightmap,UniformsLib.fog]),vertexShader:ShaderChunk.meshbasic_vert,fragmentShader:ShaderChunk.meshbasic_frag},lambert:{uniforms:mergeUniforms([UniformsLib.common,UniformsLib.specularmap,UniformsLib.envmap,UniformsLib.aomap,UniformsLib.lightmap,UniformsLib.emissivemap,UniformsLib.bumpmap,UniformsLib.normalmap,UniformsLib.displacementmap,UniformsLib.fog,UniformsLib.lights,{emissive:{value:new Color(0)}}]),vertexShader:ShaderChunk.meshlambert_vert,fragmentShader:ShaderChunk.meshlambert_frag},phong:{uniforms:mergeUniforms([UniformsLib.common,UniformsLib.specularmap,UniformsLib.envmap,UniformsLib.aomap,UniformsLib.lightmap,UniformsLib.emissivemap,UniformsLib.bumpmap,UniformsLib.normalmap,UniformsLib.displacementmap,UniformsLib.fog,UniformsLib.lights,{emissive:{value:new Color(0)},specular:{value:new Color(1118481)},shininess:{value:30}}]),vertexShader:ShaderChunk.meshphong_vert,fragmentShader:ShaderChunk.meshphong_frag},standard:{uniforms:mergeUniforms([UniformsLib.common,UniformsLib.envmap,UniformsLib.aomap,UniformsLib.lightmap,UniformsLib.emissivemap,UniformsLib.bumpmap,UniformsLib.normalmap,UniformsLib.displacementmap,UniformsLib.roughnessmap,UniformsLib.metalnessmap,UniformsLib.fog,UniformsLib.lights,{emissive:{value:new Color(0)},roughness:{value:1},metalness:{value:0},envMapIntensity:{value:1}}]),vertexShader:ShaderChunk.meshphysical_vert,fragmentShader:ShaderChunk.meshphysical_frag},toon:{uniforms:mergeUniforms([UniformsLib.common,UniformsLib.aomap,UniformsLib.lightmap,UniformsLib.emissivemap,UniformsLib.bumpmap,UniformsLib.normalmap,UniformsLib.displacementmap,UniformsLib.gradientmap,UniformsLib.fog,UniformsLib.lights,{emissive:{value:new Color(0)}}]),vertexShader:ShaderChunk.meshtoon_vert,fragmentShader:ShaderChunk.meshtoon_frag},matcap:{uniforms:mergeUniforms([UniformsLib.common,UniformsLib.bumpmap,UniformsLib.normalmap,UniformsLib.displacementmap,UniformsLib.fog,{matcap:{value:null}}]),vertexShader:ShaderChunk.meshmatcap_vert,fragmentShader:ShaderChunk.meshmatcap_frag},points:{uniforms:mergeUniforms([UniformsLib.points,UniformsLib.fog]),vertexShader:ShaderChunk.points_vert,fragmentShader:ShaderChunk.points_frag},dashed:{uniforms:mergeUniforms([UniformsLib.common,UniformsLib.fog,{scale:{value:1},dashSize:{value:1},totalSize:{value:2}}]),vertexShader:ShaderChunk.linedashed_vert,fragmentShader:ShaderChunk.linedashed_frag},depth:{uniforms:mergeUniforms([UniformsLib.common,UniformsLib.displacementmap]),vertexShader:ShaderChunk.depth_vert,fragmentShader:ShaderChunk.depth_frag},normal:{uniforms:mergeUniforms([UniformsLib.common,UniformsLib.bumpmap,UniformsLib.normalmap,UniformsLib.displacementmap,{opacity:{value:1}}]),vertexShader:ShaderChunk.meshnormal_vert,fragmentShader:ShaderChunk.meshnormal_frag},sprite:{uniforms:mergeUniforms([UniformsLib.sprite,UniformsLib.fog]),vertexShader:ShaderChunk.sprite_vert,fragmentShader:ShaderChunk.sprite_frag},background:{uniforms:{uvTransform:{value:new Matrix3},t2D:{value:null},backgroundIntensity:{value:1}},vertexShader:ShaderChunk.background_vert,fragmentShader:ShaderChunk.background_frag},backgroundCube:{uniforms:{envMap:{value:null},flipEnvMap:{value:-1},backgroundBlurriness:{value:0},backgroundIntensity:{value:1},backgroundRotation:{value:new Matrix3}},vertexShader:ShaderChunk.backgroundCube_vert,fragmentShader:ShaderChunk.backgroundCube_frag},cube:{uniforms:{tCube:{value:null},tFlip:{value:-1},opacity:{value:1}},vertexShader:ShaderChunk.cube_vert,fragmentShader:ShaderChunk.cube_frag},equirect:{uniforms:{tEquirect:{value:null}},vertexShader:ShaderChunk.equirect_vert,fragmentShader:ShaderChunk.equirect_frag},distanceRGBA:{uniforms:mergeUniforms([UniformsLib.common,UniformsLib.displacementmap,{referencePosition:{value:new Vector3},nearDistance:{value:1},farDistance:{value:1e3}}]),vertexShader:ShaderChunk.distanceRGBA_vert,fragmentShader:ShaderChunk.distanceRGBA_frag},shadow:{uniforms:mergeUniforms([UniformsLib.lights,UniformsLib.fog,{color:{value:new Color(0)},opacity:{value:1}}]),vertexShader:ShaderChunk.shadow_vert,fragmentShader:ShaderChunk.shadow_frag}};ShaderLib.physical={uniforms:mergeUniforms([ShaderLib.standard.uniforms,{clearcoat:{value:0},clearcoatMap:{value:null},clearcoatMapTransform:{value:new Matrix3},clearcoatNormalMap:{value:null},clearcoatNormalMapTransform:{value:new Matrix3},clearcoatNormalScale:{value:new Vector2(1,1)},clearcoatRoughness:{value:0},clearcoatRoughnessMap:{value:null},clearcoatRoughnessMapTransform:{value:new Matrix3},dispersion:{value:0},iridescence:{value:0},iridescenceMap:{value:null},iridescenceMapTransform:{value:new Matrix3},iridescenceIOR:{value:1.3},iridescenceThicknessMinimum:{value:100},iridescenceThicknessMaximum:{value:400},iridescenceThicknessMap:{value:null},iridescenceThicknessMapTransform:{value:new Matrix3},sheen:{value:0},sheenColor:{value:new Color(0)},sheenColorMap:{value:null},sheenColorMapTransform:{value:new Matrix3},sheenRoughness:{value:1},sheenRoughnessMap:{value:null},sheenRoughnessMapTransform:{value:new Matrix3},transmission:{value:0},transmissionMap:{value:null},transmissionMapTransform:{value:new Matrix3},transmissionSamplerSize:{value:new Vector2},transmissionSamplerMap:{value:null},thickness:{value:0},thicknessMap:{value:null},thicknessMapTransform:{value:new Matrix3},attenuationDistance:{value:0},attenuationColor:{value:new Color(0)},specularColor:{value:new Color(1,1,1)},specularColorMap:{value:null},specularColorMapTransform:{value:new Matrix3},specularIntensity:{value:1},specularIntensityMap:{value:null},specularIntensityMapTransform:{value:new Matrix3},anisotropyVector:{value:new Vector2},anisotropyMap:{value:null},anisotropyMapTransform:{value:new Matrix3}}]),vertexShader:ShaderChunk.meshphysical_vert,fragmentShader:ShaderChunk.meshphysical_frag};const _rgb={r:0,b:0,g:0};const _e1$1=new Euler;const _m1$1=new Matrix4;function WebGLBackground(r,i,s,a,o,e,l){const c=new Color(0);let u=e===true?0:1;let h;let d;let f=null;let p=0;let m=null;function g(e){let t=e.isScene===true?e.background:null;if(t&&t.isTexture){const n=e.backgroundBlurriness>0;t=(n?s:i).get(t)}return t}function t(e){let t=false;const n=g(e);if(n===null){_(c,u)}else if(n&&n.isColor){_(n,1);t=true}const i=r.xr.getEnvironmentBlendMode();if(i==="additive"){a.buffers.color.setClear(0,0,0,1,l)}else if(i==="alpha-blend"){a.buffers.color.setClear(0,0,0,0,l)}if(r.autoClear||t){r.clear(r.autoClearColor,r.autoClearDepth,r.autoClearStencil)}}function n(e,t){const n=g(t);if(n&&(n.isCubeTexture||n.mapping===CubeUVReflectionMapping)){if(d===undefined){d=new Mesh(new BoxGeometry(1,1,1),new ShaderMaterial({name:"BackgroundCubeMaterial",uniforms:cloneUniforms(ShaderLib.backgroundCube.uniforms),vertexShader:ShaderLib.backgroundCube.vertexShader,fragmentShader:ShaderLib.backgroundCube.fragmentShader,side:BackSide,depthTest:false,depthWrite:false,fog:false}));d.geometry.deleteAttribute("normal");d.geometry.deleteAttribute("uv");d.onBeforeRender=function(e,t,n){this.matrixWorld.copyPosition(n.matrixWorld)};Object.defineProperty(d.material,"envMap",{get:function(){return this.uniforms.envMap.value}});o.update(d)}_e1$1.copy(t.backgroundRotation);_e1$1.x*=-1;_e1$1.y*=-1;_e1$1.z*=-1;if(n.isCubeTexture&&n.isRenderTargetTexture===false){_e1$1.y*=-1;_e1$1.z*=-1}d.material.uniforms.envMap.value=n;d.material.uniforms.flipEnvMap.value=n.isCubeTexture&&n.isRenderTargetTexture===false?-1:1;d.material.uniforms.backgroundBlurriness.value=t.backgroundBlurriness;d.material.uniforms.backgroundIntensity.value=t.backgroundIntensity;d.material.uniforms.backgroundRotation.value.setFromMatrix4(_m1$1.makeRotationFromEuler(_e1$1));d.material.toneMapped=ColorManagement.getTransfer(n.colorSpace)!==SRGBTransfer;if(f!==n||p!==n.version||m!==r.toneMapping){d.material.needsUpdate=true;f=n;p=n.version;m=r.toneMapping}d.layers.enableAll();e.unshift(d,d.geometry,d.material,0,0,null)}else if(n&&n.isTexture){if(h===undefined){h=new Mesh(new PlaneGeometry(2,2),new ShaderMaterial({name:"BackgroundMaterial",uniforms:cloneUniforms(ShaderLib.background.uniforms),vertexShader:ShaderLib.background.vertexShader,fragmentShader:ShaderLib.background.fragmentShader,side:FrontSide,depthTest:false,depthWrite:false,fog:false}));h.geometry.deleteAttribute("normal");Object.defineProperty(h.material,"map",{get:function(){return this.uniforms.t2D.value}});o.update(h)}h.material.uniforms.t2D.value=n;h.material.uniforms.backgroundIntensity.value=t.backgroundIntensity;h.material.toneMapped=ColorManagement.getTransfer(n.colorSpace)!==SRGBTransfer;if(n.matrixAutoUpdate===true){n.updateMatrix()}h.material.uniforms.uvTransform.value.copy(n.matrix);if(f!==n||p!==n.version||m!==r.toneMapping){h.material.needsUpdate=true;f=n;p=n.version;m=r.toneMapping}h.layers.enableAll();e.unshift(h,h.geometry,h.material,0,0,null)}}function _(e,t){e.getRGB(_rgb,getUnlitUniformColorSpace(r));a.buffers.color.setClear(_rgb.r,_rgb.g,_rgb.b,t,l)}return{getClearColor:function(){return c},setClearColor:function(e,t=1){c.set(e);u=t;_(c,u)},getClearAlpha:function(){return u},setClearAlpha:function(e){u=e;_(c,u)},render:t,addToRenderList:n}}function WebGLBindingStates(x,M){const r=x.getParameter(x.MAX_VERTEX_ATTRIBS);const o={};const e=f(null);let h=e;let l=false;function t(e,t,n,i,r){let s=false;const a=d(i,n,t);if(h!==a){h=a;u(h.object)}s=p(e,i,n,r);if(s)m(e,i,n,r);if(r!==null){M.update(r,x.ELEMENT_ARRAY_BUFFER)}if(s||l){l=false;g(e,t,n,i);if(r!==null){x.bindBuffer(x.ELEMENT_ARRAY_BUFFER,M.get(r).buffer)}}}function c(){return x.createVertexArray()}function u(e){return x.bindVertexArray(e)}function s(e){return x.deleteVertexArray(e)}function d(e,t,n){const i=n.wireframe===true;let r=o[e.id];if(r===undefined){r={};o[e.id]=r}let s=r[t.id];if(s===undefined){s={};r[t.id]=s}let a=s[i];if(a===undefined){a=f(c());s[i]=a}return a}function f(e){const t=[];const n=[];const i=[];for(let e=0;e<r;e++){t[e]=0;n[e]=0;i[e]=0}return{geometry:null,program:null,wireframe:false,newAttributes:t,enabledAttributes:n,attributeDivisors:i,object:e,attributes:{},index:null}}function p(t,e,n,i){const r=h.attributes;const s=e.attributes;let a=0;const o=n.getAttributes();for(const l in o){const c=o[l];if(c.location>=0){const u=r[l];let e=s[l];if(e===undefined){if(l==="instanceMatrix"&&t.instanceMatrix)e=t.instanceMatrix;if(l==="instanceColor"&&t.instanceColor)e=t.instanceColor}if(u===undefined)return true;if(u.attribute!==e)return true;if(e&&u.data!==e.data)return true;a++}}if(h.attributesNum!==a)return true;if(h.index!==i)return true;return false}function m(t,e,n,i){const r={};const s=e.attributes;let a=0;const o=n.getAttributes();for(const l in o){const c=o[l];if(c.location>=0){let e=s[l];if(e===undefined){if(l==="instanceMatrix"&&t.instanceMatrix)e=t.instanceMatrix;if(l==="instanceColor"&&t.instanceColor)e=t.instanceColor}const u={};u.attribute=e;if(e&&e.data){u.data=e.data}r[l]=u;a++}}h.attributes=r;h.attributesNum=a;h.index=i}function S(){const n=h.newAttributes;for(let e=0,t=n.length;e<t;e++){n[e]=0}}function b(e){T(e,0)}function T(e,t){const n=h.newAttributes;const i=h.enabledAttributes;const r=h.attributeDivisors;n[e]=1;if(i[e]===0){x.enableVertexAttribArray(e);i[e]=1}if(r[e]!==t){x.vertexAttribDivisor(e,t);r[e]=t}}function A(){const n=h.newAttributes;const i=h.enabledAttributes;for(let e=0,t=i.length;e<t;e++){if(i[e]!==n[e]){x.disableVertexAttribArray(e);i[e]=0}}}function E(e,t,n,i,r,s,a){if(a===true){x.vertexAttribIPointer(e,t,n,r,s)}else{x.vertexAttribPointer(e,t,n,i,r,s)}}function g(e,t,n,i){S();const r=i.attributes;const s=n.getAttributes();const a=t.defaultAttributeValues;for(const o in s){const l=s[o];if(l.location>=0){let t=r[o];if(t===undefined){if(o==="instanceMatrix"&&e.instanceMatrix)t=e.instanceMatrix;if(o==="instanceColor"&&e.instanceColor)t=e.instanceColor}if(t!==undefined){const c=t.normalized;const u=t.itemSize;const h=M.get(t);if(h===undefined)continue;const d=h.buffer;const f=h.type;const p=h.bytesPerElement;const m=f===x.INT||f===x.UNSIGNED_INT||t.gpuType===IntType;if(t.isInterleavedBufferAttribute){const g=t.data;const _=g.stride;const v=t.offset;if(g.isInstancedInterleavedBuffer){for(let e=0;e<l.locationSize;e++){T(l.location+e,g.meshPerAttribute)}if(e.isInstancedMesh!==true&&i._maxInstanceCount===undefined){i._maxInstanceCount=g.meshPerAttribute*g.count}}else{for(let e=0;e<l.locationSize;e++){b(l.location+e)}}x.bindBuffer(x.ARRAY_BUFFER,d);for(let e=0;e<l.locationSize;e++){E(l.location+e,u/l.locationSize,f,c,_*p,(v+u/l.locationSize*e)*p,m)}}else{if(t.isInstancedBufferAttribute){for(let e=0;e<l.locationSize;e++){T(l.location+e,t.meshPerAttribute)}if(e.isInstancedMesh!==true&&i._maxInstanceCount===undefined){i._maxInstanceCount=t.meshPerAttribute*t.count}}else{for(let e=0;e<l.locationSize;e++){b(l.location+e)}}x.bindBuffer(x.ARRAY_BUFFER,d);for(let e=0;e<l.locationSize;e++){E(l.location+e,u/l.locationSize,f,c,u*p,u/l.locationSize*e*p,m)}}}else if(a!==undefined){const y=a[o];if(y!==undefined){switch(y.length){case 2:x.vertexAttrib2fv(l.location,y);break;case 3:x.vertexAttrib3fv(l.location,y);break;case 4:x.vertexAttrib4fv(l.location,y);break;default:x.vertexAttrib1fv(l.location,y)}}}}}A()}function n(){_();for(const e in o){const t=o[e];for(const n in t){const i=t[n];for(const r in i){s(i[r].object);delete i[r]}delete t[n]}delete o[e]}}function i(e){if(o[e.id]===undefined)return;const t=o[e.id];for(const n in t){const i=t[n];for(const r in i){s(i[r].object);delete i[r]}delete t[n]}delete o[e.id]}function a(e){for(const t in o){const n=o[t];if(n[e.id]===undefined)continue;const i=n[e.id];for(const r in i){s(i[r].object);delete i[r]}delete n[e.id]}}function _(){v();l=true;if(h===e)return;h=e;u(h.object)}function v(){e.geometry=null;e.program=null;e.wireframe=false}return{setup:t,reset:_,resetDefaultState:v,dispose:n,releaseStatesOfGeometry:i,releaseStatesOfProgram:a,initAttributes:S,enableAttribute:b,disableUnusedAttributes:A}}function WebGLBufferRenderer(i,t,a){let o;function e(e){o=e}function n(e,t){i.drawArrays(o,e,t);a.update(t,o,1)}function l(e,t,n){if(n===0)return;i.drawArraysInstanced(o,e,t,n);a.update(t,o,n)}function r(n,i,r){if(r===0)return;const e=t.get("WEBGL_multi_draw");if(e===null){for(let e=0;e<r;e++){this.render(n[e],i[e])}}else{e.multiDrawArraysWEBGL(o,n,0,i,0,r);let t=0;for(let e=0;e<r;e++){t+=i[e]}a.update(t,o,1)}}function s(n,i,r,s){if(r===0)return;const e=t.get("WEBGL_multi_draw");if(e===null){for(let e=0;e<n.length;e++){l(n[e],i[e],s[e])}}else{e.multiDrawArraysInstancedWEBGL(o,n,0,i,0,s,0,r);let t=0;for(let e=0;e<r;e++){t+=i[e]}for(let e=0;e<s.length;e++){a.update(t,o,s[e])}}}this.setMode=e;this.render=n;this.renderInstances=l;this.renderMultiDraw=r;this.renderMultiDrawInstances=s}function WebGLCapabilities(n,i,e,r){let t;function s(){if(t!==undefined)return t;if(i.has("EXT_texture_filter_anisotropic")===true){const e=i.get("EXT_texture_filter_anisotropic");t=n.getParameter(e.MAX_TEXTURE_MAX_ANISOTROPY_EXT)}else{t=0}return t}function a(e){if(e!==RGBAFormat&&r.convert(e)!==n.getParameter(n.IMPLEMENTATION_COLOR_READ_FORMAT)){return false}return true}function o(e){const t=e===HalfFloatType&&(i.has("EXT_color_buffer_half_float")||i.has("EXT_color_buffer_float"));if(e!==UnsignedByteType&&r.convert(e)!==n.getParameter(n.IMPLEMENTATION_COLOR_READ_TYPE)&&e!==FloatType&&!t){return false}return true}function l(e){if(e==="highp"){if(n.getShaderPrecisionFormat(n.VERTEX_SHADER,n.HIGH_FLOAT).precision>0&&n.getShaderPrecisionFormat(n.FRAGMENT_SHADER,n.HIGH_FLOAT).precision>0){return"highp"}e="mediump"}if(e==="mediump"){if(n.getShaderPrecisionFormat(n.VERTEX_SHADER,n.MEDIUM_FLOAT).precision>0&&n.getShaderPrecisionFormat(n.FRAGMENT_SHADER,n.MEDIUM_FLOAT).precision>0){return"mediump"}}return"lowp"}let c=e.precision!==undefined?e.precision:"highp";const u=l(c);if(u!==c){console.warn("THREE.WebGLRenderer:",c,"not supported, using",u,"instead.");c=u}const h=e.logarithmicDepthBuffer===true;const d=n.getParameter(n.MAX_TEXTURE_IMAGE_UNITS);const f=n.getParameter(n.MAX_VERTEX_TEXTURE_IMAGE_UNITS);const p=n.getParameter(n.MAX_TEXTURE_SIZE);const m=n.getParameter(n.MAX_CUBE_MAP_TEXTURE_SIZE);const g=n.getParameter(n.MAX_VERTEX_ATTRIBS);const _=n.getParameter(n.MAX_VERTEX_UNIFORM_VECTORS);const v=n.getParameter(n.MAX_VARYING_VECTORS);const y=n.getParameter(n.MAX_FRAGMENT_UNIFORM_VECTORS);const x=f>0;const M=n.getParameter(n.MAX_SAMPLES);return{isWebGL2:true,getMaxAnisotropy:s,getMaxPrecision:l,textureFormatReadable:a,textureTypeReadable:o,precision:c,logarithmicDepthBuffer:h,maxTextures:d,maxVertexTextures:f,maxTextureSize:p,maxCubemapSize:m,maxAttributes:g,maxVertexUniforms:_,maxVaryings:v,maxFragmentUniforms:y,vertexTextures:x,maxSamples:M}}function WebGLClipping(c){const l=this;let u=null,h=0,d=false,f=false;const p=new Plane,m=new Matrix3,g={value:null,needsUpdate:false};this.uniform=g;this.numPlanes=0;this.numIntersection=0;this.init=function(e,t){const n=e.length!==0||t||h!==0||d;d=t;h=e.length;return n};this.beginShadows=function(){f=true;v(null)};this.endShadows=function(){f=false};this.setGlobalState=function(e,t){u=v(e,t,0)};this.setState=function(e,n,i){const r=e.clippingPlanes,s=e.clipIntersection,t=e.clipShadows;const a=c.get(e);if(!d||r===null||r.length===0||f&&!t){if(f){v(null)}else{_()}}else{const o=f?0:h,l=o*4;let t=a.clippingState||null;g.value=t;t=v(r,n,l,i);for(let e=0;e!==l;++e){t[e]=u[e]}a.clippingState=t;this.numIntersection=s?this.numPlanes:0;this.numPlanes+=o}};function _(){if(g.value!==u){g.value=u;g.needsUpdate=h>0}l.numPlanes=h;l.numIntersection=0}function v(n,e,i,t){const r=n!==null?n.length:0;let s=null;if(r!==0){s=g.value;if(t!==true||s===null){const a=i+r*4,o=e.matrixWorldInverse;m.getNormalMatrix(o);if(s===null||s.length<a){s=new Float32Array(a)}for(let e=0,t=i;e!==r;++e,t+=4){p.copy(n[e]).applyMatrix4(o,m);p.normal.toArray(s,t);s[t+3]=p.constant}}g.value=s;g.needsUpdate=true}l.numPlanes=r;l.numIntersection=0;return s}}function WebGLCubeMaps(s){let a=new WeakMap;function o(e,t){if(t===EquirectangularReflectionMapping){e.mapping=CubeReflectionMapping}else if(t===EquirectangularRefractionMapping){e.mapping=CubeRefractionMapping}return e}function e(e){if(e&&e.isTexture){const t=e.mapping;if(t===EquirectangularReflectionMapping||t===EquirectangularRefractionMapping){if(a.has(e)){const n=a.get(e).texture;return o(n,e.mapping)}else{const i=e.image;if(i&&i.height>0){const r=new WebGLCubeRenderTarget(i.height);r.fromEquirectangularTexture(s,e);a.set(e,r);e.addEventListener("dispose",l);return o(r.texture,e.mapping)}else{return null}}}}return e}function l(e){const t=e.target;t.removeEventListener("dispose",l);const n=a.get(t);if(n!==undefined){a.delete(t);n.dispose()}}function t(){a=new WeakMap}return{get:e,dispose:t}}class OrthographicCamera extends Camera{constructor(e=-1,t=1,n=1,i=-1,r=.1,s=2e3){super();this.isOrthographicCamera=true;this.type="OrthographicCamera";this.zoom=1;this.view=null;this.left=e;this.right=t;this.top=n;this.bottom=i;this.near=r;this.far=s;this.updateProjectionMatrix()}copy(e,t){super.copy(e,t);this.left=e.left;this.right=e.right;this.top=e.top;this.bottom=e.bottom;this.near=e.near;this.far=e.far;this.zoom=e.zoom;this.view=e.view===null?null:Object.assign({},e.view);return this}setViewOffset(e,t,n,i,r,s){if(this.view===null){this.view={enabled:true,fullWidth:1,fullHeight:1,offsetX:0,offsetY:0,width:1,height:1}}this.view.enabled=true;this.view.fullWidth=e;this.view.fullHeight=t;this.view.offsetX=n;this.view.offsetY=i;this.view.width=r;this.view.height=s;this.updateProjectionMatrix()}clearViewOffset(){if(this.view!==null){this.view.enabled=false}this.updateProjectionMatrix()}updateProjectionMatrix(){const e=(this.right-this.left)/(2*this.zoom);const t=(this.top-this.bottom)/(2*this.zoom);const n=(this.right+this.left)/2;const i=(this.top+this.bottom)/2;let r=n-e;let s=n+e;let a=i+t;let o=i-t;if(this.view!==null&&this.view.enabled){const l=(this.right-this.left)/this.view.fullWidth/this.zoom;const c=(this.top-this.bottom)/this.view.fullHeight/this.zoom;r+=l*this.view.offsetX;s=r+l*this.view.width;a-=c*this.view.offsetY;o=a-c*this.view.height}this.projectionMatrix.makeOrthographic(r,s,a,o,this.near,this.far,this.coordinateSystem);this.projectionMatrixInverse.copy(this.projectionMatrix).invert()}toJSON(e){const t=super.toJSON(e);t.object.zoom=this.zoom;t.object.left=this.left;t.object.right=this.right;t.object.top=this.top;t.object.bottom=this.bottom;t.object.near=this.near;t.object.far=this.far;if(this.view!==null)t.object.view=Object.assign({},this.view);return t}}const LOD_MIN=4;const EXTRA_LOD_SIGMA=[.125,.215,.35,.446,.526,.582];const MAX_SAMPLES=20;const _flatCamera=new OrthographicCamera;const _clearColor=new Color;let _oldTarget=null;let _oldActiveCubeFace=0;let _oldActiveMipmapLevel=0;let _oldXrEnabled=false;const PHI=(1+Math.sqrt(5))/2;const INV_PHI=1/PHI;const _axisDirections=[new Vector3(1,1,1),new Vector3(-1,1,1),new Vector3(1,1,-1),new Vector3(-1,1,-1),new Vector3(0,PHI,INV_PHI),new Vector3(0,PHI,-INV_PHI),new Vector3(INV_PHI,0,PHI),new Vector3(-INV_PHI,0,PHI),new Vector3(PHI,INV_PHI,0),new Vector3(-PHI,INV_PHI,0)];class PMREMGenerator{constructor(e){this._renderer=e;this._pingPongRenderTarget=null;this._lodMax=0;this._cubeSize=0;this._lodPlanes=[];this._sizeLods=[];this._sigmas=[];this._blurMaterial=null;this._cubemapMaterial=null;this._equirectMaterial=null;this._compileMaterial(this._blurMaterial)}fromScene(e,t=0,n=.1,i=100){_oldTarget=this._renderer.getRenderTarget();_oldActiveCubeFace=this._renderer.getActiveCubeFace();_oldActiveMipmapLevel=this._renderer.getActiveMipmapLevel();_oldXrEnabled=this._renderer.xr.enabled;this._renderer.xr.enabled=false;this._setSize(256);const r=this._allocateTargets();r.depthBuffer=true;this._sceneToCubeUV(e,n,i,r);if(t>0){this._blur(r,0,0,t)}this._applyPMREM(r);this._cleanup(r);return r}fromEquirectangular(e,t=null){return this._fromTexture(e,t)}fromCubemap(e,t=null){return this._fromTexture(e,t)}compileCubemapShader(){if(this._cubemapMaterial===null){this._cubemapMaterial=_getCubemapMaterial();this._compileMaterial(this._cubemapMaterial)}}compileEquirectangularShader(){if(this._equirectMaterial===null){this._equirectMaterial=_getEquirectMaterial();this._compileMaterial(this._equirectMaterial)}}dispose(){this._dispose();if(this._cubemapMaterial!==null)this._cubemapMaterial.dispose();if(this._equirectMaterial!==null)this._equirectMaterial.dispose()}_setSize(e){this._lodMax=Math.floor(Math.log2(e));this._cubeSize=Math.pow(2,this._lodMax)}_dispose(){if(this._blurMaterial!==null)this._blurMaterial.dispose();if(this._pingPongRenderTarget!==null)this._pingPongRenderTarget.dispose();for(let e=0;e<this._lodPlanes.length;e++){this._lodPlanes[e].dispose()}}_cleanup(e){this._renderer.setRenderTarget(_oldTarget,_oldActiveCubeFace,_oldActiveMipmapLevel);this._renderer.xr.enabled=_oldXrEnabled;e.scissorTest=false;_setViewport(e,0,0,e.width,e.height)}_fromTexture(e,t){if(e.mapping===CubeReflectionMapping||e.mapping===CubeRefractionMapping){this._setSize(e.image.length===0?16:e.image[0].width||e.image[0].image.width)}else{this._setSize(e.image.width/4)}_oldTarget=this._renderer.getRenderTarget();_oldActiveCubeFace=this._renderer.getActiveCubeFace();_oldActiveMipmapLevel=this._renderer.getActiveMipmapLevel();_oldXrEnabled=this._renderer.xr.enabled;this._renderer.xr.enabled=false;const n=t||this._allocateTargets();this._textureToCubeUV(e,n);this._applyPMREM(n);this._cleanup(n);return n}_allocateTargets(){const e=3*Math.max(this._cubeSize,16*7);const t=4*this._cubeSize;const n={magFilter:LinearFilter,minFilter:LinearFilter,generateMipmaps:false,type:HalfFloatType,format:RGBAFormat,colorSpace:LinearSRGBColorSpace,depthBuffer:false};const i=_createRenderTarget(e,t,n);if(this._pingPongRenderTarget===null||this._pingPongRenderTarget.width!==e||this._pingPongRenderTarget.height!==t){if(this._pingPongRenderTarget!==null){this._dispose()}this._pingPongRenderTarget=_createRenderTarget(e,t,n);const{_lodMax:r}=this;({sizeLods:this._sizeLods,lodPlanes:this._lodPlanes,sigmas:this._sigmas}=_createPlanes(r));this._blurMaterial=_getBlurShader(r,e,t)}return i}_compileMaterial(e){const t=new Mesh(this._lodPlanes[0],e);this._renderer.compile(t,_flatCamera)}_sceneToCubeUV(t,e,n,i){const r=90;const s=1;const a=new PerspectiveCamera(r,s,e,n);const o=[1,-1,1,1,1,1];const l=[1,1,1,-1,-1,-1];const c=this._renderer;const u=c.autoClear;const h=c.toneMapping;c.getClearColor(_clearColor);c.toneMapping=NoToneMapping;c.autoClear=false;const d=new MeshBasicMaterial({name:"PMREM.Background",side:BackSide,depthWrite:false,depthTest:false});const f=new Mesh(new BoxGeometry,d);let p=false;const m=t.background;if(m){if(m.isColor){d.color.copy(m);t.background=null;p=true}}else{d.color.copy(_clearColor);p=true}for(let e=0;e<6;e++){const g=e%3;if(g===0){a.up.set(0,o[e],0);a.lookAt(l[e],0,0)}else if(g===1){a.up.set(0,0,o[e]);a.lookAt(0,l[e],0)}else{a.up.set(0,o[e],0);a.lookAt(0,0,l[e])}const _=this._cubeSize;_setViewport(i,g*_,e>2?_:0,_,_);c.setRenderTarget(i);if(p){c.render(f,a)}c.render(t,a)}f.geometry.dispose();f.material.dispose();c.toneMapping=h;c.autoClear=u;t.background=m}_textureToCubeUV(e,t){const n=this._renderer;const i=e.mapping===CubeReflectionMapping||e.mapping===CubeRefractionMapping;if(i){if(this._cubemapMaterial===null){this._cubemapMaterial=_getCubemapMaterial()}this._cubemapMaterial.uniforms.flipEnvMap.value=e.isRenderTargetTexture===false?-1:1}else{if(this._equirectMaterial===null){this._equirectMaterial=_getEquirectMaterial()}}const r=i?this._cubemapMaterial:this._equirectMaterial;const s=new Mesh(this._lodPlanes[0],r);const a=r.uniforms;a["envMap"].value=e;const o=this._cubeSize;_setViewport(t,0,0,3*o,2*o);n.setRenderTarget(t);n.render(s,_flatCamera)}_applyPMREM(t){const e=this._renderer;const n=e.autoClear;e.autoClear=false;for(let e=1;e<this._lodPlanes.length;e++){const i=Math.sqrt(this._sigmas[e]*this._sigmas[e]-this._sigmas[e-1]*this._sigmas[e-1]);const r=_axisDirections[(e-1)%_axisDirections.length];this._blur(t,e-1,e,i,r)}e.autoClear=n}_blur(e,t,n,i,r){const s=this._pingPongRenderTarget;this._halfBlur(e,s,t,n,i,"latitudinal",r);this._halfBlur(s,e,n,n,i,"longitudinal",r)}_halfBlur(e,t,n,i,r,s,a){const o=this._renderer;const l=this._blurMaterial;if(s!=="latitudinal"&&s!=="longitudinal"){console.error("blur direction must be either latitudinal or longitudinal!")}const c=3;const u=new Mesh(this._lodPlanes[i],l);const h=l.uniforms;const d=this._sizeLods[n]-1;const f=isFinite(r)?Math.PI/(2*d):2*Math.PI/(2*MAX_SAMPLES-1);const p=r/f;const m=isFinite(r)?1+Math.floor(c*p):MAX_SAMPLES;if(m>MAX_SAMPLES){console.warn(`sigmaRadians, ${r}, is too large and will clip, as it requested ${m} samples when the maximum is set to ${MAX_SAMPLES}`)}const g=[];let _=0;for(let e=0;e<MAX_SAMPLES;++e){const x=e/p;const S=Math.exp(-x*x/2);g.push(S);if(e===0){_+=S}else if(e<m){_+=2*S}}for(let e=0;e<g.length;e++){g[e]=g[e]/_}h["envMap"].value=e.texture;h["samples"].value=m;h["weights"].value=g;h["latitudinal"].value=s==="latitudinal";if(a){h["poleAxis"].value=a}const{_lodMax:v}=this;h["dTheta"].value=f;h["mipInt"].value=v-n;const y=this._sizeLods[i];const x=3*y*(i>v-LOD_MIN?i-v+LOD_MIN:0);const M=4*(this._cubeSize-y);_setViewport(t,x,M,3*y,2*y);o.setRenderTarget(t);o.render(u,_flatCamera)}}function _createPlanes(n){const i=[];const r=[];const s=[];let a=n;const e=n-LOD_MIN+1+EXTRA_LOD_SIGMA.length;for(let t=0;t<e;t++){const o=Math.pow(2,a);r.push(o);let e=1/o;if(t>n-LOD_MIN){e=EXTRA_LOD_SIGMA[t-n+LOD_MIN-1]}else if(t===0){e=0}s.push(e);const l=1/(o-2);const c=-l;const u=1+l;const h=[c,c,u,c,u,u,c,c,u,u,c,u];const d=6;const f=6;const p=3;const m=2;const g=1;const _=new Float32Array(p*f*d);const v=new Float32Array(m*f*d);const y=new Float32Array(g*f*d);for(let e=0;e<d;e++){const M=e%3*2/3-1;const S=e>2?0:-1;const b=[M,S,0,M+2/3,S,0,M+2/3,S+1,0,M,S,0,M+2/3,S+1,0,M,S+1,0];_.set(b,p*f*e);v.set(h,m*f*e);const T=[e,e,e,e,e,e];y.set(T,g*f*e)}const x=new BufferGeometry;x.setAttribute("position",new BufferAttribute(_,p));x.setAttribute("uv",new BufferAttribute(v,m));x.setAttribute("faceIndex",new BufferAttribute(y,g));i.push(x);if(a>LOD_MIN){a--}}return{lodPlanes:i,sizeLods:r,sigmas:s}}function _createRenderTarget(e,t,n){const i=new WebGLRenderTarget(e,t,n);i.texture.mapping=CubeUVReflectionMapping;i.texture.name="PMREM.cubeUv";i.scissorTest=true;return i}function _setViewport(e,t,n,i,r){e.viewport.set(t,n,i,r);e.scissor.set(t,n,i,r)}function _getBlurShader(e,t,n){const i=new Float32Array(MAX_SAMPLES);const r=new Vector3(0,1,0);const s=new ShaderMaterial({name:"SphericalGaussianBlur",defines:{n:MAX_SAMPLES,CUBEUV_TEXEL_WIDTH:1/t,CUBEUV_TEXEL_HEIGHT:1/n,CUBEUV_MAX_MIP:`${e}.0`},uniforms:{envMap:{value:null},samples:{value:1},weights:{value:i},latitudinal:{value:false},dTheta:{value:0},mipInt:{value:0},poleAxis:{value:r}},vertexShader:_getCommonVertexShader(),fragmentShader:`

			precision mediump float;
			precision mediump int;

			varying vec3 vOutputDirection;

			uniform sampler2D envMap;
			uniform int samples;
			uniform float weights[ n ];
			uniform bool latitudinal;
			uniform float dTheta;
			uniform float mipInt;
			uniform vec3 poleAxis;

			#define ENVMAP_TYPE_CUBE_UV
			#include <cube_uv_reflection_fragment>

			vec3 getSample( float theta, vec3 axis ) {

				float cosTheta = cos( theta );
				// Rodrigues' axis-angle rotation
				vec3 sampleDirection = vOutputDirection * cosTheta
					+ cross( axis, vOutputDirection ) * sin( theta )
					+ axis * dot( axis, vOutputDirection ) * ( 1.0 - cosTheta );

				return bilinearCubeUV( envMap, sampleDirection, mipInt );

			}

			void main() {

				vec3 axis = latitudinal ? poleAxis : cross( poleAxis, vOutputDirection );

				if ( all( equal( axis, vec3( 0.0 ) ) ) ) {

					axis = vec3( vOutputDirection.z, 0.0, - vOutputDirection.x );

				}

				axis = normalize( axis );

				gl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );
				gl_FragColor.rgb += weights[ 0 ] * getSample( 0.0, axis );

				for ( int i = 1; i < n; i++ ) {

					if ( i >= samples ) {

						break;

					}

					float theta = dTheta * float( i );
					gl_FragColor.rgb += weights[ i ] * getSample( -1.0 * theta, axis );
					gl_FragColor.rgb += weights[ i ] * getSample( theta, axis );

				}

			}
		`,blending:NoBlending,depthTest:false,depthWrite:false});return s}function _getEquirectMaterial(){return new ShaderMaterial({name:"EquirectangularToCubeUV",uniforms:{envMap:{value:null}},vertexShader:_getCommonVertexShader(),fragmentShader:`

			precision mediump float;
			precision mediump int;

			varying vec3 vOutputDirection;

			uniform sampler2D envMap;

			#include <common>

			void main() {

				vec3 outputDirection = normalize( vOutputDirection );
				vec2 uv = equirectUv( outputDirection );

				gl_FragColor = vec4( texture2D ( envMap, uv ).rgb, 1.0 );

			}
		`,blending:NoBlending,depthTest:false,depthWrite:false})}function _getCubemapMaterial(){return new ShaderMaterial({name:"CubemapToCubeUV",uniforms:{envMap:{value:null},flipEnvMap:{value:-1}},vertexShader:_getCommonVertexShader(),fragmentShader:`

			precision mediump float;
			precision mediump int;

			uniform float flipEnvMap;

			varying vec3 vOutputDirection;

			uniform samplerCube envMap;

			void main() {

				gl_FragColor = textureCube( envMap, vec3( flipEnvMap * vOutputDirection.x, vOutputDirection.yz ) );

			}
		`,blending:NoBlending,depthTest:false,depthWrite:false})}function _getCommonVertexShader(){return`

		precision mediump float;
		precision mediump int;

		attribute float faceIndex;

		varying vec3 vOutputDirection;

		// RH coordinate system; PMREM face-indexing convention
		vec3 getDirection( vec2 uv, float face ) {

			uv = 2.0 * uv - 1.0;

			vec3 direction = vec3( uv, 1.0 );

			if ( face == 0.0 ) {

				direction = direction.zyx; // ( 1, v, u ) pos x

			} else if ( face == 1.0 ) {

				direction = direction.xzy;
				direction.xz *= -1.0; // ( -u, 1, -v ) pos y

			} else if ( face == 2.0 ) {

				direction.x *= -1.0; // ( -u, v, 1 ) pos z

			} else if ( face == 3.0 ) {

				direction = direction.zyx;
				direction.xz *= -1.0; // ( -1, v, -u ) neg x

			} else if ( face == 4.0 ) {

				direction = direction.xzy;
				direction.xy *= -1.0; // ( -u, -1, v ) neg y

			} else if ( face == 5.0 ) {

				direction.z *= -1.0; // ( u, v, -1 ) neg z

			}

			return direction;

		}

		void main() {

			vOutputDirection = getDirection( uv, faceIndex );
			gl_Position = vec4( position, 1.0 );

		}
	`}function WebGLCubeUVMaps(a){let o=new WeakMap;let l=null;function e(t){if(t&&t.isTexture){const e=t.mapping;const n=e===EquirectangularReflectionMapping||e===EquirectangularRefractionMapping;const i=e===CubeReflectionMapping||e===CubeRefractionMapping;if(n||i){let e=o.get(t);const r=e!==undefined?e.texture.pmremVersion:0;if(t.isRenderTargetTexture&&t.pmremVersion!==r){if(l===null)l=new PMREMGenerator(a);e=n?l.fromEquirectangular(t,e):l.fromCubemap(t,e);e.texture.pmremVersion=t.pmremVersion;o.set(t,e);return e.texture}else{if(e!==undefined){return e.texture}else{const s=t.image;if(n&&s&&s.height>0||i&&s&&c(s)){if(l===null)l=new PMREMGenerator(a);e=n?l.fromEquirectangular(t):l.fromCubemap(t);e.texture.pmremVersion=t.pmremVersion;o.set(t,e);t.addEventListener("dispose",u);return e.texture}else{return null}}}}}return t}function c(t){let n=0;const i=6;for(let e=0;e<i;e++){if(t[e]!==undefined)n++}return n===i}function u(e){const t=e.target;t.removeEventListener("dispose",u);const n=o.get(t);if(n!==undefined){o.delete(t);n.dispose()}}function t(){o=new WeakMap;if(l!==null){l.dispose();l=null}}return{get:e,dispose:t}}function WebGLExtensions(n){const i={};function r(e){if(i[e]!==undefined){return i[e]}let t;switch(e){case"WEBGL_depth_texture":t=n.getExtension("WEBGL_depth_texture")||n.getExtension("MOZ_WEBGL_depth_texture")||n.getExtension("WEBKIT_WEBGL_depth_texture");break;case"EXT_texture_filter_anisotropic":t=n.getExtension("EXT_texture_filter_anisotropic")||n.getExtension("MOZ_EXT_texture_filter_anisotropic")||n.getExtension("WEBKIT_EXT_texture_filter_anisotropic");break;case"WEBGL_compressed_texture_s3tc":t=n.getExtension("WEBGL_compressed_texture_s3tc")||n.getExtension("MOZ_WEBGL_compressed_texture_s3tc")||n.getExtension("WEBKIT_WEBGL_compressed_texture_s3tc");break;case"WEBGL_compressed_texture_pvrtc":t=n.getExtension("WEBGL_compressed_texture_pvrtc")||n.getExtension("WEBKIT_WEBGL_compressed_texture_pvrtc");break;default:t=n.getExtension(e)}i[e]=t;return t}return{has:function(e){return r(e)!==null},init:function(){r("EXT_color_buffer_float");r("WEBGL_clip_cull_distance");r("OES_texture_float_linear");r("EXT_color_buffer_half_float");r("WEBGL_multisampled_render_to_texture");r("WEBGL_render_shared_exponent")},get:function(e){const t=r(e);if(t===null){console.warn("THREE.WebGLRenderer: "+e+" extension not supported.")}return t}}}function WebGLGeometries(s,h,a,o){const l={};const d=new WeakMap;function c(e){const t=e.target;if(t.index!==null){h.remove(t.index)}for(const i in t.attributes){h.remove(t.attributes[i])}for(const i in t.morphAttributes){const r=t.morphAttributes[i];for(let e=0,t=r.length;e<t;e++){h.remove(r[e])}}t.removeEventListener("dispose",c);delete l[t.id];const n=d.get(t);if(n){h.remove(n);d.delete(t)}o.releaseStatesOfGeometry(t);if(t.isInstancedBufferGeometry===true){delete t._maxInstanceCount}a.memory.geometries--}function e(e,t){if(l[t.id]===true)return t;t.addEventListener("dispose",c);l[t.id]=true;a.memory.geometries++;return t}function t(e){const t=e.attributes;for(const i in t){h.update(t[i],s.ARRAY_BUFFER)}const n=e.morphAttributes;for(const i in n){const r=n[i];for(let e=0,t=r.length;e<t;e++){h.update(r[e],s.ARRAY_BUFFER)}}}function i(e){const n=[];const t=e.index;const i=e.attributes.position;let r=0;if(t!==null){const o=t.array;r=t.version;for(let e=0,t=o.length;e<t;e+=3){const l=o[e+0];const c=o[e+1];const u=o[e+2];n.push(l,c,c,u,u,l)}}else if(i!==undefined){const o=i.array;r=i.version;for(let e=0,t=o.length/3-1;e<t;e+=3){const l=e+0;const c=e+1;const u=e+2;n.push(l,c,c,u,u,l)}}else{return}const s=new(arrayNeedsUint32(n)?Uint32BufferAttribute:Uint16BufferAttribute)(n,1);s.version=r;const a=d.get(e);if(a)h.remove(a);d.set(e,s)}function n(e){const t=d.get(e);if(t){const n=e.index;if(n!==null){if(t.version<n.version){i(e)}}}else{i(e)}return d.get(e)}return{get:e,update:t,getWireframeAttribute:n}}function WebGLIndexedBufferRenderer(i,t,a){let o;function e(e){o=e}let l,c;function n(e){l=e.type;c=e.bytesPerElement}function r(e,t){i.drawElements(o,t,l,e*c);a.update(t,o,1)}function u(e,t,n){if(n===0)return;i.drawElementsInstanced(o,t,l,e*c,n);a.update(t,o,n)}function s(n,i,r){if(r===0)return;const e=t.get("WEBGL_multi_draw");if(e===null){for(let e=0;e<r;e++){this.render(n[e]/c,i[e])}}else{e.multiDrawElementsWEBGL(o,i,0,l,n,0,r);let t=0;for(let e=0;e<r;e++){t+=i[e]}a.update(t,o,1)}}function h(n,i,r,s){if(r===0)return;const e=t.get("WEBGL_multi_draw");if(e===null){for(let e=0;e<n.length;e++){u(n[e]/c,i[e],s[e])}}else{e.multiDrawElementsInstancedWEBGL(o,i,0,l,n,0,s,0,r);let t=0;for(let e=0;e<r;e++){t+=i[e]}for(let e=0;e<s.length;e++){a.update(t,o,s[e])}}}this.setMode=e;this.setIndex=n;this.render=r;this.renderInstances=u;this.renderMultiDraw=s;this.renderMultiDrawInstances=h}function WebGLInfo(i){const e={geometries:0,textures:0};const r={frame:0,calls:0,triangles:0,points:0,lines:0};function t(e,t,n){r.calls++;switch(t){case i.TRIANGLES:r.triangles+=n*(e/3);break;case i.LINES:r.lines+=n*(e/2);break;case i.LINE_STRIP:r.lines+=n*(e-1);break;case i.LINE_LOOP:r.lines+=n*e;break;case i.POINTS:r.points+=n*e;break;default:console.error("THREE.WebGLInfo: Unknown draw mode:",t);break}}function n(){r.calls=0;r.triangles=0;r.points=0;r.lines=0}return{memory:e,render:r,programs:null,autoReset:true,reset:n,update:t}}function WebGLMorphtargets(b,T,A){const E=new WeakMap;const w=new Vector4;function e(e,i,n){const r=e.morphTargetInfluences;const t=i.morphAttributes.position||i.morphAttributes.normal||i.morphAttributes.color;const s=t!==undefined?t.length:0;let a=E.get(i);if(a===undefined||a.count!==s){if(a!==undefined)a.texture.dispose();const l=i.morphAttributes.position!==undefined;const c=i.morphAttributes.normal!==undefined;const u=i.morphAttributes.color!==undefined;const h=i.morphAttributes.position||[];const d=i.morphAttributes.normal||[];const f=i.morphAttributes.color||[];let e=0;if(l===true)e=1;if(c===true)e=2;if(u===true)e=3;let t=i.attributes.position.count*e;let n=1;if(t>T.maxTextureSize){n=Math.ceil(t/T.maxTextureSize);t=T.maxTextureSize}const p=new Float32Array(t*n*4*s);const m=new DataArrayTexture(p,t,n,s);m.type=FloatType;m.needsUpdate=true;const g=e*4;for(let e=0;e<s;e++){const _=h[e];const v=d[e];const y=f[e];const x=t*n*4*e;for(let e=0;e<_.count;e++){const M=e*g;if(l===true){w.fromBufferAttribute(_,e);p[x+M+0]=w.x;p[x+M+1]=w.y;p[x+M+2]=w.z;p[x+M+3]=0}if(c===true){w.fromBufferAttribute(v,e);p[x+M+4]=w.x;p[x+M+5]=w.y;p[x+M+6]=w.z;p[x+M+7]=0}if(u===true){w.fromBufferAttribute(y,e);p[x+M+8]=w.x;p[x+M+9]=w.y;p[x+M+10]=w.z;p[x+M+11]=y.itemSize===4?w.w:1}}}a={count:s,texture:m,size:new Vector2(t,n)};E.set(i,a);function o(){m.dispose();E.delete(i);i.removeEventListener("dispose",o)}i.addEventListener("dispose",o)}if(e.isInstancedMesh===true&&e.morphTexture!==null){n.getUniforms().setValue(b,"morphTexture",e.morphTexture,A)}else{let t=0;for(let e=0;e<r.length;e++){t+=r[e]}const S=i.morphTargetsRelative?1:1-t;n.getUniforms().setValue(b,"morphTargetBaseInfluence",S);n.getUniforms().setValue(b,"morphTargetInfluences",r)}n.getUniforms().setValue(b,"morphTargetsTexture",a.texture,A);n.getUniforms().setValue(b,"morphTargetsTextureSize",a.size)}return{update:e}}function WebGLObjects(s,a,o,l){let c=new WeakMap;function e(e){const t=l.render.frame;const n=e.geometry;const i=a.get(e,n);if(c.get(i)!==t){a.update(i);c.set(i,t)}if(e.isInstancedMesh){if(e.hasEventListener("dispose",u)===false){e.addEventListener("dispose",u)}if(c.get(e)!==t){o.update(e.instanceMatrix,s.ARRAY_BUFFER);if(e.instanceColor!==null){o.update(e.instanceColor,s.ARRAY_BUFFER)}c.set(e,t)}}if(e.isSkinnedMesh){const r=e.skeleton;if(c.get(r)!==t){r.update();c.set(r,t)}}return i}function t(){c=new WeakMap}function u(e){const t=e.target;t.removeEventListener("dispose",u);o.remove(t.instanceMatrix);if(t.instanceColor!==null)o.remove(t.instanceColor)}return{update:e,dispose:t}}class DepthTexture extends Texture{constructor(e,t,n,i,r,s,a,o,l,c){c=c!==undefined?c:DepthFormat;if(c!==DepthFormat&&c!==DepthStencilFormat){throw new Error("DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat")}if(n===undefined&&c===DepthFormat)n=UnsignedIntType;if(n===undefined&&c===DepthStencilFormat)n=UnsignedInt248Type;super(null,i,r,s,a,o,c,n,l);this.isDepthTexture=true;this.image={width:e,height:t};this.magFilter=a!==undefined?a:NearestFilter;this.minFilter=o!==undefined?o:NearestFilter;this.flipY=false;this.generateMipmaps=false;this.compareFunction=null}copy(e){super.copy(e);this.compareFunction=e.compareFunction;return this}toJSON(e){const t=super.toJSON(e);if(this.compareFunction!==null)t.compareFunction=this.compareFunction;return t}}const emptyTexture=new Texture;const emptyShadowTexture=new DepthTexture(1,1);emptyShadowTexture.compareFunction=LessEqualCompare;const emptyArrayTexture=new DataArrayTexture;const empty3dTexture=new Data3DTexture;const emptyCubeTexture=new CubeTexture;const arrayCacheF32=[];const arrayCacheI32=[];const mat4array=new Float32Array(16);const mat3array=new Float32Array(9);const mat2array=new Float32Array(4);function flatten(n,i,r){const e=n[0];if(e<=0||e>0)return n;const t=i*r;let s=arrayCacheF32[t];if(s===undefined){s=new Float32Array(t);arrayCacheF32[t]=s}if(i!==0){e.toArray(s,0);for(let e=1,t=0;e!==i;++e){t+=r;n[e].toArray(s,t)}}return s}function arraysEqual(n,i){if(n.length!==i.length)return false;for(let e=0,t=n.length;e<t;e++){if(n[e]!==i[e])return false}return true}function copyArray(n,i){for(let e=0,t=i.length;e<t;e++){n[e]=i[e]}}function allocTexUnits(t,n){let i=arrayCacheI32[n];if(i===undefined){i=new Int32Array(n);arrayCacheI32[n]=i}for(let e=0;e!==n;++e){i[e]=t.allocateTextureUnit()}return i}function setValueV1f(e,t){const n=this.cache;if(n[0]===t)return;e.uniform1f(this.addr,t);n[0]=t}function setValueV2f(e,t){const n=this.cache;if(t.x!==undefined){if(n[0]!==t.x||n[1]!==t.y){e.uniform2f(this.addr,t.x,t.y);n[0]=t.x;n[1]=t.y}}else{if(arraysEqual(n,t))return;e.uniform2fv(this.addr,t);copyArray(n,t)}}function setValueV3f(e,t){const n=this.cache;if(t.x!==undefined){if(n[0]!==t.x||n[1]!==t.y||n[2]!==t.z){e.uniform3f(this.addr,t.x,t.y,t.z);n[0]=t.x;n[1]=t.y;n[2]=t.z}}else if(t.r!==undefined){if(n[0]!==t.r||n[1]!==t.g||n[2]!==t.b){e.uniform3f(this.addr,t.r,t.g,t.b);n[0]=t.r;n[1]=t.g;n[2]=t.b}}else{if(arraysEqual(n,t))return;e.uniform3fv(this.addr,t);copyArray(n,t)}}function setValueV4f(e,t){const n=this.cache;if(t.x!==undefined){if(n[0]!==t.x||n[1]!==t.y||n[2]!==t.z||n[3]!==t.w){e.uniform4f(this.addr,t.x,t.y,t.z,t.w);n[0]=t.x;n[1]=t.y;n[2]=t.z;n[3]=t.w}}else{if(arraysEqual(n,t))return;e.uniform4fv(this.addr,t);copyArray(n,t)}}function setValueM2(e,t){const n=this.cache;const i=t.elements;if(i===undefined){if(arraysEqual(n,t))return;e.uniformMatrix2fv(this.addr,false,t);copyArray(n,t)}else{if(arraysEqual(n,i))return;mat2array.set(i);e.uniformMatrix2fv(this.addr,false,mat2array);copyArray(n,i)}}function setValueM3(e,t){const n=this.cache;const i=t.elements;if(i===undefined){if(arraysEqual(n,t))return;e.uniformMatrix3fv(this.addr,false,t);copyArray(n,t)}else{if(arraysEqual(n,i))return;mat3array.set(i);e.uniformMatrix3fv(this.addr,false,mat3array);copyArray(n,i)}}function setValueM4(e,t){const n=this.cache;const i=t.elements;if(i===undefined){if(arraysEqual(n,t))return;e.uniformMatrix4fv(this.addr,false,t);copyArray(n,t)}else{if(arraysEqual(n,i))return;mat4array.set(i);e.uniformMatrix4fv(this.addr,false,mat4array);copyArray(n,i)}}function setValueV1i(e,t){const n=this.cache;if(n[0]===t)return;e.uniform1i(this.addr,t);n[0]=t}function setValueV2i(e,t){const n=this.cache;if(t.x!==undefined){if(n[0]!==t.x||n[1]!==t.y){e.uniform2i(this.addr,t.x,t.y);n[0]=t.x;n[1]=t.y}}else{if(arraysEqual(n,t))return;e.uniform2iv(this.addr,t);copyArray(n,t)}}function setValueV3i(e,t){const n=this.cache;if(t.x!==undefined){if(n[0]!==t.x||n[1]!==t.y||n[2]!==t.z){e.uniform3i(this.addr,t.x,t.y,t.z);n[0]=t.x;n[1]=t.y;n[2]=t.z}}else{if(arraysEqual(n,t))return;e.uniform3iv(this.addr,t);copyArray(n,t)}}function setValueV4i(e,t){const n=this.cache;if(t.x!==undefined){if(n[0]!==t.x||n[1]!==t.y||n[2]!==t.z||n[3]!==t.w){e.uniform4i(this.addr,t.x,t.y,t.z,t.w);n[0]=t.x;n[1]=t.y;n[2]=t.z;n[3]=t.w}}else{if(arraysEqual(n,t))return;e.uniform4iv(this.addr,t);copyArray(n,t)}}function setValueV1ui(e,t){const n=this.cache;if(n[0]===t)return;e.uniform1ui(this.addr,t);n[0]=t}function setValueV2ui(e,t){const n=this.cache;if(t.x!==undefined){if(n[0]!==t.x||n[1]!==t.y){e.uniform2ui(this.addr,t.x,t.y);n[0]=t.x;n[1]=t.y}}else{if(arraysEqual(n,t))return;e.uniform2uiv(this.addr,t);copyArray(n,t)}}function setValueV3ui(e,t){const n=this.cache;if(t.x!==undefined){if(n[0]!==t.x||n[1]!==t.y||n[2]!==t.z){e.uniform3ui(this.addr,t.x,t.y,t.z);n[0]=t.x;n[1]=t.y;n[2]=t.z}}else{if(arraysEqual(n,t))return;e.uniform3uiv(this.addr,t);copyArray(n,t)}}function setValueV4ui(e,t){const n=this.cache;if(t.x!==undefined){if(n[0]!==t.x||n[1]!==t.y||n[2]!==t.z||n[3]!==t.w){e.uniform4ui(this.addr,t.x,t.y,t.z,t.w);n[0]=t.x;n[1]=t.y;n[2]=t.z;n[3]=t.w}}else{if(arraysEqual(n,t))return;e.uniform4uiv(this.addr,t);copyArray(n,t)}}function setValueT1(e,t,n){const i=this.cache;const r=n.allocateTextureUnit();if(i[0]!==r){e.uniform1i(this.addr,r);i[0]=r}const s=this.type===e.SAMPLER_2D_SHADOW?emptyShadowTexture:emptyTexture;n.setTexture2D(t||s,r)}function setValueT3D1(e,t,n){const i=this.cache;const r=n.allocateTextureUnit();if(i[0]!==r){e.uniform1i(this.addr,r);i[0]=r}n.setTexture3D(t||empty3dTexture,r)}function setValueT6(e,t,n){const i=this.cache;const r=n.allocateTextureUnit();if(i[0]!==r){e.uniform1i(this.addr,r);i[0]=r}n.setTextureCube(t||emptyCubeTexture,r)}function setValueT2DArray1(e,t,n){const i=this.cache;const r=n.allocateTextureUnit();if(i[0]!==r){e.uniform1i(this.addr,r);i[0]=r}n.setTexture2DArray(t||emptyArrayTexture,r)}function getSingularSetter(e){switch(e){case 5126:return setValueV1f;case 35664:return setValueV2f;case 35665:return setValueV3f;case 35666:return setValueV4f;case 35674:return setValueM2;case 35675:return setValueM3;case 35676:return setValueM4;case 5124:case 35670:return setValueV1i;case 35667:case 35671:return setValueV2i;case 35668:case 35672:return setValueV3i;case 35669:case 35673:return setValueV4i;case 5125:return setValueV1ui;case 36294:return setValueV2ui;case 36295:return setValueV3ui;case 36296:return setValueV4ui;case 35678:case 36198:case 36298:case 36306:case 35682:return setValueT1;case 35679:case 36299:case 36307:return setValueT3D1;case 35680:case 36300:case 36308:case 36293:return setValueT6;case 36289:case 36303:case 36311:case 36292:return setValueT2DArray1}}function setValueV1fArray(e,t){e.uniform1fv(this.addr,t)}function setValueV2fArray(e,t){const n=flatten(t,this.size,2);e.uniform2fv(this.addr,n)}function setValueV3fArray(e,t){const n=flatten(t,this.size,3);e.uniform3fv(this.addr,n)}function setValueV4fArray(e,t){const n=flatten(t,this.size,4);e.uniform4fv(this.addr,n)}function setValueM2Array(e,t){const n=flatten(t,this.size,4);e.uniformMatrix2fv(this.addr,false,n)}function setValueM3Array(e,t){const n=flatten(t,this.size,9);e.uniformMatrix3fv(this.addr,false,n)}function setValueM4Array(e,t){const n=flatten(t,this.size,16);e.uniformMatrix4fv(this.addr,false,n)}function setValueV1iArray(e,t){e.uniform1iv(this.addr,t)}function setValueV2iArray(e,t){e.uniform2iv(this.addr,t)}function setValueV3iArray(e,t){e.uniform3iv(this.addr,t)}function setValueV4iArray(e,t){e.uniform4iv(this.addr,t)}function setValueV1uiArray(e,t){e.uniform1uiv(this.addr,t)}function setValueV2uiArray(e,t){e.uniform2uiv(this.addr,t)}function setValueV3uiArray(e,t){e.uniform3uiv(this.addr,t)}function setValueV4uiArray(e,t){e.uniform4uiv(this.addr,t)}function setValueT1Array(e,t,n){const i=this.cache;const r=t.length;const s=allocTexUnits(n,r);if(!arraysEqual(i,s)){e.uniform1iv(this.addr,s);copyArray(i,s)}for(let e=0;e!==r;++e){n.setTexture2D(t[e]||emptyTexture,s[e])}}function setValueT3DArray(e,t,n){const i=this.cache;const r=t.length;const s=allocTexUnits(n,r);if(!arraysEqual(i,s)){e.uniform1iv(this.addr,s);copyArray(i,s)}for(let e=0;e!==r;++e){n.setTexture3D(t[e]||empty3dTexture,s[e])}}function setValueT6Array(e,t,n){const i=this.cache;const r=t.length;const s=allocTexUnits(n,r);if(!arraysEqual(i,s)){e.uniform1iv(this.addr,s);copyArray(i,s)}for(let e=0;e!==r;++e){n.setTextureCube(t[e]||emptyCubeTexture,s[e])}}function setValueT2DArrayArray(e,t,n){const i=this.cache;const r=t.length;const s=allocTexUnits(n,r);if(!arraysEqual(i,s)){e.uniform1iv(this.addr,s);copyArray(i,s)}for(let e=0;e!==r;++e){n.setTexture2DArray(t[e]||emptyArrayTexture,s[e])}}function getPureArraySetter(e){switch(e){case 5126:return setValueV1fArray;case 35664:return setValueV2fArray;case 35665:return setValueV3fArray;case 35666:return setValueV4fArray;case 35674:return setValueM2Array;case 35675:return setValueM3Array;case 35676:return setValueM4Array;case 5124:case 35670:return setValueV1iArray;case 35667:case 35671:return setValueV2iArray;case 35668:case 35672:return setValueV3iArray;case 35669:case 35673:return setValueV4iArray;case 5125:return setValueV1uiArray;case 36294:return setValueV2uiArray;case 36295:return setValueV3uiArray;case 36296:return setValueV4uiArray;case 35678:case 36198:case 36298:case 36306:case 35682:return setValueT1Array;case 35679:case 36299:case 36307:return setValueT3DArray;case 35680:case 36300:case 36308:case 36293:return setValueT6Array;case 36289:case 36303:case 36311:case 36292:return setValueT2DArrayArray}}class SingleUniform{constructor(e,t,n){this.id=e;this.addr=n;this.cache=[];this.type=t.type;this.setValue=getSingularSetter(t.type)}}class PureArrayUniform{constructor(e,t,n){this.id=e;this.addr=n;this.cache=[];this.type=t.type;this.size=t.size;this.setValue=getPureArraySetter(t.type)}}class StructuredUniform{constructor(e){this.id=e;this.seq=[];this.map={}}setValue(n,i,r){const s=this.seq;for(let e=0,t=s.length;e!==t;++e){const a=s[e];a.setValue(n,i[a.id],r)}}}const RePathPart=/(\w+)(\])?(\[|\.)?/g;function addUniform(e,t){e.seq.push(t);e.map[t.id]=t}function parseUniform(e,n,i){const r=e.name,s=r.length;RePathPart.lastIndex=0;while(true){const a=RePathPart.exec(r),o=RePathPart.lastIndex;let t=a[1];const l=a[2]==="]",c=a[3];if(l)t=t|0;if(c===undefined||c==="["&&o+2===s){addUniform(i,c===undefined?new SingleUniform(t,e,n):new PureArrayUniform(t,e,n));break}else{const u=i.map;let e=u[t];if(e===undefined){e=new StructuredUniform(t);addUniform(i,e)}i=e}}}class WebGLUniforms{constructor(t,n){this.seq=[];this.map={};const i=t.getProgramParameter(n,t.ACTIVE_UNIFORMS);for(let e=0;e<i;++e){const r=t.getActiveUniform(n,e),s=t.getUniformLocation(n,r.name);parseUniform(r,s,this)}}setValue(e,t,n,i){const r=this.map[t];if(r!==undefined)r.setValue(e,n,i)}setOptional(e,t,n){const i=t[n];if(i!==undefined)this.setValue(e,n,i)}static upload(n,i,r,s){for(let e=0,t=i.length;e!==t;++e){const a=i[e],o=r[a.id];if(o.needsUpdate!==false){a.setValue(n,o.value,s)}}}static seqWithValue(n,i){const r=[];for(let e=0,t=n.length;e!==t;++e){const s=n[e];if(s.id in i)r.push(s)}return r}}function WebGLShader(e,t,n){const i=e.createShader(t);e.shaderSource(i,n);e.compileShader(i);return i}const COMPLETION_STATUS_KHR=37297;let programIdCount=0;function handleSource(e,t){const n=e.split("\n");const i=[];const r=Math.max(t-6,0);const s=Math.min(t+6,n.length);for(let e=r;e<s;e++){const a=e+1;i.push(`${a===t?">":" "} ${a}: ${n[e]}`)}return i.join("\n")}function getEncodingComponents(e){const t=ColorManagement.getPrimaries(ColorManagement.workingColorSpace);const n=ColorManagement.getPrimaries(e);let i;if(t===n){i=""}else if(t===P3Primaries&&n===Rec709Primaries){i="LinearDisplayP3ToLinearSRGB"}else if(t===Rec709Primaries&&n===P3Primaries){i="LinearSRGBToLinearDisplayP3"}switch(e){case LinearSRGBColorSpace:case LinearDisplayP3ColorSpace:return[i,"LinearTransferOETF"];case SRGBColorSpace:case DisplayP3ColorSpace:return[i,"sRGBTransferOETF"];default:console.warn("THREE.WebGLProgram: Unsupported color space:",e);return[i,"LinearTransferOETF"]}}function getShaderErrors(e,t,n){const i=e.getShaderParameter(t,e.COMPILE_STATUS);const r=e.getShaderInfoLog(t).trim();if(i&&r==="")return"";const s=/ERROR: 0:(\d+)/.exec(r);if(s){const a=parseInt(s[1]);return n.toUpperCase()+"\n\n"+r+"\n\n"+handleSource(e.getShaderSource(t),a)}else{return r}}function getTexelEncodingFunction(e,t){const n=getEncodingComponents(t);return`vec4 ${e}( vec4 value ) { return ${n[0]}( ${n[1]}( value ) ); }`}function getToneMappingFunction(e,t){let n;switch(t){case LinearToneMapping:n="Linear";break;case ReinhardToneMapping:n="Reinhard";break;case CineonToneMapping:n="OptimizedCineon";break;case ACESFilmicToneMapping:n="ACESFilmic";break;case AgXToneMapping:n="AgX";break;case NeutralToneMapping:n="Neutral";break;case CustomToneMapping:n="Custom";break;default:console.warn("THREE.WebGLProgram: Unsupported toneMapping:",t);n="Linear"}return"vec3 "+e+"( vec3 color ) { return "+n+"ToneMapping( color ); }"}function generateVertexExtensions(e){const t=[e.extensionClipCullDistance?"#extension GL_ANGLE_clip_cull_distance : require":"",e.extensionMultiDraw?"#extension GL_ANGLE_multi_draw : require":""];return t.filter(filterEmptyLine).join("\n")}function generateDefines(e){const t=[];for(const n in e){const i=e[n];if(i===false)continue;t.push("#define "+n+" "+i)}return t.join("\n")}function fetchAttributeLocations(n,i){const r={};const e=n.getProgramParameter(i,n.ACTIVE_ATTRIBUTES);for(let t=0;t<e;t++){const s=n.getActiveAttrib(i,t);const a=s.name;let e=1;if(s.type===n.FLOAT_MAT2)e=2;if(s.type===n.FLOAT_MAT3)e=3;if(s.type===n.FLOAT_MAT4)e=4;r[a]={type:s.type,location:n.getAttribLocation(i,a),locationSize:e}}return r}function filterEmptyLine(e){return e!==""}function replaceLightNums(e,t){const n=t.numSpotLightShadows+t.numSpotLightMaps-t.numSpotLightShadowsWithMaps;return e.replace(/NUM_DIR_LIGHTS/g,t.numDirLights).replace(/NUM_SPOT_LIGHTS/g,t.numSpotLights).replace(/NUM_SPOT_LIGHT_MAPS/g,t.numSpotLightMaps).replace(/NUM_SPOT_LIGHT_COORDS/g,n).replace(/NUM_RECT_AREA_LIGHTS/g,t.numRectAreaLights).replace(/NUM_POINT_LIGHTS/g,t.numPointLights).replace(/NUM_HEMI_LIGHTS/g,t.numHemiLights).replace(/NUM_DIR_LIGHT_SHADOWS/g,t.numDirLightShadows).replace(/NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS/g,t.numSpotLightShadowsWithMaps).replace(/NUM_SPOT_LIGHT_SHADOWS/g,t.numSpotLightShadows).replace(/NUM_POINT_LIGHT_SHADOWS/g,t.numPointLightShadows)}function replaceClippingPlaneNums(e,t){return e.replace(/NUM_CLIPPING_PLANES/g,t.numClippingPlanes).replace(/UNION_CLIPPING_PLANES/g,t.numClippingPlanes-t.numClipIntersection)}const includePattern=/^[ \t]*#include +<([\w\d./]+)>/gm;function resolveIncludes(e){return e.replace(includePattern,includeReplacer)}const shaderChunkMap=new Map;function includeReplacer(e,t){let n=ShaderChunk[t];if(n===undefined){const i=shaderChunkMap.get(t);if(i!==undefined){n=ShaderChunk[i];console.warn('THREE.WebGLRenderer: Shader chunk "%s" has been deprecated. Use "%s" instead.',t,i)}else{throw new Error("Can not resolve #include <"+t+">")}}return resolveIncludes(n)}const unrollLoopPattern=/#pragma unroll_loop_start\s+for\s*\(\s*int\s+i\s*=\s*(\d+)\s*;\s*i\s*<\s*(\d+)\s*;\s*i\s*\+\+\s*\)\s*{([\s\S]+?)}\s+#pragma unroll_loop_end/g;function unrollLoops(e){return e.replace(unrollLoopPattern,loopReplacer)}function loopReplacer(e,t,n,i){let r="";for(let e=parseInt(t);e<parseInt(n);e++){r+=i.replace(/\[\s*i\s*\]/g,"[ "+e+" ]").replace(/UNROLLED_LOOP_INDEX/g,e)}return r}function generatePrecision(e){let t=`precision ${e.precision} float;
	precision ${e.precision} int;
	precision ${e.precision} sampler2D;
	precision ${e.precision} samplerCube;
	precision ${e.precision} sampler3D;
	precision ${e.precision} sampler2DArray;
	precision ${e.precision} sampler2DShadow;
	precision ${e.precision} samplerCubeShadow;
	precision ${e.precision} sampler2DArrayShadow;
	precision ${e.precision} isampler2D;
	precision ${e.precision} isampler3D;
	precision ${e.precision} isamplerCube;
	precision ${e.precision} isampler2DArray;
	precision ${e.precision} usampler2D;
	precision ${e.precision} usampler3D;
	precision ${e.precision} usamplerCube;
	precision ${e.precision} usampler2DArray;
	`;if(e.precision==="highp"){t+="\n#define HIGH_PRECISION"}else if(e.precision==="mediump"){t+="\n#define MEDIUM_PRECISION"}else if(e.precision==="lowp"){t+="\n#define LOW_PRECISION"}return t}function generateShadowMapTypeDefine(e){let t="SHADOWMAP_TYPE_BASIC";if(e.shadowMapType===PCFShadowMap){t="SHADOWMAP_TYPE_PCF"}else if(e.shadowMapType===PCFSoftShadowMap){t="SHADOWMAP_TYPE_PCF_SOFT"}else if(e.shadowMapType===VSMShadowMap){t="SHADOWMAP_TYPE_VSM"}return t}function generateEnvMapTypeDefine(e){let t="ENVMAP_TYPE_CUBE";if(e.envMap){switch(e.envMapMode){case CubeReflectionMapping:case CubeRefractionMapping:t="ENVMAP_TYPE_CUBE";break;case CubeUVReflectionMapping:t="ENVMAP_TYPE_CUBE_UV";break}}return t}function generateEnvMapModeDefine(e){let t="ENVMAP_MODE_REFLECTION";if(e.envMap){switch(e.envMapMode){case CubeRefractionMapping:t="ENVMAP_MODE_REFRACTION";break}}return t}function generateEnvMapBlendingDefine(e){let t="ENVMAP_BLENDING_NONE";if(e.envMap){switch(e.combine){case MultiplyOperation:t="ENVMAP_BLENDING_MULTIPLY";break;case MixOperation:t="ENVMAP_BLENDING_MIX";break;case AddOperation:t="ENVMAP_BLENDING_ADD";break}}return t}function generateCubeUVSize(e){const t=e.envMapCubeUVHeight;if(t===null)return null;const n=Math.log2(t)-2;const i=1/t;const r=1/(3*Math.max(Math.pow(2,n),7*16));return{texelWidth:r,texelHeight:i,maxMip:n}}function WebGLProgram(l,e,t,n){const c=l.getContext();const i=t.defines;let r=t.vertexShader;let s=t.fragmentShader;const a=generateShadowMapTypeDefine(t);const o=generateEnvMapTypeDefine(t);const u=generateEnvMapModeDefine(t);const h=generateEnvMapBlendingDefine(t);const d=generateCubeUVSize(t);const f=generateVertexExtensions(t);const p=generateDefines(i);const m=c.createProgram();let g,_;let v=t.glslVersion?"#version "+t.glslVersion+"\n":"";if(t.isRawShaderMaterial){g=["#define SHADER_TYPE "+t.shaderType,"#define SHADER_NAME "+t.shaderName,p].filter(filterEmptyLine).join("\n");if(g.length>0){g+="\n"}_=["#define SHADER_TYPE "+t.shaderType,"#define SHADER_NAME "+t.shaderName,p].filter(filterEmptyLine).join("\n");if(_.length>0){_+="\n"}}else{g=[generatePrecision(t),"#define SHADER_TYPE "+t.shaderType,"#define SHADER_NAME "+t.shaderName,p,t.extensionClipCullDistance?"#define USE_CLIP_DISTANCE":"",t.batching?"#define USE_BATCHING":"",t.instancing?"#define USE_INSTANCING":"",t.instancingColor?"#define USE_INSTANCING_COLOR":"",t.instancingMorph?"#define USE_INSTANCING_MORPH":"",t.useFog&&t.fog?"#define USE_FOG":"",t.useFog&&t.fogExp2?"#define FOG_EXP2":"",t.map?"#define USE_MAP":"",t.envMap?"#define USE_ENVMAP":"",t.envMap?"#define "+u:"",t.lightMap?"#define USE_LIGHTMAP":"",t.aoMap?"#define USE_AOMAP":"",t.bumpMap?"#define USE_BUMPMAP":"",t.normalMap?"#define USE_NORMALMAP":"",t.normalMapObjectSpace?"#define USE_NORMALMAP_OBJECTSPACE":"",t.normalMapTangentSpace?"#define USE_NORMALMAP_TANGENTSPACE":"",t.displacementMap?"#define USE_DISPLACEMENTMAP":"",t.emissiveMap?"#define USE_EMISSIVEMAP":"",t.anisotropy?"#define USE_ANISOTROPY":"",t.anisotropyMap?"#define USE_ANISOTROPYMAP":"",t.clearcoatMap?"#define USE_CLEARCOATMAP":"",t.clearcoatRoughnessMap?"#define USE_CLEARCOAT_ROUGHNESSMAP":"",t.clearcoatNormalMap?"#define USE_CLEARCOAT_NORMALMAP":"",t.iridescenceMap?"#define USE_IRIDESCENCEMAP":"",t.iridescenceThicknessMap?"#define USE_IRIDESCENCE_THICKNESSMAP":"",t.specularMap?"#define USE_SPECULARMAP":"",t.specularColorMap?"#define USE_SPECULAR_COLORMAP":"",t.specularIntensityMap?"#define USE_SPECULAR_INTENSITYMAP":"",t.roughnessMap?"#define USE_ROUGHNESSMAP":"",t.metalnessMap?"#define USE_METALNESSMAP":"",t.alphaMap?"#define USE_ALPHAMAP":"",t.alphaHash?"#define USE_ALPHAHASH":"",t.transmission?"#define USE_TRANSMISSION":"",t.transmissionMap?"#define USE_TRANSMISSIONMAP":"",t.thicknessMap?"#define USE_THICKNESSMAP":"",t.sheenColorMap?"#define USE_SHEEN_COLORMAP":"",t.sheenRoughnessMap?"#define USE_SHEEN_ROUGHNESSMAP":"",t.mapUv?"#define MAP_UV "+t.mapUv:"",t.alphaMapUv?"#define ALPHAMAP_UV "+t.alphaMapUv:"",t.lightMapUv?"#define LIGHTMAP_UV "+t.lightMapUv:"",t.aoMapUv?"#define AOMAP_UV "+t.aoMapUv:"",t.emissiveMapUv?"#define EMISSIVEMAP_UV "+t.emissiveMapUv:"",t.bumpMapUv?"#define BUMPMAP_UV "+t.bumpMapUv:"",t.normalMapUv?"#define NORMALMAP_UV "+t.normalMapUv:"",t.displacementMapUv?"#define DISPLACEMENTMAP_UV "+t.displacementMapUv:"",t.metalnessMapUv?"#define METALNESSMAP_UV "+t.metalnessMapUv:"",t.roughnessMapUv?"#define ROUGHNESSMAP_UV "+t.roughnessMapUv:"",t.anisotropyMapUv?"#define ANISOTROPYMAP_UV "+t.anisotropyMapUv:"",t.clearcoatMapUv?"#define CLEARCOATMAP_UV "+t.clearcoatMapUv:"",t.clearcoatNormalMapUv?"#define CLEARCOAT_NORMALMAP_UV "+t.clearcoatNormalMapUv:"",t.clearcoatRoughnessMapUv?"#define CLEARCOAT_ROUGHNESSMAP_UV "+t.clearcoatRoughnessMapUv:"",t.iridescenceMapUv?"#define IRIDESCENCEMAP_UV "+t.iridescenceMapUv:"",t.iridescenceThicknessMapUv?"#define IRIDESCENCE_THICKNESSMAP_UV "+t.iridescenceThicknessMapUv:"",t.sheenColorMapUv?"#define SHEEN_COLORMAP_UV "+t.sheenColorMapUv:"",t.sheenRoughnessMapUv?"#define SHEEN_ROUGHNESSMAP_UV "+t.sheenRoughnessMapUv:"",t.specularMapUv?"#define SPECULARMAP_UV "+t.specularMapUv:"",t.specularColorMapUv?"#define SPECULAR_COLORMAP_UV "+t.specularColorMapUv:"",t.specularIntensityMapUv?"#define SPECULAR_INTENSITYMAP_UV "+t.specularIntensityMapUv:"",t.transmissionMapUv?"#define TRANSMISSIONMAP_UV "+t.transmissionMapUv:"",t.thicknessMapUv?"#define THICKNESSMAP_UV "+t.thicknessMapUv:"",t.vertexTangents&&t.flatShading===false?"#define USE_TANGENT":"",t.vertexColors?"#define USE_COLOR":"",t.vertexAlphas?"#define USE_COLOR_ALPHA":"",t.vertexUv1s?"#define USE_UV1":"",t.vertexUv2s?"#define USE_UV2":"",t.vertexUv3s?"#define USE_UV3":"",t.pointsUvs?"#define USE_POINTS_UV":"",t.flatShading?"#define FLAT_SHADED":"",t.skinning?"#define USE_SKINNING":"",t.morphTargets?"#define USE_MORPHTARGETS":"",t.morphNormals&&t.flatShading===false?"#define USE_MORPHNORMALS":"",t.morphColors?"#define USE_MORPHCOLORS":"",t.morphTargetsCount>0?"#define MORPHTARGETS_TEXTURE":"",t.morphTargetsCount>0?"#define MORPHTARGETS_TEXTURE_STRIDE "+t.morphTextureStride:"",t.morphTargetsCount>0?"#define MORPHTARGETS_COUNT "+t.morphTargetsCount:"",t.doubleSided?"#define DOUBLE_SIDED":"",t.flipSided?"#define FLIP_SIDED":"",t.shadowMapEnabled?"#define USE_SHADOWMAP":"",t.shadowMapEnabled?"#define "+a:"",t.sizeAttenuation?"#define USE_SIZEATTENUATION":"",t.numLightProbes>0?"#define USE_LIGHT_PROBES":"",t.useLegacyLights?"#define LEGACY_LIGHTS":"",t.logarithmicDepthBuffer?"#define USE_LOGDEPTHBUF":"","uniform mat4 modelMatrix;","uniform mat4 modelViewMatrix;","uniform mat4 projectionMatrix;","uniform mat4 viewMatrix;","uniform mat3 normalMatrix;","uniform vec3 cameraPosition;","uniform bool isOrthographic;","#ifdef USE_INSTANCING","\tattribute mat4 instanceMatrix;","#endif","#ifdef USE_INSTANCING_COLOR","\tattribute vec3 instanceColor;","#endif","#ifdef USE_INSTANCING_MORPH","\tuniform sampler2D morphTexture;","#endif","attribute vec3 position;","attribute vec3 normal;","attribute vec2 uv;","#ifdef USE_UV1","\tattribute vec2 uv1;","#endif","#ifdef USE_UV2","\tattribute vec2 uv2;","#endif","#ifdef USE_UV3","\tattribute vec2 uv3;","#endif","#ifdef USE_TANGENT","\tattribute vec4 tangent;","#endif","#if defined( USE_COLOR_ALPHA )","\tattribute vec4 color;","#elif defined( USE_COLOR )","\tattribute vec3 color;","#endif","#if ( defined( USE_MORPHTARGETS ) && ! defined( MORPHTARGETS_TEXTURE ) )","\tattribute vec3 morphTarget0;","\tattribute vec3 morphTarget1;","\tattribute vec3 morphTarget2;","\tattribute vec3 morphTarget3;","\t#ifdef USE_MORPHNORMALS","\t\tattribute vec3 morphNormal0;","\t\tattribute vec3 morphNormal1;","\t\tattribute vec3 morphNormal2;","\t\tattribute vec3 morphNormal3;","\t#else","\t\tattribute vec3 morphTarget4;","\t\tattribute vec3 morphTarget5;","\t\tattribute vec3 morphTarget6;","\t\tattribute vec3 morphTarget7;","\t#endif","#endif","#ifdef USE_SKINNING","\tattribute vec4 skinIndex;","\tattribute vec4 skinWeight;","#endif","\n"].filter(filterEmptyLine).join("\n");_=[generatePrecision(t),"#define SHADER_TYPE "+t.shaderType,"#define SHADER_NAME "+t.shaderName,p,t.useFog&&t.fog?"#define USE_FOG":"",t.useFog&&t.fogExp2?"#define FOG_EXP2":"",t.alphaToCoverage?"#define ALPHA_TO_COVERAGE":"",t.map?"#define USE_MAP":"",t.matcap?"#define USE_MATCAP":"",t.envMap?"#define USE_ENVMAP":"",t.envMap?"#define "+o:"",t.envMap?"#define "+u:"",t.envMap?"#define "+h:"",d?"#define CUBEUV_TEXEL_WIDTH "+d.texelWidth:"",d?"#define CUBEUV_TEXEL_HEIGHT "+d.texelHeight:"",d?"#define CUBEUV_MAX_MIP "+d.maxMip+".0":"",t.lightMap?"#define USE_LIGHTMAP":"",t.aoMap?"#define USE_AOMAP":"",t.bumpMap?"#define USE_BUMPMAP":"",t.normalMap?"#define USE_NORMALMAP":"",t.normalMapObjectSpace?"#define USE_NORMALMAP_OBJECTSPACE":"",t.normalMapTangentSpace?"#define USE_NORMALMAP_TANGENTSPACE":"",t.emissiveMap?"#define USE_EMISSIVEMAP":"",t.anisotropy?"#define USE_ANISOTROPY":"",t.anisotropyMap?"#define USE_ANISOTROPYMAP":"",t.clearcoat?"#define USE_CLEARCOAT":"",t.clearcoatMap?"#define USE_CLEARCOATMAP":"",t.clearcoatRoughnessMap?"#define USE_CLEARCOAT_ROUGHNESSMAP":"",t.clearcoatNormalMap?"#define USE_CLEARCOAT_NORMALMAP":"",t.dispersion?"#define USE_DISPERSION":"",t.iridescence?"#define USE_IRIDESCENCE":"",t.iridescenceMap?"#define USE_IRIDESCENCEMAP":"",t.iridescenceThicknessMap?"#define USE_IRIDESCENCE_THICKNESSMAP":"",t.specularMap?"#define USE_SPECULARMAP":"",t.specularColorMap?"#define USE_SPECULAR_COLORMAP":"",t.specularIntensityMap?"#define USE_SPECULAR_INTENSITYMAP":"",t.roughnessMap?"#define USE_ROUGHNESSMAP":"",t.metalnessMap?"#define USE_METALNESSMAP":"",t.alphaMap?"#define USE_ALPHAMAP":"",t.alphaTest?"#define USE_ALPHATEST":"",t.alphaHash?"#define USE_ALPHAHASH":"",t.sheen?"#define USE_SHEEN":"",t.sheenColorMap?"#define USE_SHEEN_COLORMAP":"",t.sheenRoughnessMap?"#define USE_SHEEN_ROUGHNESSMAP":"",t.transmission?"#define USE_TRANSMISSION":"",t.transmissionMap?"#define USE_TRANSMISSIONMAP":"",t.thicknessMap?"#define USE_THICKNESSMAP":"",t.vertexTangents&&t.flatShading===false?"#define USE_TANGENT":"",t.vertexColors||t.instancingColor?"#define USE_COLOR":"",t.vertexAlphas?"#define USE_COLOR_ALPHA":"",t.vertexUv1s?"#define USE_UV1":"",t.vertexUv2s?"#define USE_UV2":"",t.vertexUv3s?"#define USE_UV3":"",t.pointsUvs?"#define USE_POINTS_UV":"",t.gradientMap?"#define USE_GRADIENTMAP":"",t.flatShading?"#define FLAT_SHADED":"",t.doubleSided?"#define DOUBLE_SIDED":"",t.flipSided?"#define FLIP_SIDED":"",t.shadowMapEnabled?"#define USE_SHADOWMAP":"",t.shadowMapEnabled?"#define "+a:"",t.premultipliedAlpha?"#define PREMULTIPLIED_ALPHA":"",t.numLightProbes>0?"#define USE_LIGHT_PROBES":"",t.useLegacyLights?"#define LEGACY_LIGHTS":"",t.decodeVideoTexture?"#define DECODE_VIDEO_TEXTURE":"",t.logarithmicDepthBuffer?"#define USE_LOGDEPTHBUF":"","uniform mat4 viewMatrix;","uniform vec3 cameraPosition;","uniform bool isOrthographic;",t.toneMapping!==NoToneMapping?"#define TONE_MAPPING":"",t.toneMapping!==NoToneMapping?ShaderChunk["tonemapping_pars_fragment"]:"",t.toneMapping!==NoToneMapping?getToneMappingFunction("toneMapping",t.toneMapping):"",t.dithering?"#define DITHERING":"",t.opaque?"#define OPAQUE":"",ShaderChunk["colorspace_pars_fragment"],getTexelEncodingFunction("linearToOutputTexel",t.outputColorSpace),t.useDepthPacking?"#define DEPTH_PACKING "+t.depthPacking:"","\n"].filter(filterEmptyLine).join("\n")}r=resolveIncludes(r);r=replaceLightNums(r,t);r=replaceClippingPlaneNums(r,t);s=resolveIncludes(s);s=replaceLightNums(s,t);s=replaceClippingPlaneNums(s,t);r=unrollLoops(r);s=unrollLoops(s);if(t.isRawShaderMaterial!==true){v="#version 300 es\n";g=[f,"#define attribute in","#define varying out","#define texture2D texture"].join("\n")+"\n"+g;_=["#define varying in",t.glslVersion===GLSL3?"":"layout(location = 0) out highp vec4 pc_fragColor;",t.glslVersion===GLSL3?"":"#define gl_FragColor pc_fragColor","#define gl_FragDepthEXT gl_FragDepth","#define texture2D texture","#define textureCube texture","#define texture2DProj textureProj","#define texture2DLodEXT textureLod","#define texture2DProjLodEXT textureProjLod","#define textureCubeLodEXT textureLod","#define texture2DGradEXT textureGrad","#define texture2DProjGradEXT textureProjGrad","#define textureCubeGradEXT textureGrad"].join("\n")+"\n"+_}const y=v+g+r;const x=v+_+s;const M=WebGLShader(c,c.VERTEX_SHADER,y);const S=WebGLShader(c,c.FRAGMENT_SHADER,x);c.attachShader(m,M);c.attachShader(m,S);if(t.index0AttributeName!==undefined){c.bindAttribLocation(m,0,t.index0AttributeName)}else if(t.morphTargets===true){c.bindAttribLocation(m,0,"position")}c.linkProgram(m);function b(n){if(l.debug.checkShaderErrors){const i=c.getProgramInfoLog(m).trim();const r=c.getShaderInfoLog(M).trim();const s=c.getShaderInfoLog(S).trim();let e=true;let t=true;if(c.getProgramParameter(m,c.LINK_STATUS)===false){e=false;if(typeof l.debug.onShaderError==="function"){l.debug.onShaderError(c,m,M,S)}else{const a=getShaderErrors(c,M,"vertex");const o=getShaderErrors(c,S,"fragment");console.error("THREE.WebGLProgram: Shader Error "+c.getError()+" - "+"VALIDATE_STATUS "+c.getProgramParameter(m,c.VALIDATE_STATUS)+"\n\n"+"Material Name: "+n.name+"\n"+"Material Type: "+n.type+"\n\n"+"Program Info Log: "+i+"\n"+a+"\n"+o)}}else if(i!==""){console.warn("THREE.WebGLProgram: Program Info Log:",i)}else if(r===""||s===""){t=false}if(t){n.diagnostics={runnable:e,programLog:i,vertexShader:{log:r,prefix:g},fragmentShader:{log:s,prefix:_}}}}c.deleteShader(M);c.deleteShader(S);T=new WebGLUniforms(c,m);A=fetchAttributeLocations(c,m)}let T;this.getUniforms=function(){if(T===undefined){b(this)}return T};let A;this.getAttributes=function(){if(A===undefined){b(this)}return A};let E=t.rendererExtensionParallelShaderCompile===false;this.isReady=function(){if(E===false){E=c.getProgramParameter(m,COMPLETION_STATUS_KHR)}return E};this.destroy=function(){n.releaseStatesOfProgram(this);c.deleteProgram(m);this.program=undefined};this.type=t.shaderType;this.name=t.shaderName;this.id=programIdCount++;this.cacheKey=e;this.usedTimes=1;this.program=m;this.vertexShader=M;this.fragmentShader=S;return this}let _id$1=0;class WebGLShaderCache{constructor(){this.shaderCache=new Map;this.materialCache=new Map}update(e){const t=e.vertexShader;const n=e.fragmentShader;const i=this._getShaderStage(t);const r=this._getShaderStage(n);const s=this._getShaderCacheForMaterial(e);if(s.has(i)===false){s.add(i);i.usedTimes++}if(s.has(r)===false){s.add(r);r.usedTimes++}return this}remove(e){const t=this.materialCache.get(e);for(const n of t){n.usedTimes--;if(n.usedTimes===0)this.shaderCache.delete(n.code)}this.materialCache.delete(e);return this}getVertexShaderID(e){return this._getShaderStage(e.vertexShader).id}getFragmentShaderID(e){return this._getShaderStage(e.fragmentShader).id}dispose(){this.shaderCache.clear();this.materialCache.clear()}_getShaderCacheForMaterial(e){const t=this.materialCache;let n=t.get(e);if(n===undefined){n=new Set;t.set(e,n)}return n}_getShaderStage(e){const t=this.shaderCache;let n=t.get(e);if(n===undefined){n=new WebGLShaderStage(e);t.set(e,n)}return n}}class WebGLShaderStage{constructor(e){this.id=_id$1++;this.code=e;this.usedTimes=0}}function WebGLPrograms(se,ae,oe,le,ce,t,ue){const n=new Layers;const he=new WebGLShaderCache;const de=new Set;const s=[];const fe=ce.logarithmicDepthBuffer;const pe=ce.vertexTextures;let me=ce.precision;const ge={MeshDepthMaterial:"depth",MeshDistanceMaterial:"distanceRGBA",MeshNormalMaterial:"normal",MeshBasicMaterial:"basic",MeshLambertMaterial:"lambert",MeshPhongMaterial:"phong",MeshToonMaterial:"toon",MeshStandardMaterial:"physical",MeshPhysicalMaterial:"physical",MeshMatcapMaterial:"matcap",LineBasicMaterial:"basic",LineDashedMaterial:"dashed",PointsMaterial:"points",ShadowMaterial:"shadow",SpriteMaterial:"sprite"};function _e(e){de.add(e);if(e===0)return"uv";return`uv${e}`}function e(e,t,B,n,i){const r=n.fog;const s=i.geometry;const F=e.isMeshStandardMaterial?n.environment:null;const a=(e.isMeshStandardMaterial?oe:ae).get(e.envMap||F);const O=!!a&&a.mapping===CubeUVReflectionMapping?a.image.height:null;const o=ge[e.type];if(e.precision!==null){me=ce.getMaxPrecision(e.precision);if(me!==e.precision){console.warn("THREE.WebGLProgram.getParameters:",e.precision,"not supported, using",me,"instead.")}}const l=s.morphAttributes.position||s.morphAttributes.normal||s.morphAttributes.color;const V=l!==undefined?l.length:0;let c=0;if(s.morphAttributes.position!==undefined)c=1;if(s.morphAttributes.normal!==undefined)c=2;if(s.morphAttributes.color!==undefined)c=3;let u,h;let d,f;if(o){const N=ShaderLib[o];u=N.vertexShader;h=N.fragmentShader}else{u=e.vertexShader;h=e.fragmentShader;he.update(e);d=he.getVertexShaderID(e);f=he.getFragmentShaderID(e)}const p=se.getRenderTarget();const m=i.isInstancedMesh===true;const G=i.isBatchedMesh===true;const g=!!e.map;const z=!!e.matcap;const _=!!a;const v=!!e.aoMap;const y=!!e.lightMap;const x=!!e.bumpMap;const M=!!e.normalMap;const S=!!e.displacementMap;const b=!!e.emissiveMap;const T=!!e.metalnessMap;const A=!!e.roughnessMap;const E=e.anisotropy>0;const w=e.clearcoat>0;const k=e.dispersion>0;const C=e.iridescence>0;const R=e.sheen>0;const L=e.transmission>0;const P=E&&!!e.anisotropyMap;const I=w&&!!e.clearcoatMap;const H=w&&!!e.clearcoatNormalMap;const W=w&&!!e.clearcoatRoughnessMap;const $=C&&!!e.iridescenceMap;const X=C&&!!e.iridescenceThicknessMap;const j=R&&!!e.sheenColorMap;const q=R&&!!e.sheenRoughnessMap;const Y=!!e.specularMap;const Z=!!e.specularColorMap;const J=!!e.specularIntensityMap;const K=L&&!!e.transmissionMap;const Q=L&&!!e.thicknessMap;const ee=!!e.gradientMap;const U=!!e.alphaMap;const te=e.alphaTest>0;const ne=!!e.alphaHash;const ie=!!e.extensions;let re=NoToneMapping;if(e.toneMapped){if(p===null||p.isXRRenderTarget===true){re=se.toneMapping}}const D={shaderID:o,shaderType:e.type,shaderName:e.name,vertexShader:u,fragmentShader:h,defines:e.defines,customVertexShaderID:d,customFragmentShaderID:f,isRawShaderMaterial:e.isRawShaderMaterial===true,glslVersion:e.glslVersion,precision:me,batching:G,instancing:m,instancingColor:m&&i.instanceColor!==null,instancingMorph:m&&i.morphTexture!==null,supportsVertexTextures:pe,outputColorSpace:p===null?se.outputColorSpace:p.isXRRenderTarget===true?p.texture.colorSpace:LinearSRGBColorSpace,alphaToCoverage:!!e.alphaToCoverage,map:g,matcap:z,envMap:_,envMapMode:_&&a.mapping,envMapCubeUVHeight:O,aoMap:v,lightMap:y,bumpMap:x,normalMap:M,displacementMap:pe&&S,emissiveMap:b,normalMapObjectSpace:M&&e.normalMapType===ObjectSpaceNormalMap,normalMapTangentSpace:M&&e.normalMapType===TangentSpaceNormalMap,metalnessMap:T,roughnessMap:A,anisotropy:E,anisotropyMap:P,clearcoat:w,clearcoatMap:I,clearcoatNormalMap:H,clearcoatRoughnessMap:W,dispersion:k,iridescence:C,iridescenceMap:$,iridescenceThicknessMap:X,sheen:R,sheenColorMap:j,sheenRoughnessMap:q,specularMap:Y,specularColorMap:Z,specularIntensityMap:J,transmission:L,transmissionMap:K,thicknessMap:Q,gradientMap:ee,opaque:e.transparent===false&&e.blending===NormalBlending&&e.alphaToCoverage===false,alphaMap:U,alphaTest:te,alphaHash:ne,combine:e.combine,mapUv:g&&_e(e.map.channel),aoMapUv:v&&_e(e.aoMap.channel),lightMapUv:y&&_e(e.lightMap.channel),bumpMapUv:x&&_e(e.bumpMap.channel),normalMapUv:M&&_e(e.normalMap.channel),displacementMapUv:S&&_e(e.displacementMap.channel),emissiveMapUv:b&&_e(e.emissiveMap.channel),metalnessMapUv:T&&_e(e.metalnessMap.channel),roughnessMapUv:A&&_e(e.roughnessMap.channel),anisotropyMapUv:P&&_e(e.anisotropyMap.channel),clearcoatMapUv:I&&_e(e.clearcoatMap.channel),clearcoatNormalMapUv:H&&_e(e.clearcoatNormalMap.channel),clearcoatRoughnessMapUv:W&&_e(e.clearcoatRoughnessMap.channel),iridescenceMapUv:$&&_e(e.iridescenceMap.channel),iridescenceThicknessMapUv:X&&_e(e.iridescenceThicknessMap.channel),sheenColorMapUv:j&&_e(e.sheenColorMap.channel),sheenRoughnessMapUv:q&&_e(e.sheenRoughnessMap.channel),specularMapUv:Y&&_e(e.specularMap.channel),specularColorMapUv:Z&&_e(e.specularColorMap.channel),specularIntensityMapUv:J&&_e(e.specularIntensityMap.channel),transmissionMapUv:K&&_e(e.transmissionMap.channel),thicknessMapUv:Q&&_e(e.thicknessMap.channel),alphaMapUv:U&&_e(e.alphaMap.channel),vertexTangents:!!s.attributes.tangent&&(M||E),vertexColors:e.vertexColors,vertexAlphas:e.vertexColors===true&&!!s.attributes.color&&s.attributes.color.itemSize===4,pointsUvs:i.isPoints===true&&!!s.attributes.uv&&(g||U),fog:!!r,useFog:e.fog===true,fogExp2:!!r&&r.isFogExp2,flatShading:e.flatShading===true,sizeAttenuation:e.sizeAttenuation===true,logarithmicDepthBuffer:fe,skinning:i.isSkinnedMesh===true,morphTargets:s.morphAttributes.position!==undefined,morphNormals:s.morphAttributes.normal!==undefined,morphColors:s.morphAttributes.color!==undefined,morphTargetsCount:V,morphTextureStride:c,numDirLights:t.directional.length,numPointLights:t.point.length,numSpotLights:t.spot.length,numSpotLightMaps:t.spotLightMap.length,numRectAreaLights:t.rectArea.length,numHemiLights:t.hemi.length,numDirLightShadows:t.directionalShadowMap.length,numPointLightShadows:t.pointShadowMap.length,numSpotLightShadows:t.spotShadowMap.length,numSpotLightShadowsWithMaps:t.numSpotLightShadowsWithMaps,numLightProbes:t.numLightProbes,numClippingPlanes:ue.numPlanes,numClipIntersection:ue.numIntersection,dithering:e.dithering,shadowMapEnabled:se.shadowMap.enabled&&B.length>0,shadowMapType:se.shadowMap.type,toneMapping:re,useLegacyLights:se._useLegacyLights,decodeVideoTexture:g&&e.map.isVideoTexture===true&&ColorManagement.getTransfer(e.map.colorSpace)===SRGBTransfer,premultipliedAlpha:e.premultipliedAlpha,doubleSided:e.side===DoubleSide,flipSided:e.side===BackSide,useDepthPacking:e.depthPacking>=0,depthPacking:e.depthPacking||0,index0AttributeName:e.index0AttributeName,extensionClipCullDistance:ie&&e.extensions.clipCullDistance===true&&le.has("WEBGL_clip_cull_distance"),extensionMultiDraw:ie&&e.extensions.multiDraw===true&&le.has("WEBGL_multi_draw"),rendererExtensionParallelShaderCompile:le.has("KHR_parallel_shader_compile"),customProgramCacheKey:e.customProgramCacheKey()};D.vertexUv1s=de.has(1);D.vertexUv2s=de.has(2);D.vertexUv3s=de.has(3);de.clear();return D}function i(e){const t=[];if(e.shaderID){t.push(e.shaderID)}else{t.push(e.customVertexShaderID);t.push(e.customFragmentShaderID)}if(e.defines!==undefined){for(const n in e.defines){t.push(n);t.push(e.defines[n])}}if(e.isRawShaderMaterial===false){r(t,e);a(t,e);t.push(se.outputColorSpace)}t.push(e.customProgramCacheKey);return t.join()}function r(e,t){e.push(t.precision);e.push(t.outputColorSpace);e.push(t.envMapMode);e.push(t.envMapCubeUVHeight);e.push(t.mapUv);e.push(t.alphaMapUv);e.push(t.lightMapUv);e.push(t.aoMapUv);e.push(t.bumpMapUv);e.push(t.normalMapUv);e.push(t.displacementMapUv);e.push(t.emissiveMapUv);e.push(t.metalnessMapUv);e.push(t.roughnessMapUv);e.push(t.anisotropyMapUv);e.push(t.clearcoatMapUv);e.push(t.clearcoatNormalMapUv);e.push(t.clearcoatRoughnessMapUv);e.push(t.iridescenceMapUv);e.push(t.iridescenceThicknessMapUv);e.push(t.sheenColorMapUv);e.push(t.sheenRoughnessMapUv);e.push(t.specularMapUv);e.push(t.specularColorMapUv);e.push(t.specularIntensityMapUv);e.push(t.transmissionMapUv);e.push(t.thicknessMapUv);e.push(t.combine);e.push(t.fogExp2);e.push(t.sizeAttenuation);e.push(t.morphTargetsCount);e.push(t.morphAttributeCount);e.push(t.numDirLights);e.push(t.numPointLights);e.push(t.numSpotLights);e.push(t.numSpotLightMaps);e.push(t.numHemiLights);e.push(t.numRectAreaLights);e.push(t.numDirLightShadows);e.push(t.numPointLightShadows);e.push(t.numSpotLightShadows);e.push(t.numSpotLightShadowsWithMaps);e.push(t.numLightProbes);e.push(t.shadowMapType);e.push(t.toneMapping);e.push(t.numClippingPlanes);e.push(t.numClipIntersection);e.push(t.depthPacking)}function a(e,t){n.disableAll();if(t.supportsVertexTextures)n.enable(0);if(t.instancing)n.enable(1);if(t.instancingColor)n.enable(2);if(t.instancingMorph)n.enable(3);if(t.matcap)n.enable(4);if(t.envMap)n.enable(5);if(t.normalMapObjectSpace)n.enable(6);if(t.normalMapTangentSpace)n.enable(7);if(t.clearcoat)n.enable(8);if(t.iridescence)n.enable(9);if(t.alphaTest)n.enable(10);if(t.vertexColors)n.enable(11);if(t.vertexAlphas)n.enable(12);if(t.vertexUv1s)n.enable(13);if(t.vertexUv2s)n.enable(14);if(t.vertexUv3s)n.enable(15);if(t.vertexTangents)n.enable(16);if(t.anisotropy)n.enable(17);if(t.alphaHash)n.enable(18);if(t.batching)n.enable(19);if(t.dispersion)n.enable(20);e.push(n.mask);n.disableAll();if(t.fog)n.enable(0);if(t.useFog)n.enable(1);if(t.flatShading)n.enable(2);if(t.logarithmicDepthBuffer)n.enable(3);if(t.skinning)n.enable(4);if(t.morphTargets)n.enable(5);if(t.morphNormals)n.enable(6);if(t.morphColors)n.enable(7);if(t.premultipliedAlpha)n.enable(8);if(t.shadowMapEnabled)n.enable(9);if(t.useLegacyLights)n.enable(10);if(t.doubleSided)n.enable(11);if(t.flipSided)n.enable(12);if(t.useDepthPacking)n.enable(13);if(t.dithering)n.enable(14);if(t.transmission)n.enable(15);if(t.sheen)n.enable(16);if(t.opaque)n.enable(17);if(t.pointsUvs)n.enable(18);if(t.decodeVideoTexture)n.enable(19);if(t.alphaToCoverage)n.enable(20);e.push(n.mask)}function o(e){const t=ge[e.type];let n;if(t){const i=ShaderLib[t];n=UniformsUtils.clone(i.uniforms)}else{n=e.uniforms}return n}function l(e,n){let i;for(let e=0,t=s.length;e<t;e++){const r=s[e];if(r.cacheKey===n){i=r;++i.usedTimes;break}}if(i===undefined){i=new WebGLProgram(se,n,e,t);s.push(i)}return i}function c(e){if(--e.usedTimes===0){const t=s.indexOf(e);s[t]=s[s.length-1];s.pop();e.destroy()}}function u(e){he.remove(e)}function h(){he.dispose()}return{getParameters:e,getProgramCacheKey:i,getUniforms:o,acquireProgram:l,releaseProgram:c,releaseShaderCache:u,programs:s,dispose:h}}function WebGLProperties(){let i=new WeakMap;function e(e){let t=i.get(e);if(t===undefined){t={};i.set(e,t)}return t}function t(e){i.delete(e)}function n(e,t,n){i.get(e)[t]=n}function r(){i=new WeakMap}return{get:e,remove:t,update:n,dispose:r}}function painterSortStable(e,t){if(e.groupOrder!==t.groupOrder){return e.groupOrder-t.groupOrder}else if(e.renderOrder!==t.renderOrder){return e.renderOrder-t.renderOrder}else if(e.material.id!==t.material.id){return e.material.id-t.material.id}else if(e.z!==t.z){return e.z-t.z}else{return e.id-t.id}}function reversePainterSortStable(e,t){if(e.groupOrder!==t.groupOrder){return e.groupOrder-t.groupOrder}else if(e.renderOrder!==t.renderOrder){return e.renderOrder-t.renderOrder}else if(e.z!==t.z){return t.z-e.z}else{return e.id-t.id}}function WebGLRenderList(){const o=[];let l=0;const c=[];const u=[];const h=[];function e(){l=0;c.length=0;u.length=0;h.length=0}function d(e,t,n,i,r,s){let a=o[l];if(a===undefined){a={id:e.id,object:e,geometry:t,material:n,groupOrder:i,renderOrder:e.renderOrder,z:r,group:s};o[l]=a}else{a.id=e.id;a.object=e;a.geometry=t;a.material=n;a.groupOrder=i;a.renderOrder=e.renderOrder;a.z=r;a.group=s}l++;return a}function t(e,t,n,i,r,s){const a=d(e,t,n,i,r,s);if(n.transmission>0){u.push(a)}else if(n.transparent===true){h.push(a)}else{c.push(a)}}function n(e,t,n,i,r,s){const a=d(e,t,n,i,r,s);if(n.transmission>0){u.unshift(a)}else if(n.transparent===true){h.unshift(a)}else{c.unshift(a)}}function i(e,t){if(c.length>1)c.sort(e||painterSortStable);if(u.length>1)u.sort(t||reversePainterSortStable);if(h.length>1)h.sort(t||reversePainterSortStable)}function r(){for(let e=l,t=o.length;e<t;e++){const n=o[e];if(n.id===null)break;n.id=null;n.object=null;n.geometry=null;n.material=null;n.group=null}}return{opaque:c,transmissive:u,transparent:h,init:e,push:t,unshift:n,finish:r,sort:i}}function WebGLRenderLists(){let r=new WeakMap;function e(e,t){const n=r.get(e);let i;if(n===undefined){i=new WebGLRenderList;r.set(e,[i])}else{if(t>=n.length){i=new WebGLRenderList;n.push(i)}else{i=n[t]}}return i}function t(){r=new WeakMap}return{get:e,dispose:t}}function UniformsCache(){const n={};return{get:function(e){if(n[e.id]!==undefined){return n[e.id]}let t;switch(e.type){case"DirectionalLight":t={direction:new Vector3,color:new Color};break;case"SpotLight":t={position:new Vector3,direction:new Vector3,color:new Color,distance:0,coneCos:0,penumbraCos:0,decay:0};break;case"PointLight":t={position:new Vector3,color:new Color,distance:0,decay:0};break;case"HemisphereLight":t={direction:new Vector3,skyColor:new Color,groundColor:new Color};break;case"RectAreaLight":t={color:new Color,position:new Vector3,halfWidth:new Vector3,halfHeight:new Vector3};break}n[e.id]=t;return t}}}function ShadowUniformsCache(){const n={};return{get:function(e){if(n[e.id]!==undefined){return n[e.id]}let t;switch(e.type){case"DirectionalLight":t={shadowBias:0,shadowNormalBias:0,shadowRadius:1,shadowMapSize:new Vector2};break;case"SpotLight":t={shadowBias:0,shadowNormalBias:0,shadowRadius:1,shadowMapSize:new Vector2};break;case"PointLight":t={shadowBias:0,shadowNormalBias:0,shadowRadius:1,shadowMapSize:new Vector2,shadowCameraNear:1,shadowCameraFar:1e3};break}n[e.id]=t;return t}}}let nextVersion=0;function shadowCastingAndTexturingLightsFirst(e,t){return(t.castShadow?2:0)-(e.castShadow?2:0)+(t.map?1:0)-(e.map?1:0)}function WebGLLights(E){const w=new UniformsCache;const C=ShadowUniformsCache();const R={version:0,hash:{directionalLength:-1,pointLength:-1,spotLength:-1,rectAreaLength:-1,hemiLength:-1,numDirectionalShadows:-1,numPointShadows:-1,numSpotShadows:-1,numSpotMaps:-1,numLightProbes:-1},ambient:[0,0,0],probe:[],directional:[],directionalShadow:[],directionalShadowMap:[],directionalShadowMatrix:[],spot:[],spotLightMap:[],spotShadow:[],spotShadowMap:[],spotLightMatrix:[],rectArea:[],rectAreaLTC1:null,rectAreaLTC2:null,point:[],pointShadow:[],pointShadowMap:[],pointShadowMatrix:[],hemi:[],numSpotLightShadowsWithMaps:0,numLightProbes:0};for(let e=0;e<9;e++)R.probe.push(new Vector3);const h=new Vector3;const d=new Matrix4;const f=new Matrix4;function e(n,e){let i=0,r=0,s=0;for(let e=0;e<9;e++)R.probe[e].set(0,0,0);let a=0;let o=0;let l=0;let c=0;let u=0;let h=0;let d=0;let f=0;let p=0;let m=0;let g=0;n.sort(shadowCastingAndTexturingLightsFirst);const _=e===true?Math.PI:1;for(let e=0,t=n.length;e<t;e++){const v=n[e];const y=v.color;const x=v.intensity;const M=v.distance;const S=v.shadow&&v.shadow.map?v.shadow.map.texture:null;if(v.isAmbientLight){i+=y.r*x*_;r+=y.g*x*_;s+=y.b*x*_}else if(v.isLightProbe){for(let e=0;e<9;e++){R.probe[e].addScaledVector(v.sh.coefficients[e],x)}g++}else if(v.isDirectionalLight){const b=w.get(v);b.color.copy(v.color).multiplyScalar(v.intensity*_);if(v.castShadow){const T=v.shadow;const A=C.get(v);A.shadowBias=T.bias;A.shadowNormalBias=T.normalBias;A.shadowRadius=T.radius;A.shadowMapSize=T.mapSize;R.directionalShadow[a]=A;R.directionalShadowMap[a]=S;R.directionalShadowMatrix[a]=v.shadow.matrix;h++}R.directional[a]=b;a++}else if(v.isSpotLight){const b=w.get(v);b.position.setFromMatrixPosition(v.matrixWorld);b.color.copy(y).multiplyScalar(x*_);b.distance=M;b.coneCos=Math.cos(v.angle);b.penumbraCos=Math.cos(v.angle*(1-v.penumbra));b.decay=v.decay;R.spot[l]=b;const T=v.shadow;if(v.map){R.spotLightMap[p]=v.map;p++;T.updateMatrices(v);if(v.castShadow)m++}R.spotLightMatrix[l]=T.matrix;if(v.castShadow){const A=C.get(v);A.shadowBias=T.bias;A.shadowNormalBias=T.normalBias;A.shadowRadius=T.radius;A.shadowMapSize=T.mapSize;R.spotShadow[l]=A;R.spotShadowMap[l]=S;f++}l++}else if(v.isRectAreaLight){const b=w.get(v);b.color.copy(y).multiplyScalar(x);b.halfWidth.set(v.width*.5,0,0);b.halfHeight.set(0,v.height*.5,0);R.rectArea[c]=b;c++}else if(v.isPointLight){const b=w.get(v);b.color.copy(v.color).multiplyScalar(v.intensity*_);b.distance=v.distance;b.decay=v.decay;if(v.castShadow){const T=v.shadow;const A=C.get(v);A.shadowBias=T.bias;A.shadowNormalBias=T.normalBias;A.shadowRadius=T.radius;A.shadowMapSize=T.mapSize;A.shadowCameraNear=T.camera.near;A.shadowCameraFar=T.camera.far;R.pointShadow[o]=A;R.pointShadowMap[o]=S;R.pointShadowMatrix[o]=v.shadow.matrix;d++}R.point[o]=b;o++}else if(v.isHemisphereLight){const b=w.get(v);b.skyColor.copy(v.color).multiplyScalar(x*_);b.groundColor.copy(v.groundColor).multiplyScalar(x*_);R.hemi[u]=b;u++}}if(c>0){if(E.has("OES_texture_float_linear")===true){R.rectAreaLTC1=UniformsLib.LTC_FLOAT_1;R.rectAreaLTC2=UniformsLib.LTC_FLOAT_2}else{R.rectAreaLTC1=UniformsLib.LTC_HALF_1;R.rectAreaLTC2=UniformsLib.LTC_HALF_2}}R.ambient[0]=i;R.ambient[1]=r;R.ambient[2]=s;const t=R.hash;if(t.directionalLength!==a||t.pointLength!==o||t.spotLength!==l||t.rectAreaLength!==c||t.hemiLength!==u||t.numDirectionalShadows!==h||t.numPointShadows!==d||t.numSpotShadows!==f||t.numSpotMaps!==p||t.numLightProbes!==g){R.directional.length=a;R.spot.length=l;R.rectArea.length=c;R.point.length=o;R.hemi.length=u;R.directionalShadow.length=h;R.directionalShadowMap.length=h;R.pointShadow.length=d;R.pointShadowMap.length=d;R.spotShadow.length=f;R.spotShadowMap.length=f;R.directionalShadowMatrix.length=h;R.pointShadowMatrix.length=d;R.spotLightMatrix.length=f+p-m;R.spotLightMap.length=p;R.numSpotLightShadowsWithMaps=m;R.numLightProbes=g;t.directionalLength=a;t.pointLength=o;t.spotLength=l;t.rectAreaLength=c;t.hemiLength=u;t.numDirectionalShadows=h;t.numPointShadows=d;t.numSpotShadows=f;t.numSpotMaps=p;t.numLightProbes=g;R.version=nextVersion++}}function t(n,e){let i=0;let r=0;let s=0;let a=0;let o=0;const l=e.matrixWorldInverse;for(let e=0,t=n.length;e<t;e++){const c=n[e];if(c.isDirectionalLight){const u=R.directional[i];u.direction.setFromMatrixPosition(c.matrixWorld);h.setFromMatrixPosition(c.target.matrixWorld);u.direction.sub(h);u.direction.transformDirection(l);i++}else if(c.isSpotLight){const u=R.spot[s];u.position.setFromMatrixPosition(c.matrixWorld);u.position.applyMatrix4(l);u.direction.setFromMatrixPosition(c.matrixWorld);h.setFromMatrixPosition(c.target.matrixWorld);u.direction.sub(h);u.direction.transformDirection(l);s++}else if(c.isRectAreaLight){const u=R.rectArea[a];u.position.setFromMatrixPosition(c.matrixWorld);u.position.applyMatrix4(l);f.identity();d.copy(c.matrixWorld);d.premultiply(l);f.extractRotation(d);u.halfWidth.set(c.width*.5,0,0);u.halfHeight.set(0,c.height*.5,0);u.halfWidth.applyMatrix4(f);u.halfHeight.applyMatrix4(f);a++}else if(c.isPointLight){const u=R.point[r];u.position.setFromMatrixPosition(c.matrixWorld);u.position.applyMatrix4(l);r++}else if(c.isHemisphereLight){const u=R.hemi[o];u.direction.setFromMatrixPosition(c.matrixWorld);u.direction.transformDirection(l);o++}}}return{setup:e,setupView:t,state:R}}function WebGLRenderState(e){const t=new WebGLLights(e);const n=[];const i=[];function r(e){c.camera=e;n.length=0;i.length=0}function s(e){n.push(e)}function a(e){i.push(e)}function o(e){t.setup(n,e)}function l(e){t.setupView(n,e)}const c={lightsArray:n,shadowsArray:i,camera:null,lights:t,transmissionRenderTarget:{}};return{init:r,state:c,setupLights:o,setupLightsView:l,pushLight:s,pushShadow:a}}function WebGLRenderStates(r){let s=new WeakMap;function e(e,t=0){const n=s.get(e);let i;if(n===undefined){i=new WebGLRenderState(r);s.set(e,[i])}else{if(t>=n.length){i=new WebGLRenderState(r);n.push(i)}else{i=n[t]}}return i}function t(){s=new WeakMap}return{get:e,dispose:t}}class MeshDepthMaterial extends Material{constructor(e){super();this.isMeshDepthMaterial=true;this.type="MeshDepthMaterial";this.depthPacking=BasicDepthPacking;this.map=null;this.alphaMap=null;this.displacementMap=null;this.displacementScale=1;this.displacementBias=0;this.wireframe=false;this.wireframeLinewidth=1;this.setValues(e)}copy(e){super.copy(e);this.depthPacking=e.depthPacking;this.map=e.map;this.alphaMap=e.alphaMap;this.displacementMap=e.displacementMap;this.displacementScale=e.displacementScale;this.displacementBias=e.displacementBias;this.wireframe=e.wireframe;this.wireframeLinewidth=e.wireframeLinewidth;return this}}class MeshDistanceMaterial extends Material{constructor(e){super();this.isMeshDistanceMaterial=true;this.type="MeshDistanceMaterial";this.map=null;this.alphaMap=null;this.displacementMap=null;this.displacementScale=1;this.displacementBias=0;this.setValues(e)}copy(e){super.copy(e);this.map=e.map;this.alphaMap=e.alphaMap;this.displacementMap=e.displacementMap;this.displacementScale=e.displacementScale;this.displacementBias=e.displacementBias;return this}}const vertex="void main() {\n\tgl_Position = vec4( position, 1.0 );\n}";const fragment="uniform sampler2D shadow_pass;\nuniform vec2 resolution;\nuniform float radius;\n#include <packing>\nvoid main() {\n\tconst float samples = float( VSM_SAMPLES );\n\tfloat mean = 0.0;\n\tfloat squared_mean = 0.0;\n\tfloat uvStride = samples <= 1.0 ? 0.0 : 2.0 / ( samples - 1.0 );\n\tfloat uvStart = samples <= 1.0 ? 0.0 : - 1.0;\n\tfor ( float i = 0.0; i < samples; i ++ ) {\n\t\tfloat uvOffset = uvStart + i * uvStride;\n\t\t#ifdef HORIZONTAL_PASS\n\t\t\tvec2 distribution = unpackRGBATo2Half( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( uvOffset, 0.0 ) * radius ) / resolution ) );\n\t\t\tmean += distribution.x;\n\t\t\tsquared_mean += distribution.y * distribution.y + distribution.x * distribution.x;\n\t\t#else\n\t\t\tfloat depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( 0.0, uvOffset ) * radius ) / resolution ) );\n\t\t\tmean += depth;\n\t\t\tsquared_mean += depth * depth;\n\t\t#endif\n\t}\n\tmean = mean / samples;\n\tsquared_mean = squared_mean / samples;\n\tfloat std_dev = sqrt( squared_mean - mean * mean );\n\tgl_FragColor = pack2HalfToRGBA( vec2( mean, std_dev ) );\n}";function WebGLShadowMap(m,p,e){let g=new Frustum;const _=new Vector2,v=new Vector2,y=new Vector4,c=new MeshDepthMaterial({depthPacking:RGBADepthPacking}),u=new MeshDistanceMaterial,h={},x=e.maxTextureSize;const d={[FrontSide]:BackSide,[BackSide]:FrontSide,[DoubleSide]:DoubleSide};const i=new ShaderMaterial({defines:{VSM_SAMPLES:8},uniforms:{shadow_pass:{value:null},resolution:{value:new Vector2},radius:{value:4}},vertexShader:vertex,fragmentShader:fragment});const r=i.clone();r.defines.HORIZONTAL_PASS=1;const t=new BufferGeometry;t.setAttribute("position",new BufferAttribute(new Float32Array([-1,-1,.5,3,-1,.5,-1,3,.5]),3));const s=new Mesh(t,i);const M=this;this.enabled=false;this.autoUpdate=true;this.needsUpdate=false;this.type=PCFShadowMap;let S=this.type;this.render=function(n,i,r){if(M.enabled===false)return;if(M.autoUpdate===false&&M.needsUpdate===false)return;if(n.length===0)return;const e=m.getRenderTarget();const t=m.getActiveCubeFace();const s=m.getActiveMipmapLevel();const a=m.state;a.setBlending(NoBlending);a.buffers.color.setClear(1,1,1,1);a.buffers.depth.setTest(true);a.setScissorTest(false);const o=S!==VSMShadowMap&&this.type===VSMShadowMap;const l=S===VSMShadowMap&&this.type!==VSMShadowMap;for(let e=0,t=n.length;e<t;e++){const c=n[e];const u=c.shadow;if(u===undefined){console.warn("THREE.WebGLShadowMap:",c,"has no shadow.");continue}if(u.autoUpdate===false&&u.needsUpdate===false)continue;_.copy(u.mapSize);const h=u.getFrameExtents();_.multiply(h);v.copy(u.mapSize);if(_.x>x||_.y>x){if(_.x>x){v.x=Math.floor(x/h.x);_.x=v.x*h.x;u.mapSize.x=v.x}if(_.y>x){v.y=Math.floor(x/h.y);_.y=v.y*h.y;u.mapSize.y=v.y}}if(u.map===null||o===true||l===true){const f=this.type!==VSMShadowMap?{minFilter:NearestFilter,magFilter:NearestFilter}:{};if(u.map!==null){u.map.dispose()}u.map=new WebGLRenderTarget(_.x,_.y,f);u.map.texture.name=c.name+".shadowMap";u.camera.updateProjectionMatrix()}m.setRenderTarget(u.map);m.clear();const d=u.getViewportCount();for(let e=0;e<d;e++){const p=u.getViewport(e);y.set(v.x*p.x,v.y*p.y,v.x*p.z,v.y*p.w);a.viewport(y);u.updateMatrices(c,e);g=u.getFrustum();A(i,r,u.camera,c,this.type)}if(u.isPointLightShadow!==true&&this.type===VSMShadowMap){b(u,r)}u.needsUpdate=false}S=this.type;M.needsUpdate=false;m.setRenderTarget(e,t,s)};function b(e,t){const n=p.update(s);if(i.defines.VSM_SAMPLES!==e.blurSamples){i.defines.VSM_SAMPLES=e.blurSamples;r.defines.VSM_SAMPLES=e.blurSamples;i.needsUpdate=true;r.needsUpdate=true}if(e.mapPass===null){e.mapPass=new WebGLRenderTarget(_.x,_.y)}i.uniforms.shadow_pass.value=e.map.texture;i.uniforms.resolution.value=e.mapSize;i.uniforms.radius.value=e.radius;m.setRenderTarget(e.mapPass);m.clear();m.renderBufferDirect(t,null,n,i,s,null);r.uniforms.shadow_pass.value=e.mapPass.texture;r.uniforms.resolution.value=e.mapSize;r.uniforms.radius.value=e.radius;m.setRenderTarget(e.map);m.clear();m.renderBufferDirect(t,null,n,r,s,null)}function T(e,n,t,i){let r=null;const s=t.isPointLight===true?e.customDistanceMaterial:e.customDepthMaterial;if(s!==undefined){r=s}else{r=t.isPointLight===true?u:c;if(m.localClippingEnabled&&n.clipShadows===true&&Array.isArray(n.clippingPlanes)&&n.clippingPlanes.length!==0||n.displacementMap&&n.displacementScale!==0||n.alphaMap&&n.alphaTest>0||n.map&&n.alphaTest>0){const a=r.uuid,o=n.uuid;let e=h[a];if(e===undefined){e={};h[a]=e}let t=e[o];if(t===undefined){t=r.clone();e[o]=t;n.addEventListener("dispose",f)}r=t}}r.visible=n.visible;r.wireframe=n.wireframe;if(i===VSMShadowMap){r.side=n.shadowSide!==null?n.shadowSide:n.side}else{r.side=n.shadowSide!==null?n.shadowSide:d[n.side]}r.alphaMap=n.alphaMap;r.alphaTest=n.alphaTest;r.map=n.map;r.clipShadows=n.clipShadows;r.clippingPlanes=n.clippingPlanes;r.clipIntersection=n.clipIntersection;r.displacementMap=n.displacementMap;r.displacementScale=n.displacementScale;r.displacementBias=n.displacementBias;r.wireframeLinewidth=n.wireframeLinewidth;r.linewidth=n.linewidth;if(t.isPointLight===true&&r.isMeshDistanceMaterial===true){const l=m.properties.get(r);l.light=t}return r}function A(n,i,r,s,a){if(n.visible===false)return;const e=n.layers.test(i.layers);if(e&&(n.isMesh||n.isLine||n.isPoints)){if((n.castShadow||n.receiveShadow&&a===VSMShadowMap)&&(!n.frustumCulled||g.intersectsObject(n))){n.modelViewMatrix.multiplyMatrices(r.matrixWorldInverse,n.matrixWorld);const l=p.update(n);const c=n.material;if(Array.isArray(c)){const u=l.groups;for(let e=0,t=u.length;e<t;e++){const h=u[e];const d=c[h.materialIndex];if(d&&d.visible){const f=T(n,d,s,a);n.onBeforeShadow(m,n,i,r,l,f,h);m.renderBufferDirect(r,null,l,f,n,h);n.onAfterShadow(m,n,i,r,l,f,h)}}}else if(c.visible){const f=T(n,c,s,a);n.onBeforeShadow(m,n,i,r,l,f,null);m.renderBufferDirect(r,null,l,f,n,null);n.onAfterShadow(m,n,i,r,l,f,null)}}}const o=n.children;for(let e=0,t=o.length;e<t;e++){A(o[e],i,r,s,a)}}function f(e){const t=e.target;t.removeEventListener("dispose",f);for(const n in h){const i=h[n];const r=e.target.uuid;if(r in i){const s=i[r];s.dispose();delete i[r]}}}}function WebGLState(u){function B(){let t=false;const s=new Vector4;let n=null;const a=new Vector4(0,0,0,0);return{setMask:function(e){if(n!==e&&!t){u.colorMask(e,e,e,e);n=e}},setLocked:function(e){t=e},setClear:function(e,t,n,i,r){if(r===true){e*=i;t*=i;n*=i}s.set(e,t,n,i);if(a.equals(s)===false){u.clearColor(e,t,n,i);a.copy(s)}},reset:function(){t=false;n=null;a.set(-1,0,0,0)}}}function F(){let t=false;let n=null;let i=null;let r=null;return{setTest:function(e){if(e){P(u.DEPTH_TEST)}else{I(u.DEPTH_TEST)}},setMask:function(e){if(n!==e&&!t){u.depthMask(e);n=e}},setFunc:function(e){if(i!==e){switch(e){case NeverDepth:u.depthFunc(u.NEVER);break;case AlwaysDepth:u.depthFunc(u.ALWAYS);break;case LessDepth:u.depthFunc(u.LESS);break;case LessEqualDepth:u.depthFunc(u.LEQUAL);break;case EqualDepth:u.depthFunc(u.EQUAL);break;case GreaterEqualDepth:u.depthFunc(u.GEQUAL);break;case GreaterDepth:u.depthFunc(u.GREATER);break;case NotEqualDepth:u.depthFunc(u.NOTEQUAL);break;default:u.depthFunc(u.LEQUAL)}i=e}},setLocked:function(e){t=e},setClear:function(e){if(r!==e){u.clearDepth(e);r=e}},reset:function(){t=false;n=null;i=null;r=null}}}function O(){let t=false;let n=null;let i=null;let r=null;let s=null;let a=null;let o=null;let l=null;let c=null;return{setTest:function(e){if(!t){if(e){P(u.STENCIL_TEST)}else{I(u.STENCIL_TEST)}}},setMask:function(e){if(n!==e&&!t){u.stencilMask(e);n=e}},setFunc:function(e,t,n){if(i!==e||r!==t||s!==n){u.stencilFunc(e,t,n);i=e;r=t;s=n}},setOp:function(e,t,n){if(a!==e||o!==t||l!==n){u.stencilOp(e,t,n);a=e;o=t;l=n}},setLocked:function(e){t=e},setClear:function(e){if(c!==e){u.clearStencil(e);c=e}},reset:function(){t=false;n=null;i=null;r=null;s=null;a=null;o=null;l=null;c=null}}}const r=new B;const s=new F;const a=new O;const V=new WeakMap;const o=new WeakMap;let t={};let n={};let l=new WeakMap;let G=[];let i=null;let h=false;let d=null;let f=null;let p=null;let m=null;let g=null;let _=null;let v=null;let y=new Color(0,0,0);let x=0;let M=false;let c=null;let S=null;let b=null;let T=null;let A=null;const z=u.getParameter(u.MAX_COMBINED_TEXTURE_IMAGE_UNITS);let k=false;let e=0;const E=u.getParameter(u.VERSION);if(E.indexOf("WebGL")!==-1){e=parseFloat(/^WebGL (\d)/.exec(E)[1]);k=e>=1}else if(E.indexOf("OpenGL ES")!==-1){e=parseFloat(/^OpenGL ES (\d)/.exec(E)[1]);k=e>=2}let w=null;let C={};const H=u.getParameter(u.SCISSOR_BOX);const W=u.getParameter(u.VIEWPORT);const $=(new Vector4).fromArray(H);const X=(new Vector4).fromArray(W);function R(t,n,i,r){const s=new Uint8Array(4);const e=u.createTexture();u.bindTexture(t,e);u.texParameteri(t,u.TEXTURE_MIN_FILTER,u.NEAREST);u.texParameteri(t,u.TEXTURE_MAG_FILTER,u.NEAREST);for(let e=0;e<i;e++){if(t===u.TEXTURE_3D||t===u.TEXTURE_2D_ARRAY){u.texImage3D(n,0,u.RGBA,1,1,r,0,u.RGBA,u.UNSIGNED_BYTE,s)}else{u.texImage2D(n+e,0,u.RGBA,1,1,0,u.RGBA,u.UNSIGNED_BYTE,s)}}return e}const L={};L[u.TEXTURE_2D]=R(u.TEXTURE_2D,u.TEXTURE_2D,1);L[u.TEXTURE_CUBE_MAP]=R(u.TEXTURE_CUBE_MAP,u.TEXTURE_CUBE_MAP_POSITIVE_X,6);L[u.TEXTURE_2D_ARRAY]=R(u.TEXTURE_2D_ARRAY,u.TEXTURE_2D_ARRAY,1,1);L[u.TEXTURE_3D]=R(u.TEXTURE_3D,u.TEXTURE_3D,1,1);r.setClear(0,0,0,1);s.setClear(1);a.setClear(0);P(u.DEPTH_TEST);s.setFunc(LessEqualDepth);J(false);K(CullFaceBack);P(u.CULL_FACE);N(NoBlending);function P(e){if(t[e]!==true){u.enable(e);t[e]=true}}function I(e){if(t[e]!==false){u.disable(e);t[e]=false}}function j(e,t){if(n[e]!==t){u.bindFramebuffer(e,t);n[e]=t;if(e===u.DRAW_FRAMEBUFFER){n[u.FRAMEBUFFER]=t}if(e===u.FRAMEBUFFER){n[u.DRAW_FRAMEBUFFER]=t}return true}return false}function q(e,t){let n=G;let i=false;if(e){n=l.get(t);if(n===undefined){n=[];l.set(t,n)}const r=e.textures;if(n.length!==r.length||n[0]!==u.COLOR_ATTACHMENT0){for(let e=0,t=r.length;e<t;e++){n[e]=u.COLOR_ATTACHMENT0+e}n.length=r.length;i=true}}else{if(n[0]!==u.BACK){n[0]=u.BACK;i=true}}if(i){u.drawBuffers(n)}}function Y(e){if(i!==e){u.useProgram(e);i=e;return true}return false}const U={[AddEquation]:u.FUNC_ADD,[SubtractEquation]:u.FUNC_SUBTRACT,[ReverseSubtractEquation]:u.FUNC_REVERSE_SUBTRACT};U[MinEquation]=u.MIN;U[MaxEquation]=u.MAX;const D={[ZeroFactor]:u.ZERO,[OneFactor]:u.ONE,[SrcColorFactor]:u.SRC_COLOR,[SrcAlphaFactor]:u.SRC_ALPHA,[SrcAlphaSaturateFactor]:u.SRC_ALPHA_SATURATE,[DstColorFactor]:u.DST_COLOR,[DstAlphaFactor]:u.DST_ALPHA,[OneMinusSrcColorFactor]:u.ONE_MINUS_SRC_COLOR,[OneMinusSrcAlphaFactor]:u.ONE_MINUS_SRC_ALPHA,[OneMinusDstColorFactor]:u.ONE_MINUS_DST_COLOR,[OneMinusDstAlphaFactor]:u.ONE_MINUS_DST_ALPHA,[ConstantColorFactor]:u.CONSTANT_COLOR,[OneMinusConstantColorFactor]:u.ONE_MINUS_CONSTANT_COLOR,[ConstantAlphaFactor]:u.CONSTANT_ALPHA,[OneMinusConstantAlphaFactor]:u.ONE_MINUS_CONSTANT_ALPHA};function N(e,t,n,i,r,s,a,o,l,c){if(e===NoBlending){if(h===true){I(u.BLEND);h=false}return}if(h===false){P(u.BLEND);h=true}if(e!==CustomBlending){if(e!==d||c!==M){if(f!==AddEquation||g!==AddEquation){u.blendEquation(u.FUNC_ADD);f=AddEquation;g=AddEquation}if(c){switch(e){case NormalBlending:u.blendFuncSeparate(u.ONE,u.ONE_MINUS_SRC_ALPHA,u.ONE,u.ONE_MINUS_SRC_ALPHA);break;case AdditiveBlending:u.blendFunc(u.ONE,u.ONE);break;case SubtractiveBlending:u.blendFuncSeparate(u.ZERO,u.ONE_MINUS_SRC_COLOR,u.ZERO,u.ONE);break;case MultiplyBlending:u.blendFuncSeparate(u.ZERO,u.SRC_COLOR,u.ZERO,u.SRC_ALPHA);break;default:console.error("THREE.WebGLState: Invalid blending: ",e);break}}else{switch(e){case NormalBlending:u.blendFuncSeparate(u.SRC_ALPHA,u.ONE_MINUS_SRC_ALPHA,u.ONE,u.ONE_MINUS_SRC_ALPHA);break;case AdditiveBlending:u.blendFunc(u.SRC_ALPHA,u.ONE);break;case SubtractiveBlending:u.blendFuncSeparate(u.ZERO,u.ONE_MINUS_SRC_COLOR,u.ZERO,u.ONE);break;case MultiplyBlending:u.blendFunc(u.ZERO,u.SRC_COLOR);break;default:console.error("THREE.WebGLState: Invalid blending: ",e);break}}p=null;m=null;_=null;v=null;y.set(0,0,0);x=0;d=e;M=c}return}r=r||t;s=s||n;a=a||i;if(t!==f||r!==g){u.blendEquationSeparate(U[t],U[r]);f=t;g=r}if(n!==p||i!==m||s!==_||a!==v){u.blendFuncSeparate(D[n],D[i],D[s],D[a]);p=n;m=i;_=s;v=a}if(o.equals(y)===false||l!==x){u.blendColor(o.r,o.g,o.b,l);y.copy(o);x=l}d=e;M=false}function Z(e,t){e.side===DoubleSide?I(u.CULL_FACE):P(u.CULL_FACE);let n=e.side===BackSide;if(t)n=!n;J(n);e.blending===NormalBlending&&e.transparent===false?N(NoBlending):N(e.blending,e.blendEquation,e.blendSrc,e.blendDst,e.blendEquationAlpha,e.blendSrcAlpha,e.blendDstAlpha,e.blendColor,e.blendAlpha,e.premultipliedAlpha);s.setFunc(e.depthFunc);s.setTest(e.depthTest);s.setMask(e.depthWrite);r.setMask(e.colorWrite);const i=e.stencilWrite;a.setTest(i);if(i){a.setMask(e.stencilWriteMask);a.setFunc(e.stencilFunc,e.stencilRef,e.stencilFuncMask);a.setOp(e.stencilFail,e.stencilZFail,e.stencilZPass)}ee(e.polygonOffset,e.polygonOffsetFactor,e.polygonOffsetUnits);e.alphaToCoverage===true?P(u.SAMPLE_ALPHA_TO_COVERAGE):I(u.SAMPLE_ALPHA_TO_COVERAGE)}function J(e){if(c!==e){if(e){u.frontFace(u.CW)}else{u.frontFace(u.CCW)}c=e}}function K(e){if(e!==CullFaceNone){P(u.CULL_FACE);if(e!==S){if(e===CullFaceBack){u.cullFace(u.BACK)}else if(e===CullFaceFront){u.cullFace(u.FRONT)}else{u.cullFace(u.FRONT_AND_BACK)}}}else{I(u.CULL_FACE)}S=e}function Q(e){if(e!==b){if(k)u.lineWidth(e);b=e}}function ee(e,t,n){if(e){P(u.POLYGON_OFFSET_FILL);if(T!==t||A!==n){u.polygonOffset(t,n);T=t;A=n}}else{I(u.POLYGON_OFFSET_FILL)}}function te(e){if(e){P(u.SCISSOR_TEST)}else{I(u.SCISSOR_TEST)}}function ne(e){if(e===undefined)e=u.TEXTURE0+z-1;if(w!==e){u.activeTexture(e);w=e}}function ie(e,t,n){if(n===undefined){if(w===null){n=u.TEXTURE0+z-1}else{n=w}}let i=C[n];if(i===undefined){i={type:undefined,texture:undefined};C[n]=i}if(i.type!==e||i.texture!==t){if(w!==n){u.activeTexture(n);w=n}u.bindTexture(e,t||L[e]);i.type=e;i.texture=t}}function re(){const e=C[w];if(e!==undefined&&e.type!==undefined){u.bindTexture(e.type,null);e.type=undefined;e.texture=undefined}}function se(){try{u.compressedTexImage2D.apply(u,arguments)}catch(e){console.error("THREE.WebGLState:",e)}}function ae(){try{u.compressedTexImage3D.apply(u,arguments)}catch(e){console.error("THREE.WebGLState:",e)}}function oe(){try{u.texSubImage2D.apply(u,arguments)}catch(e){console.error("THREE.WebGLState:",e)}}function le(){try{u.texSubImage3D.apply(u,arguments)}catch(e){console.error("THREE.WebGLState:",e)}}function ce(){try{u.compressedTexSubImage2D.apply(u,arguments)}catch(e){console.error("THREE.WebGLState:",e)}}function ue(){try{u.compressedTexSubImage3D.apply(u,arguments)}catch(e){console.error("THREE.WebGLState:",e)}}function he(){try{u.texStorage2D.apply(u,arguments)}catch(e){console.error("THREE.WebGLState:",e)}}function de(){try{u.texStorage3D.apply(u,arguments)}catch(e){console.error("THREE.WebGLState:",e)}}function fe(){try{u.texImage2D.apply(u,arguments)}catch(e){console.error("THREE.WebGLState:",e)}}function pe(){try{u.texImage3D.apply(u,arguments)}catch(e){console.error("THREE.WebGLState:",e)}}function me(e){if($.equals(e)===false){u.scissor(e.x,e.y,e.z,e.w);$.copy(e)}}function ge(e){if(X.equals(e)===false){u.viewport(e.x,e.y,e.z,e.w);X.copy(e)}}function _e(e,t){let n=o.get(t);if(n===undefined){n=new WeakMap;o.set(t,n)}let i=n.get(e);if(i===undefined){i=u.getUniformBlockIndex(t,e.name);n.set(e,i)}}function ve(e,t){const n=o.get(t);const i=n.get(e);if(V.get(t)!==i){u.uniformBlockBinding(t,i,e.__bindingPointIndex);V.set(t,i)}}function ye(){u.disable(u.BLEND);u.disable(u.CULL_FACE);u.disable(u.DEPTH_TEST);u.disable(u.POLYGON_OFFSET_FILL);u.disable(u.SCISSOR_TEST);u.disable(u.STENCIL_TEST);u.disable(u.SAMPLE_ALPHA_TO_COVERAGE);u.blendEquation(u.FUNC_ADD);u.blendFunc(u.ONE,u.ZERO);u.blendFuncSeparate(u.ONE,u.ZERO,u.ONE,u.ZERO);u.blendColor(0,0,0,0);u.colorMask(true,true,true,true);u.clearColor(0,0,0,0);u.depthMask(true);u.depthFunc(u.LESS);u.clearDepth(1);u.stencilMask(4294967295);u.stencilFunc(u.ALWAYS,0,4294967295);u.stencilOp(u.KEEP,u.KEEP,u.KEEP);u.clearStencil(0);u.cullFace(u.BACK);u.frontFace(u.CCW);u.polygonOffset(0,0);u.activeTexture(u.TEXTURE0);u.bindFramebuffer(u.FRAMEBUFFER,null);u.bindFramebuffer(u.DRAW_FRAMEBUFFER,null);u.bindFramebuffer(u.READ_FRAMEBUFFER,null);u.useProgram(null);u.lineWidth(1);u.scissor(0,0,u.canvas.width,u.canvas.height);u.viewport(0,0,u.canvas.width,u.canvas.height);t={};w=null;C={};n={};l=new WeakMap;G=[];i=null;h=false;d=null;f=null;p=null;m=null;g=null;_=null;v=null;y=new Color(0,0,0);x=0;M=false;c=null;S=null;b=null;T=null;A=null;$.set(0,0,u.canvas.width,u.canvas.height);X.set(0,0,u.canvas.width,u.canvas.height);r.reset();s.reset();a.reset()}return{buffers:{color:r,depth:s,stencil:a},enable:P,disable:I,bindFramebuffer:j,drawBuffers:q,useProgram:Y,setBlending:N,setMaterial:Z,setFlipSided:J,setCullFace:K,setLineWidth:Q,setPolygonOffset:ee,setScissorTest:te,activeTexture:ne,bindTexture:ie,unbindTexture:re,compressedTexImage2D:se,compressedTexImage3D:ae,texImage2D:fe,texImage3D:pe,updateUBOMapping:_e,uniformBlockBinding:ve,texStorage2D:he,texStorage3D:de,texSubImage2D:oe,texSubImage3D:le,compressedTexSubImage2D:ce,compressedTexSubImage3D:ue,scissor:me,viewport:ge,reset:ye}}function WebGLTextures(b,o,T,A,E,w,f){const d=o.has("WEBGL_multisampled_render_to_texture")?o.get("WEBGL_multisampled_render_to_texture"):null;const h=typeof navigator==="undefined"?false:/OculusBrowser/g.test(navigator.userAgent);const t=new Vector2;const n=new WeakMap;let c;const l=new WeakMap;let i=false;try{i=typeof OffscreenCanvas!=="undefined"&&new OffscreenCanvas(1,1).getContext("2d")!==null}catch(e){}function u(e,t){return i?new OffscreenCanvas(e,t):createElementNS("canvas")}function C(e,t,n){let i=1;const r=B(e);if(r.width>n||r.height>n){i=n/Math.max(r.width,r.height)}if(i<1){if(typeof HTMLImageElement!=="undefined"&&e instanceof HTMLImageElement||typeof HTMLCanvasElement!=="undefined"&&e instanceof HTMLCanvasElement||typeof ImageBitmap!=="undefined"&&e instanceof ImageBitmap||typeof VideoFrame!=="undefined"&&e instanceof VideoFrame){const s=Math.floor(i*r.width);const a=Math.floor(i*r.height);if(c===undefined)c=u(s,a);const o=t?u(s,a):c;o.width=s;o.height=a;const l=o.getContext("2d");l.drawImage(e,0,0,s,a);console.warn("THREE.WebGLRenderer: Texture has been resized from ("+r.width+"x"+r.height+") to ("+s+"x"+a+").");return o}else{if("data"in e){console.warn("THREE.WebGLRenderer: Image in DataTexture is too big ("+r.width+"x"+r.height+").")}return e}}return e}function R(e){return e.generateMipmaps&&e.minFilter!==NearestFilter&&e.minFilter!==LinearFilter}function L(e){b.generateMipmap(e)}function P(e,t,n,i,r=false){if(e!==null){if(b[e]!==undefined)return b[e];console.warn("THREE.WebGLRenderer: Attempt to use non-existing WebGL internal format '"+e+"'")}let s=t;if(t===b.RED){if(n===b.FLOAT)s=b.R32F;if(n===b.HALF_FLOAT)s=b.R16F;if(n===b.UNSIGNED_BYTE)s=b.R8}if(t===b.RED_INTEGER){if(n===b.UNSIGNED_BYTE)s=b.R8UI;if(n===b.UNSIGNED_SHORT)s=b.R16UI;if(n===b.UNSIGNED_INT)s=b.R32UI;if(n===b.BYTE)s=b.R8I;if(n===b.SHORT)s=b.R16I;if(n===b.INT)s=b.R32I}if(t===b.RG){if(n===b.FLOAT)s=b.RG32F;if(n===b.HALF_FLOAT)s=b.RG16F;if(n===b.UNSIGNED_BYTE)s=b.RG8}if(t===b.RG_INTEGER){if(n===b.UNSIGNED_BYTE)s=b.RG8UI;if(n===b.UNSIGNED_SHORT)s=b.RG16UI;if(n===b.UNSIGNED_INT)s=b.RG32UI;if(n===b.BYTE)s=b.RG8I;if(n===b.SHORT)s=b.RG16I;if(n===b.INT)s=b.RG32I}if(t===b.RGB){if(n===b.UNSIGNED_INT_5_9_9_9_REV)s=b.RGB9_E5}if(t===b.RGBA){const a=r?LinearTransfer:ColorManagement.getTransfer(i);if(n===b.FLOAT)s=b.RGBA32F;if(n===b.HALF_FLOAT)s=b.RGBA16F;if(n===b.UNSIGNED_BYTE)s=a===SRGBTransfer?b.SRGB8_ALPHA8:b.RGBA8;if(n===b.UNSIGNED_SHORT_4_4_4_4)s=b.RGBA4;if(n===b.UNSIGNED_SHORT_5_5_5_1)s=b.RGB5_A1}if(s===b.R16F||s===b.R32F||s===b.RG16F||s===b.RG32F||s===b.RGBA16F||s===b.RGBA32F){o.get("EXT_color_buffer_float")}return s}function I(e,t){if(R(e)===true||e.isFramebufferTexture&&e.minFilter!==NearestFilter&&e.minFilter!==LinearFilter){return Math.log2(Math.max(t.width,t.height))+1}else if(e.mipmaps!==undefined&&e.mipmaps.length>0){return e.mipmaps.length}else if(e.isCompressedTexture&&Array.isArray(e.image)){return t.mipmaps.length}else{return 1}}function p(e){const t=e.target;t.removeEventListener("dispose",p);F(t);if(t.isVideoTexture){n.delete(t)}}function m(e){const t=e.target;t.removeEventListener("dispose",m);O(t)}function F(e){const t=A.get(e);if(t.__webglInit===undefined)return;const n=e.source;const i=l.get(n);if(i){const r=i[t.__cacheKey];r.usedTimes--;if(r.usedTimes===0){g(e)}if(Object.keys(i).length===0){l.delete(n)}}A.remove(e)}function g(e){const t=A.get(e);b.deleteTexture(t.__webglTexture);const n=e.source;const i=l.get(n);delete i[t.__cacheKey];f.memory.textures--}function O(e){const n=A.get(e);if(e.depthTexture){e.depthTexture.dispose()}if(e.isWebGLCubeRenderTarget){for(let t=0;t<6;t++){if(Array.isArray(n.__webglFramebuffer[t])){for(let e=0;e<n.__webglFramebuffer[t].length;e++)b.deleteFramebuffer(n.__webglFramebuffer[t][e])}else{b.deleteFramebuffer(n.__webglFramebuffer[t])}if(n.__webglDepthbuffer)b.deleteRenderbuffer(n.__webglDepthbuffer[t])}}else{if(Array.isArray(n.__webglFramebuffer)){for(let e=0;e<n.__webglFramebuffer.length;e++)b.deleteFramebuffer(n.__webglFramebuffer[e])}else{b.deleteFramebuffer(n.__webglFramebuffer)}if(n.__webglDepthbuffer)b.deleteRenderbuffer(n.__webglDepthbuffer);if(n.__webglMultisampledFramebuffer)b.deleteFramebuffer(n.__webglMultisampledFramebuffer);if(n.__webglColorRenderbuffer){for(let e=0;e<n.__webglColorRenderbuffer.length;e++){if(n.__webglColorRenderbuffer[e])b.deleteRenderbuffer(n.__webglColorRenderbuffer[e])}}if(n.__webglDepthRenderbuffer)b.deleteRenderbuffer(n.__webglDepthRenderbuffer)}const i=e.textures;for(let e=0,t=i.length;e<t;e++){const r=A.get(i[e]);if(r.__webglTexture){b.deleteTexture(r.__webglTexture);f.memory.textures--}A.remove(i[e])}A.remove(e)}let r=0;function e(){r=0}function V(){const e=r;if(e>=E.maxTextures){console.warn("THREE.WebGLTextures: Trying to use "+e+" texture units while this GPU supports only "+E.maxTextures)}r+=1;return e}function G(e){const t=[];t.push(e.wrapS);t.push(e.wrapT);t.push(e.wrapR||0);t.push(e.magFilter);t.push(e.minFilter);t.push(e.anisotropy);t.push(e.internalFormat);t.push(e.format);t.push(e.type);t.push(e.generateMipmaps);t.push(e.premultiplyAlpha);t.push(e.flipY);t.push(e.unpackAlignment);t.push(e.colorSpace);return t.join()}function s(e,t){const n=A.get(e);if(e.isVideoTexture)Q(e);if(e.isRenderTargetTexture===false&&e.version>0&&n.__version!==e.version){const i=e.image;if(i===null){console.warn("THREE.WebGLRenderer: Texture marked for update but no image data found.")}else if(i.complete===false){console.warn("THREE.WebGLRenderer: Texture marked for update but image is incomplete")}else{_(n,e,t);return}}T.bindTexture(b.TEXTURE_2D,n.__webglTexture,b.TEXTURE0+t)}function z(e,t){const n=A.get(e);if(e.version>0&&n.__version!==e.version){_(n,e,t);return}T.bindTexture(b.TEXTURE_2D_ARRAY,n.__webglTexture,b.TEXTURE0+t)}function k(e,t){const n=A.get(e);if(e.version>0&&n.__version!==e.version){_(n,e,t);return}T.bindTexture(b.TEXTURE_3D,n.__webglTexture,b.TEXTURE0+t)}function H(e,t){const n=A.get(e);if(e.version>0&&n.__version!==e.version){j(n,e,t);return}T.bindTexture(b.TEXTURE_CUBE_MAP,n.__webglTexture,b.TEXTURE0+t)}const a={[RepeatWrapping]:b.REPEAT,[ClampToEdgeWrapping]:b.CLAMP_TO_EDGE,[MirroredRepeatWrapping]:b.MIRRORED_REPEAT};const W={[NearestFilter]:b.NEAREST,[NearestMipmapNearestFilter]:b.NEAREST_MIPMAP_NEAREST,[NearestMipmapLinearFilter]:b.NEAREST_MIPMAP_LINEAR,[LinearFilter]:b.LINEAR,[LinearMipmapNearestFilter]:b.LINEAR_MIPMAP_NEAREST,[LinearMipmapLinearFilter]:b.LINEAR_MIPMAP_LINEAR};const $={[NeverCompare]:b.NEVER,[AlwaysCompare]:b.ALWAYS,[LessCompare]:b.LESS,[LessEqualCompare]:b.LEQUAL,[EqualCompare]:b.EQUAL,[GreaterEqualCompare]:b.GEQUAL,[GreaterCompare]:b.GREATER,[NotEqualCompare]:b.NOTEQUAL};function U(e,t){if(t.type===FloatType&&o.has("OES_texture_float_linear")===false&&(t.magFilter===LinearFilter||t.magFilter===LinearMipmapNearestFilter||t.magFilter===NearestMipmapLinearFilter||t.magFilter===LinearMipmapLinearFilter||t.minFilter===LinearFilter||t.minFilter===LinearMipmapNearestFilter||t.minFilter===NearestMipmapLinearFilter||t.minFilter===LinearMipmapLinearFilter)){console.warn("THREE.WebGLRenderer: Unable to use linear filtering with floating point textures. OES_texture_float_linear not supported on this device.")}b.texParameteri(e,b.TEXTURE_WRAP_S,a[t.wrapS]);b.texParameteri(e,b.TEXTURE_WRAP_T,a[t.wrapT]);if(e===b.TEXTURE_3D||e===b.TEXTURE_2D_ARRAY){b.texParameteri(e,b.TEXTURE_WRAP_R,a[t.wrapR])}b.texParameteri(e,b.TEXTURE_MAG_FILTER,W[t.magFilter]);b.texParameteri(e,b.TEXTURE_MIN_FILTER,W[t.minFilter]);if(t.compareFunction){b.texParameteri(e,b.TEXTURE_COMPARE_MODE,b.COMPARE_REF_TO_TEXTURE);b.texParameteri(e,b.TEXTURE_COMPARE_FUNC,$[t.compareFunction])}if(o.has("EXT_texture_filter_anisotropic")===true){if(t.magFilter===NearestFilter)return;if(t.minFilter!==NearestMipmapLinearFilter&&t.minFilter!==LinearMipmapLinearFilter)return;if(t.type===FloatType&&o.has("OES_texture_float_linear")===false)return;if(t.anisotropy>1||A.get(t).__currentAnisotropy){const n=o.get("EXT_texture_filter_anisotropic");b.texParameterf(e,n.TEXTURE_MAX_ANISOTROPY_EXT,Math.min(t.anisotropy,E.getMaxAnisotropy()));A.get(t).__currentAnisotropy=t.anisotropy}}}function X(e,t){let n=false;if(e.__webglInit===undefined){e.__webglInit=true;t.addEventListener("dispose",p)}const i=t.source;let r=l.get(i);if(r===undefined){r={};l.set(i,r)}const s=G(t);if(s!==e.__cacheKey){if(r[s]===undefined){r[s]={texture:b.createTexture(),usedTimes:0};f.memory.textures++;n=true}r[s].usedTimes++;const a=r[e.__cacheKey];if(a!==undefined){r[e.__cacheKey].usedTimes--;if(a.usedTimes===0){g(t)}}e.__cacheKey=s;e.__webglTexture=r[s].texture}return n}function _(e,s,t){let a=b.TEXTURE_2D;if(s.isDataArrayTexture||s.isCompressedArrayTexture)a=b.TEXTURE_2D_ARRAY;if(s.isData3DTexture)a=b.TEXTURE_3D;const o=X(e,s);const l=s.source;T.bindTexture(a,e.__webglTexture,b.TEXTURE0+t);const c=A.get(l);if(l.version!==c.__version||o===true){T.activeTexture(b.TEXTURE0+t);const u=ColorManagement.getPrimaries(ColorManagement.workingColorSpace);const h=s.colorSpace===NoColorSpace?null:ColorManagement.getPrimaries(s.colorSpace);const d=s.colorSpace===NoColorSpace||u===h?b.NONE:b.BROWSER_DEFAULT_WEBGL;b.pixelStorei(b.UNPACK_FLIP_Y_WEBGL,s.flipY);b.pixelStorei(b.UNPACK_PREMULTIPLY_ALPHA_WEBGL,s.premultiplyAlpha);b.pixelStorei(b.UNPACK_ALIGNMENT,s.unpackAlignment);b.pixelStorei(b.UNPACK_COLORSPACE_CONVERSION_WEBGL,d);let i=C(s.image,false,E.maxTextureSize);i=ee(s,i);const f=w.convert(s.format,s.colorSpace);const p=w.convert(s.type);let r=P(s.internalFormat,f,p,s.colorSpace,s.isVideoTexture);U(a,s);let n;const m=s.mipmaps;const g=s.isVideoTexture!==true;const _=c.__version===undefined||o===true;const v=l.dataReady;const y=I(s,i);if(s.isDepthTexture){r=b.DEPTH_COMPONENT16;if(s.type===FloatType){r=b.DEPTH_COMPONENT32F}else if(s.type===UnsignedIntType){r=b.DEPTH_COMPONENT24}else if(s.type===UnsignedInt248Type){r=b.DEPTH24_STENCIL8}if(_){if(g){T.texStorage2D(b.TEXTURE_2D,1,r,i.width,i.height)}else{T.texImage2D(b.TEXTURE_2D,0,r,i.width,i.height,0,f,p,null)}}}else if(s.isDataTexture){if(m.length>0){if(g&&_){T.texStorage2D(b.TEXTURE_2D,y,r,m[0].width,m[0].height)}for(let e=0,t=m.length;e<t;e++){n=m[e];if(g){if(v){T.texSubImage2D(b.TEXTURE_2D,e,0,0,n.width,n.height,f,p,n.data)}}else{T.texImage2D(b.TEXTURE_2D,e,r,n.width,n.height,0,f,p,n.data)}}s.generateMipmaps=false}else{if(g){if(_){T.texStorage2D(b.TEXTURE_2D,y,r,i.width,i.height)}if(v){T.texSubImage2D(b.TEXTURE_2D,0,0,0,i.width,i.height,f,p,i.data)}}else{T.texImage2D(b.TEXTURE_2D,0,r,i.width,i.height,0,f,p,i.data)}}}else if(s.isCompressedTexture){if(s.isCompressedArrayTexture){if(g&&_){T.texStorage3D(b.TEXTURE_2D_ARRAY,y,r,m[0].width,m[0].height,i.depth)}for(let e=0,t=m.length;e<t;e++){n=m[e];if(s.format!==RGBAFormat){if(f!==null){if(g){if(v){T.compressedTexSubImage3D(b.TEXTURE_2D_ARRAY,e,0,0,0,n.width,n.height,i.depth,f,n.data,0,0)}}else{T.compressedTexImage3D(b.TEXTURE_2D_ARRAY,e,r,n.width,n.height,i.depth,0,n.data,0,0)}}else{console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()")}}else{if(g){if(v){T.texSubImage3D(b.TEXTURE_2D_ARRAY,e,0,0,0,n.width,n.height,i.depth,f,p,n.data)}}else{T.texImage3D(b.TEXTURE_2D_ARRAY,e,r,n.width,n.height,i.depth,0,f,p,n.data)}}}}else{if(g&&_){T.texStorage2D(b.TEXTURE_2D,y,r,m[0].width,m[0].height)}for(let e=0,t=m.length;e<t;e++){n=m[e];if(s.format!==RGBAFormat){if(f!==null){if(g){if(v){T.compressedTexSubImage2D(b.TEXTURE_2D,e,0,0,n.width,n.height,f,n.data)}}else{T.compressedTexImage2D(b.TEXTURE_2D,e,r,n.width,n.height,0,n.data)}}else{console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()")}}else{if(g){if(v){T.texSubImage2D(b.TEXTURE_2D,e,0,0,n.width,n.height,f,p,n.data)}}else{T.texImage2D(b.TEXTURE_2D,e,r,n.width,n.height,0,f,p,n.data)}}}}}else if(s.isDataArrayTexture){if(g){if(_){T.texStorage3D(b.TEXTURE_2D_ARRAY,y,r,i.width,i.height,i.depth)}if(v){T.texSubImage3D(b.TEXTURE_2D_ARRAY,0,0,0,0,i.width,i.height,i.depth,f,p,i.data)}}else{T.texImage3D(b.TEXTURE_2D_ARRAY,0,r,i.width,i.height,i.depth,0,f,p,i.data)}}else if(s.isData3DTexture){if(g){if(_){T.texStorage3D(b.TEXTURE_3D,y,r,i.width,i.height,i.depth)}if(v){T.texSubImage3D(b.TEXTURE_3D,0,0,0,0,i.width,i.height,i.depth,f,p,i.data)}}else{T.texImage3D(b.TEXTURE_3D,0,r,i.width,i.height,i.depth,0,f,p,i.data)}}else if(s.isFramebufferTexture){if(_){if(g){T.texStorage2D(b.TEXTURE_2D,y,r,i.width,i.height)}else{let t=i.width,n=i.height;for(let e=0;e<y;e++){T.texImage2D(b.TEXTURE_2D,e,r,t,n,0,f,p,null);t>>=1;n>>=1}}}}else{if(m.length>0){if(g&&_){const x=B(m[0]);T.texStorage2D(b.TEXTURE_2D,y,r,x.width,x.height)}for(let e=0,t=m.length;e<t;e++){n=m[e];if(g){if(v){T.texSubImage2D(b.TEXTURE_2D,e,0,0,f,p,n)}}else{T.texImage2D(b.TEXTURE_2D,e,r,f,p,n)}}s.generateMipmaps=false}else{if(g){if(_){const x=B(i);T.texStorage2D(b.TEXTURE_2D,y,r,x.width,x.height)}if(v){T.texSubImage2D(b.TEXTURE_2D,0,0,0,f,p,i)}}else{T.texImage2D(b.TEXTURE_2D,0,r,f,p,i)}}}if(R(s)){L(a)}c.__version=l.version;if(s.onUpdate)s.onUpdate(s)}e.__version=s.version}function j(e,i,t){if(i.image.length!==6)return;const r=X(e,i);const s=i.source;T.bindTexture(b.TEXTURE_CUBE_MAP,e.__webglTexture,b.TEXTURE0+t);const a=A.get(s);if(s.version!==a.__version||r===true){T.activeTexture(b.TEXTURE0+t);const o=ColorManagement.getPrimaries(ColorManagement.workingColorSpace);const l=i.colorSpace===NoColorSpace?null:ColorManagement.getPrimaries(i.colorSpace);const c=i.colorSpace===NoColorSpace||o===l?b.NONE:b.BROWSER_DEFAULT_WEBGL;b.pixelStorei(b.UNPACK_FLIP_Y_WEBGL,i.flipY);b.pixelStorei(b.UNPACK_PREMULTIPLY_ALPHA_WEBGL,i.premultiplyAlpha);b.pixelStorei(b.UNPACK_ALIGNMENT,i.unpackAlignment);b.pixelStorei(b.UNPACK_COLORSPACE_CONVERSION_WEBGL,c);const u=i.isCompressedTexture||i.image[0].isCompressedTexture;const h=i.image[0]&&i.image[0].isDataTexture;const d=[];for(let e=0;e<6;e++){if(!u&&!h){d[e]=C(i.image[e],true,E.maxCubemapSize)}else{d[e]=h?i.image[e].image:i.image[e]}d[e]=ee(i,d[e])}const f=d[0],p=w.convert(i.format,i.colorSpace),m=w.convert(i.type),g=P(i.internalFormat,p,m,i.colorSpace);const _=i.isVideoTexture!==true;const v=a.__version===undefined||r===true;const y=s.dataReady;let e=I(i,f);U(b.TEXTURE_CUBE_MAP,i);let n;if(u){if(_&&v){T.texStorage2D(b.TEXTURE_CUBE_MAP,e,g,f.width,f.height)}for(let t=0;t<6;t++){n=d[t].mipmaps;for(let e=0;e<n.length;e++){const x=n[e];if(i.format!==RGBAFormat){if(p!==null){if(_){if(y){T.compressedTexSubImage2D(b.TEXTURE_CUBE_MAP_POSITIVE_X+t,e,0,0,x.width,x.height,p,x.data)}}else{T.compressedTexImage2D(b.TEXTURE_CUBE_MAP_POSITIVE_X+t,e,g,x.width,x.height,0,x.data)}}else{console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()")}}else{if(_){if(y){T.texSubImage2D(b.TEXTURE_CUBE_MAP_POSITIVE_X+t,e,0,0,x.width,x.height,p,m,x.data)}}else{T.texImage2D(b.TEXTURE_CUBE_MAP_POSITIVE_X+t,e,g,x.width,x.height,0,p,m,x.data)}}}}}else{n=i.mipmaps;if(_&&v){if(n.length>0)e++;const M=B(d[0]);T.texStorage2D(b.TEXTURE_CUBE_MAP,e,g,M.width,M.height)}for(let t=0;t<6;t++){if(h){if(_){if(y){T.texSubImage2D(b.TEXTURE_CUBE_MAP_POSITIVE_X+t,0,0,0,d[t].width,d[t].height,p,m,d[t].data)}}else{T.texImage2D(b.TEXTURE_CUBE_MAP_POSITIVE_X+t,0,g,d[t].width,d[t].height,0,p,m,d[t].data)}for(let e=0;e<n.length;e++){const x=n[e];const S=x.image[t].image;if(_){if(y){T.texSubImage2D(b.TEXTURE_CUBE_MAP_POSITIVE_X+t,e+1,0,0,S.width,S.height,p,m,S.data)}}else{T.texImage2D(b.TEXTURE_CUBE_MAP_POSITIVE_X+t,e+1,g,S.width,S.height,0,p,m,S.data)}}}else{if(_){if(y){T.texSubImage2D(b.TEXTURE_CUBE_MAP_POSITIVE_X+t,0,0,0,p,m,d[t])}}else{T.texImage2D(b.TEXTURE_CUBE_MAP_POSITIVE_X+t,0,g,p,m,d[t])}for(let e=0;e<n.length;e++){const x=n[e];if(_){if(y){T.texSubImage2D(b.TEXTURE_CUBE_MAP_POSITIVE_X+t,e+1,0,0,p,m,x.image[t])}}else{T.texImage2D(b.TEXTURE_CUBE_MAP_POSITIVE_X+t,e+1,g,p,m,x.image[t])}}}}}if(R(i)){L(b.TEXTURE_CUBE_MAP)}a.__version=s.version;if(i.onUpdate)i.onUpdate(i)}e.__version=i.version}function v(e,t,n,i,r,s){const a=w.convert(n.format,n.colorSpace);const o=w.convert(n.type);const l=P(n.internalFormat,a,o,n.colorSpace);const c=A.get(t);if(!c.__hasExternalTextures){const u=Math.max(1,t.width>>s);const h=Math.max(1,t.height>>s);if(r===b.TEXTURE_3D||r===b.TEXTURE_2D_ARRAY){T.texImage3D(r,s,l,u,h,t.depth,0,a,o,null)}else{T.texImage2D(r,s,l,u,h,0,a,o,null)}}T.bindFramebuffer(b.FRAMEBUFFER,e);if(N(t)){d.framebufferTexture2DMultisampleEXT(b.FRAMEBUFFER,i,r,A.get(n).__webglTexture,0,D(t))}else if(r===b.TEXTURE_2D||r>=b.TEXTURE_CUBE_MAP_POSITIVE_X&&r<=b.TEXTURE_CUBE_MAP_NEGATIVE_Z){b.framebufferTexture2D(b.FRAMEBUFFER,i,r,A.get(n).__webglTexture,s)}T.bindFramebuffer(b.FRAMEBUFFER,null)}function y(t,n,i){b.bindRenderbuffer(b.RENDERBUFFER,t);if(n.depthBuffer&&!n.stencilBuffer){let e=b.DEPTH_COMPONENT24;if(i||N(n)){const r=n.depthTexture;if(r&&r.isDepthTexture){if(r.type===FloatType){e=b.DEPTH_COMPONENT32F}else if(r.type===UnsignedIntType){e=b.DEPTH_COMPONENT24}}const s=D(n);if(N(n)){d.renderbufferStorageMultisampleEXT(b.RENDERBUFFER,s,e,n.width,n.height)}else{b.renderbufferStorageMultisample(b.RENDERBUFFER,s,e,n.width,n.height)}}else{b.renderbufferStorage(b.RENDERBUFFER,e,n.width,n.height)}b.framebufferRenderbuffer(b.FRAMEBUFFER,b.DEPTH_ATTACHMENT,b.RENDERBUFFER,t)}else if(n.depthBuffer&&n.stencilBuffer){const s=D(n);if(i&&N(n)===false){b.renderbufferStorageMultisample(b.RENDERBUFFER,s,b.DEPTH24_STENCIL8,n.width,n.height)}else if(N(n)){d.renderbufferStorageMultisampleEXT(b.RENDERBUFFER,s,b.DEPTH24_STENCIL8,n.width,n.height)}else{b.renderbufferStorage(b.RENDERBUFFER,b.DEPTH_STENCIL,n.width,n.height)}b.framebufferRenderbuffer(b.FRAMEBUFFER,b.DEPTH_STENCIL_ATTACHMENT,b.RENDERBUFFER,t)}else{const a=n.textures;for(let e=0;e<a.length;e++){const o=a[e];const l=w.convert(o.format,o.colorSpace);const c=w.convert(o.type);const u=P(o.internalFormat,l,c,o.colorSpace);const s=D(n);if(i&&N(n)===false){b.renderbufferStorageMultisample(b.RENDERBUFFER,s,u,n.width,n.height)}else if(N(n)){d.renderbufferStorageMultisampleEXT(b.RENDERBUFFER,s,u,n.width,n.height)}else{b.renderbufferStorage(b.RENDERBUFFER,u,n.width,n.height)}}}b.bindRenderbuffer(b.RENDERBUFFER,null)}function q(e,t){const n=t&&t.isWebGLCubeRenderTarget;if(n)throw new Error("Depth Texture with cube render targets is not supported");T.bindFramebuffer(b.FRAMEBUFFER,e);if(!(t.depthTexture&&t.depthTexture.isDepthTexture)){throw new Error("renderTarget.depthTexture must be an instance of THREE.DepthTexture")}if(!A.get(t.depthTexture).__webglTexture||t.depthTexture.image.width!==t.width||t.depthTexture.image.height!==t.height){t.depthTexture.image.width=t.width;t.depthTexture.image.height=t.height;t.depthTexture.needsUpdate=true}s(t.depthTexture,0);const i=A.get(t.depthTexture).__webglTexture;const r=D(t);if(t.depthTexture.format===DepthFormat){if(N(t)){d.framebufferTexture2DMultisampleEXT(b.FRAMEBUFFER,b.DEPTH_ATTACHMENT,b.TEXTURE_2D,i,0,r)}else{b.framebufferTexture2D(b.FRAMEBUFFER,b.DEPTH_ATTACHMENT,b.TEXTURE_2D,i,0)}}else if(t.depthTexture.format===DepthStencilFormat){if(N(t)){d.framebufferTexture2DMultisampleEXT(b.FRAMEBUFFER,b.DEPTH_STENCIL_ATTACHMENT,b.TEXTURE_2D,i,0,r)}else{b.framebufferTexture2D(b.FRAMEBUFFER,b.DEPTH_STENCIL_ATTACHMENT,b.TEXTURE_2D,i,0)}}else{throw new Error("Unknown depthTexture format")}}function x(t){const n=A.get(t);const e=t.isWebGLCubeRenderTarget===true;if(t.depthTexture&&!n.__autoAllocateDepthBuffer){if(e)throw new Error("target.depthTexture not supported in Cube render targets");q(n.__webglFramebuffer,t)}else{if(e){n.__webglDepthbuffer=[];for(let e=0;e<6;e++){T.bindFramebuffer(b.FRAMEBUFFER,n.__webglFramebuffer[e]);n.__webglDepthbuffer[e]=b.createRenderbuffer();y(n.__webglDepthbuffer[e],t,false)}}else{T.bindFramebuffer(b.FRAMEBUFFER,n.__webglFramebuffer);n.__webglDepthbuffer=b.createRenderbuffer();y(n.__webglDepthbuffer,t,false)}}T.bindFramebuffer(b.FRAMEBUFFER,null)}function Y(e,t,n){const i=A.get(e);if(t!==undefined){v(i.__webglFramebuffer,e,e.texture,b.COLOR_ATTACHMENT0,b.TEXTURE_2D,0)}if(n!==undefined){x(e)}}function Z(n){const i=n.texture;const r=A.get(n);const e=A.get(i);n.addEventListener("dispose",m);const s=n.textures;const t=n.isWebGLCubeRenderTarget===true;const a=s.length>1;if(!a){if(e.__webglTexture===undefined){e.__webglTexture=b.createTexture()}e.__version=i.version;f.memory.textures++}if(t){r.__webglFramebuffer=[];for(let t=0;t<6;t++){if(i.mipmaps&&i.mipmaps.length>0){r.__webglFramebuffer[t]=[];for(let e=0;e<i.mipmaps.length;e++){r.__webglFramebuffer[t][e]=b.createFramebuffer()}}else{r.__webglFramebuffer[t]=b.createFramebuffer()}}}else{if(i.mipmaps&&i.mipmaps.length>0){r.__webglFramebuffer=[];for(let e=0;e<i.mipmaps.length;e++){r.__webglFramebuffer[e]=b.createFramebuffer()}}else{r.__webglFramebuffer=b.createFramebuffer()}if(a){for(let e=0,t=s.length;e<t;e++){const o=A.get(s[e]);if(o.__webglTexture===undefined){o.__webglTexture=b.createTexture();f.memory.textures++}}}if(n.samples>0&&N(n)===false){r.__webglMultisampledFramebuffer=b.createFramebuffer();r.__webglColorRenderbuffer=[];T.bindFramebuffer(b.FRAMEBUFFER,r.__webglMultisampledFramebuffer);for(let e=0;e<s.length;e++){const i=s[e];r.__webglColorRenderbuffer[e]=b.createRenderbuffer();b.bindRenderbuffer(b.RENDERBUFFER,r.__webglColorRenderbuffer[e]);const l=w.convert(i.format,i.colorSpace);const c=w.convert(i.type);const u=P(i.internalFormat,l,c,i.colorSpace,n.isXRRenderTarget===true);const h=D(n);b.renderbufferStorageMultisample(b.RENDERBUFFER,h,u,n.width,n.height);b.framebufferRenderbuffer(b.FRAMEBUFFER,b.COLOR_ATTACHMENT0+e,b.RENDERBUFFER,r.__webglColorRenderbuffer[e])}b.bindRenderbuffer(b.RENDERBUFFER,null);if(n.depthBuffer){r.__webglDepthRenderbuffer=b.createRenderbuffer();y(r.__webglDepthRenderbuffer,n,true)}T.bindFramebuffer(b.FRAMEBUFFER,null)}}if(t){T.bindTexture(b.TEXTURE_CUBE_MAP,e.__webglTexture);U(b.TEXTURE_CUBE_MAP,i);for(let t=0;t<6;t++){if(i.mipmaps&&i.mipmaps.length>0){for(let e=0;e<i.mipmaps.length;e++){v(r.__webglFramebuffer[t][e],n,i,b.COLOR_ATTACHMENT0,b.TEXTURE_CUBE_MAP_POSITIVE_X+t,e)}}else{v(r.__webglFramebuffer[t],n,i,b.COLOR_ATTACHMENT0,b.TEXTURE_CUBE_MAP_POSITIVE_X+t,0)}}if(R(i)){L(b.TEXTURE_CUBE_MAP)}T.unbindTexture()}else if(a){for(let e=0,t=s.length;e<t;e++){const d=s[e];const o=A.get(d);T.bindTexture(b.TEXTURE_2D,o.__webglTexture);U(b.TEXTURE_2D,d);v(r.__webglFramebuffer,n,d,b.COLOR_ATTACHMENT0+e,b.TEXTURE_2D,0);if(R(d)){L(b.TEXTURE_2D)}}T.unbindTexture()}else{let t=b.TEXTURE_2D;if(n.isWebGL3DRenderTarget||n.isWebGLArrayRenderTarget){t=n.isWebGL3DRenderTarget?b.TEXTURE_3D:b.TEXTURE_2D_ARRAY}T.bindTexture(t,e.__webglTexture);U(t,i);if(i.mipmaps&&i.mipmaps.length>0){for(let e=0;e<i.mipmaps.length;e++){v(r.__webglFramebuffer[e],n,i,b.COLOR_ATTACHMENT0,t,e)}}else{v(r.__webglFramebuffer,n,i,b.COLOR_ATTACHMENT0,t,0)}if(R(i)){L(t)}T.unbindTexture()}if(n.depthBuffer){x(n)}}function J(n){const i=n.textures;for(let e=0,t=i.length;e<t;e++){const r=i[e];if(R(r)){const s=n.isWebGLCubeRenderTarget?b.TEXTURE_CUBE_MAP:b.TEXTURE_2D;const a=A.get(r).__webglTexture;T.bindTexture(s,a);L(s);T.unbindTexture()}}}const M=[];const S=[];function K(n){if(n.samples>0){if(N(n)===false){const i=n.textures;const r=n.width;const s=n.height;let t=b.COLOR_BUFFER_BIT;const a=n.stencilBuffer?b.DEPTH_STENCIL_ATTACHMENT:b.DEPTH_ATTACHMENT;const o=A.get(n);const l=i.length>1;if(l){for(let e=0;e<i.length;e++){T.bindFramebuffer(b.FRAMEBUFFER,o.__webglMultisampledFramebuffer);b.framebufferRenderbuffer(b.FRAMEBUFFER,b.COLOR_ATTACHMENT0+e,b.RENDERBUFFER,null);T.bindFramebuffer(b.FRAMEBUFFER,o.__webglFramebuffer);b.framebufferTexture2D(b.DRAW_FRAMEBUFFER,b.COLOR_ATTACHMENT0+e,b.TEXTURE_2D,null,0)}}T.bindFramebuffer(b.READ_FRAMEBUFFER,o.__webglMultisampledFramebuffer);T.bindFramebuffer(b.DRAW_FRAMEBUFFER,o.__webglFramebuffer);for(let e=0;e<i.length;e++){const c=o.__ignoreDepthValues!==undefined?o.__ignoreDepthValues:false;if(c===false){if(n.depthBuffer)t|=b.DEPTH_BUFFER_BIT;if(n.stencilBuffer&&n.resolveStencilBuffer)t|=b.STENCIL_BUFFER_BIT}if(l){b.framebufferRenderbuffer(b.READ_FRAMEBUFFER,b.COLOR_ATTACHMENT0,b.RENDERBUFFER,o.__webglColorRenderbuffer[e]);const u=A.get(i[e]).__webglTexture;b.framebufferTexture2D(b.DRAW_FRAMEBUFFER,b.COLOR_ATTACHMENT0,b.TEXTURE_2D,u,0)}b.blitFramebuffer(0,0,r,s,0,0,r,s,t,b.NEAREST);if(h===true){M.length=0;S.length=0;M.push(b.COLOR_ATTACHMENT0+e);if(n.depthBuffer&&c===true){M.push(a);S.push(a);b.invalidateFramebuffer(b.DRAW_FRAMEBUFFER,S)}b.invalidateFramebuffer(b.READ_FRAMEBUFFER,M)}}T.bindFramebuffer(b.READ_FRAMEBUFFER,null);T.bindFramebuffer(b.DRAW_FRAMEBUFFER,null);if(l){for(let e=0;e<i.length;e++){T.bindFramebuffer(b.FRAMEBUFFER,o.__webglMultisampledFramebuffer);b.framebufferRenderbuffer(b.FRAMEBUFFER,b.COLOR_ATTACHMENT0+e,b.RENDERBUFFER,o.__webglColorRenderbuffer[e]);const u=A.get(i[e]).__webglTexture;T.bindFramebuffer(b.FRAMEBUFFER,o.__webglFramebuffer);b.framebufferTexture2D(b.DRAW_FRAMEBUFFER,b.COLOR_ATTACHMENT0+e,b.TEXTURE_2D,u,0)}}T.bindFramebuffer(b.DRAW_FRAMEBUFFER,o.__webglMultisampledFramebuffer)}else{const o=A.get(n);const c=o.__ignoreDepthValues!==undefined?o.__ignoreDepthValues:false;if(n.depthBuffer&&c&&h){const a=n.stencilBuffer?b.DEPTH_STENCIL_ATTACHMENT:b.DEPTH_ATTACHMENT;b.invalidateFramebuffer(b.DRAW_FRAMEBUFFER,[a])}}}}function D(e){return Math.min(E.maxSamples,e.samples)}function N(e){const t=A.get(e);return e.samples>0&&o.has("WEBGL_multisampled_render_to_texture")===true&&t.__useRenderToTexture!==false}function Q(e){const t=f.render.frame;if(n.get(e)!==t){n.set(e,t);e.update()}}function ee(e,t){const n=e.colorSpace;const i=e.format;const r=e.type;if(e.isCompressedTexture===true||e.isVideoTexture===true)return t;if(n!==LinearSRGBColorSpace&&n!==NoColorSpace){if(ColorManagement.getTransfer(n)===SRGBTransfer){if(i!==RGBAFormat||r!==UnsignedByteType){console.warn("THREE.WebGLTextures: sRGB encoded textures have to use RGBAFormat and UnsignedByteType.")}}else{console.error("THREE.WebGLTextures: Unsupported texture color space:",n)}}return t}function B(e){if(typeof HTMLImageElement!=="undefined"&&e instanceof HTMLImageElement){t.width=e.naturalWidth||e.width;t.height=e.naturalHeight||e.height}else if(typeof VideoFrame!=="undefined"&&e instanceof VideoFrame){t.width=e.displayWidth;t.height=e.displayHeight}else{t.width=e.width;t.height=e.height}return t}this.allocateTextureUnit=V;this.resetTextureUnits=e;this.setTexture2D=s;this.setTexture2DArray=z;this.setTexture3D=k;this.setTextureCube=H;this.rebindTextures=Y;this.setupRenderTarget=Z;this.updateRenderTargetMipmap=J;this.updateMultisampleRenderTarget=K;this.setupDepthRenderbuffer=x;this.setupFrameBufferTexture=v;this.useMultisampledRTT=N}function WebGLUtils(r,s){function e(e,t=NoColorSpace){let n;const i=ColorManagement.getTransfer(t);if(e===UnsignedByteType)return r.UNSIGNED_BYTE;if(e===UnsignedShort4444Type)return r.UNSIGNED_SHORT_4_4_4_4;if(e===UnsignedShort5551Type)return r.UNSIGNED_SHORT_5_5_5_1;if(e===UnsignedInt5999Type)return r.UNSIGNED_INT_5_9_9_9_REV;if(e===ByteType)return r.BYTE;if(e===ShortType)return r.SHORT;if(e===UnsignedShortType)return r.UNSIGNED_SHORT;if(e===IntType)return r.INT;if(e===UnsignedIntType)return r.UNSIGNED_INT;if(e===FloatType)return r.FLOAT;if(e===HalfFloatType)return r.HALF_FLOAT;if(e===AlphaFormat)return r.ALPHA;if(e===RGBFormat)return r.RGB;if(e===RGBAFormat)return r.RGBA;if(e===LuminanceFormat)return r.LUMINANCE;if(e===LuminanceAlphaFormat)return r.LUMINANCE_ALPHA;if(e===DepthFormat)return r.DEPTH_COMPONENT;if(e===DepthStencilFormat)return r.DEPTH_STENCIL;if(e===RedFormat)return r.RED;if(e===RedIntegerFormat)return r.RED_INTEGER;if(e===RGFormat)return r.RG;if(e===RGIntegerFormat)return r.RG_INTEGER;if(e===RGBAIntegerFormat)return r.RGBA_INTEGER;if(e===RGB_S3TC_DXT1_Format||e===RGBA_S3TC_DXT1_Format||e===RGBA_S3TC_DXT3_Format||e===RGBA_S3TC_DXT5_Format){if(i===SRGBTransfer){n=s.get("WEBGL_compressed_texture_s3tc_srgb");if(n!==null){if(e===RGB_S3TC_DXT1_Format)return n.COMPRESSED_SRGB_S3TC_DXT1_EXT;if(e===RGBA_S3TC_DXT1_Format)return n.COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT;if(e===RGBA_S3TC_DXT3_Format)return n.COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT;if(e===RGBA_S3TC_DXT5_Format)return n.COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT}else{return null}}else{n=s.get("WEBGL_compressed_texture_s3tc");if(n!==null){if(e===RGB_S3TC_DXT1_Format)return n.COMPRESSED_RGB_S3TC_DXT1_EXT;if(e===RGBA_S3TC_DXT1_Format)return n.COMPRESSED_RGBA_S3TC_DXT1_EXT;if(e===RGBA_S3TC_DXT3_Format)return n.COMPRESSED_RGBA_S3TC_DXT3_EXT;if(e===RGBA_S3TC_DXT5_Format)return n.COMPRESSED_RGBA_S3TC_DXT5_EXT}else{return null}}}if(e===RGB_PVRTC_4BPPV1_Format||e===RGB_PVRTC_2BPPV1_Format||e===RGBA_PVRTC_4BPPV1_Format||e===RGBA_PVRTC_2BPPV1_Format){n=s.get("WEBGL_compressed_texture_pvrtc");if(n!==null){if(e===RGB_PVRTC_4BPPV1_Format)return n.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;if(e===RGB_PVRTC_2BPPV1_Format)return n.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;if(e===RGBA_PVRTC_4BPPV1_Format)return n.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;if(e===RGBA_PVRTC_2BPPV1_Format)return n.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG}else{return null}}if(e===RGB_ETC1_Format||e===RGB_ETC2_Format||e===RGBA_ETC2_EAC_Format){n=s.get("WEBGL_compressed_texture_etc");if(n!==null){if(e===RGB_ETC1_Format||e===RGB_ETC2_Format)return i===SRGBTransfer?n.COMPRESSED_SRGB8_ETC2:n.COMPRESSED_RGB8_ETC2;if(e===RGBA_ETC2_EAC_Format)return i===SRGBTransfer?n.COMPRESSED_SRGB8_ALPHA8_ETC2_EAC:n.COMPRESSED_RGBA8_ETC2_EAC}else{return null}}if(e===RGBA_ASTC_4x4_Format||e===RGBA_ASTC_5x4_Format||e===RGBA_ASTC_5x5_Format||e===RGBA_ASTC_6x5_Format||e===RGBA_ASTC_6x6_Format||e===RGBA_ASTC_8x5_Format||e===RGBA_ASTC_8x6_Format||e===RGBA_ASTC_8x8_Format||e===RGBA_ASTC_10x5_Format||e===RGBA_ASTC_10x6_Format||e===RGBA_ASTC_10x8_Format||e===RGBA_ASTC_10x10_Format||e===RGBA_ASTC_12x10_Format||e===RGBA_ASTC_12x12_Format){n=s.get("WEBGL_compressed_texture_astc");if(n!==null){if(e===RGBA_ASTC_4x4_Format)return i===SRGBTransfer?n.COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR:n.COMPRESSED_RGBA_ASTC_4x4_KHR;if(e===RGBA_ASTC_5x4_Format)return i===SRGBTransfer?n.COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR:n.COMPRESSED_RGBA_ASTC_5x4_KHR;if(e===RGBA_ASTC_5x5_Format)return i===SRGBTransfer?n.COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR:n.COMPRESSED_RGBA_ASTC_5x5_KHR;if(e===RGBA_ASTC_6x5_Format)return i===SRGBTransfer?n.COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR:n.COMPRESSED_RGBA_ASTC_6x5_KHR;if(e===RGBA_ASTC_6x6_Format)return i===SRGBTransfer?n.COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR:n.COMPRESSED_RGBA_ASTC_6x6_KHR;if(e===RGBA_ASTC_8x5_Format)return i===SRGBTransfer?n.COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR:n.COMPRESSED_RGBA_ASTC_8x5_KHR;if(e===RGBA_ASTC_8x6_Format)return i===SRGBTransfer?n.COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR:n.COMPRESSED_RGBA_ASTC_8x6_KHR;if(e===RGBA_ASTC_8x8_Format)return i===SRGBTransfer?n.COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR:n.COMPRESSED_RGBA_ASTC_8x8_KHR;if(e===RGBA_ASTC_10x5_Format)return i===SRGBTransfer?n.COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR:n.COMPRESSED_RGBA_ASTC_10x5_KHR;if(e===RGBA_ASTC_10x6_Format)return i===SRGBTransfer?n.COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR:n.COMPRESSED_RGBA_ASTC_10x6_KHR;if(e===RGBA_ASTC_10x8_Format)return i===SRGBTransfer?n.COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR:n.COMPRESSED_RGBA_ASTC_10x8_KHR;if(e===RGBA_ASTC_10x10_Format)return i===SRGBTransfer?n.COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR:n.COMPRESSED_RGBA_ASTC_10x10_KHR;if(e===RGBA_ASTC_12x10_Format)return i===SRGBTransfer?n.COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR:n.COMPRESSED_RGBA_ASTC_12x10_KHR;if(e===RGBA_ASTC_12x12_Format)return i===SRGBTransfer?n.COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR:n.COMPRESSED_RGBA_ASTC_12x12_KHR}else{return null}}if(e===RGBA_BPTC_Format||e===RGB_BPTC_SIGNED_Format||e===RGB_BPTC_UNSIGNED_Format){n=s.get("EXT_texture_compression_bptc");if(n!==null){if(e===RGBA_BPTC_Format)return i===SRGBTransfer?n.COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT:n.COMPRESSED_RGBA_BPTC_UNORM_EXT;if(e===RGB_BPTC_SIGNED_Format)return n.COMPRESSED_RGB_BPTC_SIGNED_FLOAT_EXT;if(e===RGB_BPTC_UNSIGNED_Format)return n.COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_EXT}else{return null}}if(e===RED_RGTC1_Format||e===SIGNED_RED_RGTC1_Format||e===RED_GREEN_RGTC2_Format||e===SIGNED_RED_GREEN_RGTC2_Format){n=s.get("EXT_texture_compression_rgtc");if(n!==null){if(e===RGBA_BPTC_Format)return n.COMPRESSED_RED_RGTC1_EXT;if(e===SIGNED_RED_RGTC1_Format)return n.COMPRESSED_SIGNED_RED_RGTC1_EXT;if(e===RED_GREEN_RGTC2_Format)return n.COMPRESSED_RED_GREEN_RGTC2_EXT;if(e===SIGNED_RED_GREEN_RGTC2_Format)return n.COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT}else{return null}}if(e===UnsignedInt248Type)return r.UNSIGNED_INT_24_8;return r[e]!==undefined?r[e]:null}return{convert:e}}class ArrayCamera extends PerspectiveCamera{constructor(e=[]){super();this.isArrayCamera=true;this.cameras=e}}class Group extends Object3D{constructor(){super();this.isGroup=true;this.type="Group"}}const _moveEvent={type:"move"};class WebXRController{constructor(){this._targetRay=null;this._grip=null;this._hand=null}getHandSpace(){if(this._hand===null){this._hand=new Group;this._hand.matrixAutoUpdate=false;this._hand.visible=false;this._hand.joints={};this._hand.inputState={pinching:false}}return this._hand}getTargetRaySpace(){if(this._targetRay===null){this._targetRay=new Group;this._targetRay.matrixAutoUpdate=false;this._targetRay.visible=false;this._targetRay.hasLinearVelocity=false;this._targetRay.linearVelocity=new Vector3;this._targetRay.hasAngularVelocity=false;this._targetRay.angularVelocity=new Vector3}return this._targetRay}getGripSpace(){if(this._grip===null){this._grip=new Group;this._grip.matrixAutoUpdate=false;this._grip.visible=false;this._grip.hasLinearVelocity=false;this._grip.linearVelocity=new Vector3;this._grip.hasAngularVelocity=false;this._grip.angularVelocity=new Vector3}return this._grip}dispatchEvent(e){if(this._targetRay!==null){this._targetRay.dispatchEvent(e)}if(this._grip!==null){this._grip.dispatchEvent(e)}if(this._hand!==null){this._hand.dispatchEvent(e)}return this}connect(e){if(e&&e.hand){const t=this._hand;if(t){for(const n of e.hand.values()){this._getHandJoint(t,n)}}}this.dispatchEvent({type:"connected",data:e});return this}disconnect(e){this.dispatchEvent({type:"disconnected",data:e});if(this._targetRay!==null){this._targetRay.visible=false}if(this._grip!==null){this._grip.visible=false}if(this._hand!==null){this._hand.visible=false}return this}update(e,t,n){let i=null;let r=null;let s=null;const a=this._targetRay;const o=this._grip;const l=this._hand;if(e&&t.session.visibilityState!=="visible-blurred"){if(l&&e.hand){s=true;for(const p of e.hand.values()){const m=t.getJointPose(p,n);const g=this._getHandJoint(l,p);if(m!==null){g.matrix.fromArray(m.transform.matrix);g.matrix.decompose(g.position,g.rotation,g.scale);g.matrixWorldNeedsUpdate=true;g.jointRadius=m.radius}g.visible=m!==null}const c=l.joints["index-finger-tip"];const u=l.joints["thumb-tip"];const h=c.position.distanceTo(u.position);const d=.02;const f=.005;if(l.inputState.pinching&&h>d+f){l.inputState.pinching=false;this.dispatchEvent({type:"pinchend",handedness:e.handedness,target:this})}else if(!l.inputState.pinching&&h<=d-f){l.inputState.pinching=true;this.dispatchEvent({type:"pinchstart",handedness:e.handedness,target:this})}}else{if(o!==null&&e.gripSpace){r=t.getPose(e.gripSpace,n);if(r!==null){o.matrix.fromArray(r.transform.matrix);o.matrix.decompose(o.position,o.rotation,o.scale);o.matrixWorldNeedsUpdate=true;if(r.linearVelocity){o.hasLinearVelocity=true;o.linearVelocity.copy(r.linearVelocity)}else{o.hasLinearVelocity=false}if(r.angularVelocity){o.hasAngularVelocity=true;o.angularVelocity.copy(r.angularVelocity)}else{o.hasAngularVelocity=false}}}}if(a!==null){i=t.getPose(e.targetRaySpace,n);if(i===null&&r!==null){i=r}if(i!==null){a.matrix.fromArray(i.transform.matrix);a.matrix.decompose(a.position,a.rotation,a.scale);a.matrixWorldNeedsUpdate=true;if(i.linearVelocity){a.hasLinearVelocity=true;a.linearVelocity.copy(i.linearVelocity)}else{a.hasLinearVelocity=false}if(i.angularVelocity){a.hasAngularVelocity=true;a.angularVelocity.copy(i.angularVelocity)}else{a.hasAngularVelocity=false}this.dispatchEvent(_moveEvent)}}}if(a!==null){a.visible=i!==null}if(o!==null){o.visible=r!==null}if(l!==null){l.visible=s!==null}return this}_getHandJoint(e,t){if(e.joints[t.jointName]===undefined){const n=new Group;n.matrixAutoUpdate=false;n.visible=false;e.joints[t.jointName]=n;e.add(n)}return e.joints[t.jointName]}}const _occlusion_vertex=`
void main() {

	gl_Position = vec4( position, 1.0 );

}`;const _occlusion_fragment=`
uniform sampler2DArray depthColor;
uniform float depthWidth;
uniform float depthHeight;

void main() {

	vec2 coord = vec2( gl_FragCoord.x / depthWidth, gl_FragCoord.y / depthHeight );

	if ( coord.x >= 1.0 ) {

		gl_FragDepth = texture( depthColor, vec3( coord.x - 1.0, coord.y, 1 ) ).r;

	} else {

		gl_FragDepth = texture( depthColor, vec3( coord.x, coord.y, 0 ) ).r;

	}

}`;class WebXRDepthSensing{constructor(){this.texture=null;this.mesh=null;this.depthNear=0;this.depthFar=0}init(e,t,n){if(this.texture===null){const i=new Texture;const r=e.properties.get(i);r.__webglTexture=t.texture;if(t.depthNear!=n.depthNear||t.depthFar!=n.depthFar){this.depthNear=t.depthNear;this.depthFar=t.depthFar}this.texture=i}}render(e,t){if(this.texture!==null){if(this.mesh===null){const n=t.cameras[0].viewport;const i=new ShaderMaterial({vertexShader:_occlusion_vertex,fragmentShader:_occlusion_fragment,uniforms:{depthColor:{value:this.texture},depthWidth:{value:n.z},depthHeight:{value:n.w}}});this.mesh=new Mesh(new PlaneGeometry(20,20),i)}e.render(this.mesh,t)}}reset(){this.texture=null;this.mesh=null}}class WebXRManager extends EventDispatcher{constructor(c,s){super();const u=this;let h=null;let a=1;let d=null;let n="local-floor";let o=1;let f=null;let p=null;let m=null;let g=null;let _=null;let v=null;const y=new WebXRDepthSensing;const l=s.getContextAttributes();let x=null;let M=null;const S=[];const b=[];const T=new Vector2;let A=null;const i=new PerspectiveCamera;i.layers.enable(1);i.viewport=new Vector4;const r=new PerspectiveCamera;r.layers.enable(2);r.viewport=new Vector4;const E=[i,r];const w=new ArrayCamera;w.layers.enable(1);w.layers.enable(2);let C=null;let R=null;this.cameraAutoUpdate=true;this.enabled=false;this.isPresenting=false;this.getController=function(e){let t=S[e];if(t===undefined){t=new WebXRController;S[e]=t}return t.getTargetRaySpace()};this.getControllerGrip=function(e){let t=S[e];if(t===undefined){t=new WebXRController;S[e]=t}return t.getGripSpace()};this.getHand=function(e){let t=S[e];if(t===undefined){t=new WebXRController;S[e]=t}return t.getHandSpace()};function L(e){const t=b.indexOf(e.inputSource);if(t===-1){return}const n=S[t];if(n!==undefined){n.update(e.inputSource,e.frame,f||d);n.dispatchEvent({type:e.type,data:e.inputSource})}}function P(){h.removeEventListener("select",L);h.removeEventListener("selectstart",L);h.removeEventListener("selectend",L);h.removeEventListener("squeeze",L);h.removeEventListener("squeezestart",L);h.removeEventListener("squeezeend",L);h.removeEventListener("end",P);h.removeEventListener("inputsourceschange",I);for(let e=0;e<S.length;e++){const t=b[e];if(t===null)continue;b[e]=null;S[e].disconnect(t)}C=null;R=null;y.reset();c.setRenderTarget(x);_=null;g=null;m=null;h=null;M=null;F.stop();u.isPresenting=false;c.setPixelRatio(A);c.setSize(T.width,T.height,false);u.dispatchEvent({type:"sessionend"})}this.setFramebufferScaleFactor=function(e){a=e;if(u.isPresenting===true){console.warn("THREE.WebXRManager: Cannot change framebuffer scale while presenting.")}};this.setReferenceSpaceType=function(e){n=e;if(u.isPresenting===true){console.warn("THREE.WebXRManager: Cannot change reference space type while presenting.")}};this.getReferenceSpace=function(){return f||d};this.setReferenceSpace=function(e){f=e};this.getBaseLayer=function(){return g!==null?g:_};this.getBinding=function(){return m};this.getFrame=function(){return v};this.getSession=function(){return h};this.setSession=async function(e){h=e;if(h!==null){x=c.getRenderTarget();h.addEventListener("select",L);h.addEventListener("selectstart",L);h.addEventListener("selectend",L);h.addEventListener("squeeze",L);h.addEventListener("squeezestart",L);h.addEventListener("squeezeend",L);h.addEventListener("end",P);h.addEventListener("inputsourceschange",I);if(l.xrCompatible!==true){await s.makeXRCompatible()}A=c.getPixelRatio();c.getSize(T);if(h.renderState.layers===undefined){const t={antialias:l.antialias,alpha:true,depth:l.depth,stencil:l.stencil,framebufferScaleFactor:a};_=new XRWebGLLayer(h,s,t);h.updateRenderState({baseLayer:_});c.setPixelRatio(1);c.setSize(_.framebufferWidth,_.framebufferHeight,false);M=new WebGLRenderTarget(_.framebufferWidth,_.framebufferHeight,{format:RGBAFormat,type:UnsignedByteType,colorSpace:c.outputColorSpace,stencilBuffer:l.stencil})}else{let e=null;let t=null;let n=null;if(l.depth){n=l.stencil?s.DEPTH24_STENCIL8:s.DEPTH_COMPONENT24;e=l.stencil?DepthStencilFormat:DepthFormat;t=l.stencil?UnsignedInt248Type:UnsignedIntType}const i={colorFormat:s.RGBA8,depthFormat:n,scaleFactor:a};m=new XRWebGLBinding(h,s);g=m.createProjectionLayer(i);h.updateRenderState({layers:[g]});c.setPixelRatio(1);c.setSize(g.textureWidth,g.textureHeight,false);M=new WebGLRenderTarget(g.textureWidth,g.textureHeight,{format:RGBAFormat,type:UnsignedByteType,depthTexture:new DepthTexture(g.textureWidth,g.textureHeight,t,undefined,undefined,undefined,undefined,undefined,undefined,e),stencilBuffer:l.stencil,colorSpace:c.outputColorSpace,samples:l.antialias?4:0});const r=c.properties.get(M);r.__ignoreDepthValues=g.ignoreDepthValues}M.isXRRenderTarget=true;this.setFoveation(o);f=null;d=await h.requestReferenceSpace(n);F.setContext(h);F.start();u.isPresenting=true;u.dispatchEvent({type:"sessionstart"})}};this.getEnvironmentBlendMode=function(){if(h!==null){return h.environmentBlendMode}};function I(n){for(let e=0;e<n.removed.length;e++){const i=n.removed[e];const t=b.indexOf(i);if(t>=0){b[t]=null;S[t].disconnect(i)}}for(let e=0;e<n.added.length;e++){const i=n.added[e];let t=b.indexOf(i);if(t===-1){for(let e=0;e<S.length;e++){if(e>=b.length){b.push(i);t=e;break}else if(b[e]===null){b[e]=i;t=e;break}}if(t===-1)break}const r=S[t];if(r){r.connect(i)}}}const U=new Vector3;const D=new Vector3;function O(e,t,n){U.setFromMatrixPosition(t.matrixWorld);D.setFromMatrixPosition(n.matrixWorld);const i=U.distanceTo(D);const r=t.projectionMatrix.elements;const s=n.projectionMatrix.elements;const a=r[14]/(r[10]-1);const o=r[14]/(r[10]+1);const l=(r[9]+1)/r[5];const c=(r[9]-1)/r[5];const u=(r[8]-1)/r[0];const h=(s[8]+1)/s[0];const d=a*u;const f=a*h;const p=i/(-u+h);const m=p*-u;t.matrixWorld.decompose(e.position,e.quaternion,e.scale);e.translateX(m);e.translateZ(p);e.matrixWorld.compose(e.position,e.quaternion,e.scale);e.matrixWorldInverse.copy(e.matrixWorld).invert();const g=a+p;const _=o+p;const v=d-m;const y=f+(i-m);const x=l*o/_*g;const M=c*o/_*g;e.projectionMatrix.makePerspective(v,y,x,M,g,_);e.projectionMatrixInverse.copy(e.projectionMatrix).invert()}function N(e,t){if(t===null){e.matrixWorld.copy(e.matrix)}else{e.matrixWorld.multiplyMatrices(t.matrixWorld,e.matrix)}e.matrixWorldInverse.copy(e.matrixWorld).invert()}this.updateCamera=function(e){if(h===null)return;if(y.texture!==null){e.near=y.depthNear;e.far=y.depthFar}w.near=r.near=i.near=e.near;w.far=r.far=i.far=e.far;if(C!==w.near||R!==w.far){h.updateRenderState({depthNear:w.near,depthFar:w.far});C=w.near;R=w.far;i.near=C;i.far=R;r.near=C;r.far=R;i.updateProjectionMatrix();r.updateProjectionMatrix();e.updateProjectionMatrix()}const t=e.parent;const n=w.cameras;N(w,t);for(let e=0;e<n.length;e++){N(n[e],t)}if(n.length===2){O(w,i,r)}else{w.projectionMatrix.copy(i.projectionMatrix)}V(e,w,t)};function V(e,t,n){if(n===null){e.matrix.copy(t.matrixWorld)}else{e.matrix.copy(n.matrixWorld);e.matrix.invert();e.matrix.multiply(t.matrixWorld)}e.matrix.decompose(e.position,e.quaternion,e.scale);e.updateMatrixWorld(true);e.projectionMatrix.copy(t.projectionMatrix);e.projectionMatrixInverse.copy(t.projectionMatrixInverse);if(e.isPerspectiveCamera){e.fov=RAD2DEG*2*Math.atan(1/e.projectionMatrix.elements[5]);e.zoom=1}}this.getCamera=function(){return w};this.getFoveation=function(){if(g===null&&_===null){return undefined}return o};this.setFoveation=function(e){o=e;if(g!==null){g.fixedFoveation=e}if(_!==null&&_.fixedFoveation!==undefined){_.fixedFoveation=e}};this.hasDepthSensing=function(){return y.texture!==null};let B=null;function e(e,t){p=t.getViewerPose(f||d);v=t;if(p!==null){const r=p.views;if(_!==null){c.setRenderTargetFramebuffer(M,_.framebuffer);c.setRenderTarget(M)}let i=false;if(r.length!==w.cameras.length){w.cameras.length=0;i=true}for(let n=0;n<r.length;n++){const s=r[n];let e=null;if(_!==null){e=_.getViewport(s)}else{const a=m.getViewSubImage(g,s);e=a.viewport;if(n===0){c.setRenderTargetTextures(M,a.colorTexture,g.ignoreDepthValues?undefined:a.depthStencilTexture);c.setRenderTarget(M)}}let t=E[n];if(t===undefined){t=new PerspectiveCamera;t.layers.enable(n);t.viewport=new Vector4;E[n]=t}t.matrix.fromArray(s.transform.matrix);t.matrix.decompose(t.position,t.quaternion,t.scale);t.projectionMatrix.fromArray(s.projectionMatrix);t.projectionMatrixInverse.copy(t.projectionMatrix).invert();t.viewport.set(e.x,e.y,e.width,e.height);if(n===0){w.matrix.copy(t.matrix);w.matrix.decompose(w.position,w.quaternion,w.scale)}if(i===true){w.cameras.push(t)}}const n=h.enabledFeatures;if(n&&n.includes("depth-sensing")){const o=m.getDepthInformation(r[0]);if(o&&o.isValid&&o.texture){y.init(c,o,h.renderState)}}}for(let e=0;e<S.length;e++){const i=b[e];const l=S[e];if(i!==null&&l!==undefined){l.update(i,t,f||d)}}y.render(c,w);if(B)B(e,t);if(t.detectedPlanes){u.dispatchEvent({type:"planesdetected",data:t})}v=null}const F=new WebGLAnimation;F.setAnimationLoop(e);this.setAnimationLoop=function(e){B=e};this.dispose=function(){}}}const _e1=new Euler;const _m1=new Matrix4;function WebGLMaterials(a,o){function l(e,t){if(e.matrixAutoUpdate===true){e.updateMatrix()}t.value.copy(e.matrix)}function e(e,t){t.color.getRGB(e.fogColor.value,getUnlitUniformColorSpace(a));if(t.isFog){e.fogNear.value=t.near;e.fogFar.value=t.far}else if(t.isFogExp2){e.fogDensity.value=t.density}}function t(e,t,n,i,r){if(t.isMeshBasicMaterial){s(e,t)}else if(t.isMeshLambertMaterial){s(e,t)}else if(t.isMeshToonMaterial){s(e,t);p(e,t)}else if(t.isMeshPhongMaterial){s(e,t);f(e,t)}else if(t.isMeshStandardMaterial){s(e,t);m(e,t);if(t.isMeshPhysicalMaterial){g(e,t,r)}}else if(t.isMeshMatcapMaterial){s(e,t);_(e,t)}else if(t.isMeshDepthMaterial){s(e,t)}else if(t.isMeshDistanceMaterial){s(e,t);v(e,t)}else if(t.isMeshNormalMaterial){s(e,t)}else if(t.isLineBasicMaterial){c(e,t);if(t.isLineDashedMaterial){u(e,t)}}else if(t.isPointsMaterial){h(e,t,n,i)}else if(t.isSpriteMaterial){d(e,t)}else if(t.isShadowMaterial){e.color.value.copy(t.color);e.opacity.value=t.opacity}else if(t.isShaderMaterial){t.uniformsNeedUpdate=false}}function s(e,t){e.opacity.value=t.opacity;if(t.color){e.diffuse.value.copy(t.color)}if(t.emissive){e.emissive.value.copy(t.emissive).multiplyScalar(t.emissiveIntensity)}if(t.map){e.map.value=t.map;l(t.map,e.mapTransform)}if(t.alphaMap){e.alphaMap.value=t.alphaMap;l(t.alphaMap,e.alphaMapTransform)}if(t.bumpMap){e.bumpMap.value=t.bumpMap;l(t.bumpMap,e.bumpMapTransform);e.bumpScale.value=t.bumpScale;if(t.side===BackSide){e.bumpScale.value*=-1}}if(t.normalMap){e.normalMap.value=t.normalMap;l(t.normalMap,e.normalMapTransform);e.normalScale.value.copy(t.normalScale);if(t.side===BackSide){e.normalScale.value.negate()}}if(t.displacementMap){e.displacementMap.value=t.displacementMap;l(t.displacementMap,e.displacementMapTransform);e.displacementScale.value=t.displacementScale;e.displacementBias.value=t.displacementBias}if(t.emissiveMap){e.emissiveMap.value=t.emissiveMap;l(t.emissiveMap,e.emissiveMapTransform)}if(t.specularMap){e.specularMap.value=t.specularMap;l(t.specularMap,e.specularMapTransform)}if(t.alphaTest>0){e.alphaTest.value=t.alphaTest}const n=o.get(t);const i=n.envMap;const r=n.envMapRotation;if(i){e.envMap.value=i;_e1.copy(r);_e1.x*=-1;_e1.y*=-1;_e1.z*=-1;if(i.isCubeTexture&&i.isRenderTargetTexture===false){_e1.y*=-1;_e1.z*=-1}e.envMapRotation.value.setFromMatrix4(_m1.makeRotationFromEuler(_e1));e.flipEnvMap.value=i.isCubeTexture&&i.isRenderTargetTexture===false?-1:1;e.reflectivity.value=t.reflectivity;e.ior.value=t.ior;e.refractionRatio.value=t.refractionRatio}if(t.lightMap){e.lightMap.value=t.lightMap;const s=a._useLegacyLights===true?Math.PI:1;e.lightMapIntensity.value=t.lightMapIntensity*s;l(t.lightMap,e.lightMapTransform)}if(t.aoMap){e.aoMap.value=t.aoMap;e.aoMapIntensity.value=t.aoMapIntensity;l(t.aoMap,e.aoMapTransform)}}function c(e,t){e.diffuse.value.copy(t.color);e.opacity.value=t.opacity;if(t.map){e.map.value=t.map;l(t.map,e.mapTransform)}}function u(e,t){e.dashSize.value=t.dashSize;e.totalSize.value=t.dashSize+t.gapSize;e.scale.value=t.scale}function h(e,t,n,i){e.diffuse.value.copy(t.color);e.opacity.value=t.opacity;e.size.value=t.size*n;e.scale.value=i*.5;if(t.map){e.map.value=t.map;l(t.map,e.uvTransform)}if(t.alphaMap){e.alphaMap.value=t.alphaMap;l(t.alphaMap,e.alphaMapTransform)}if(t.alphaTest>0){e.alphaTest.value=t.alphaTest}}function d(e,t){e.diffuse.value.copy(t.color);e.opacity.value=t.opacity;e.rotation.value=t.rotation;if(t.map){e.map.value=t.map;l(t.map,e.mapTransform)}if(t.alphaMap){e.alphaMap.value=t.alphaMap;l(t.alphaMap,e.alphaMapTransform)}if(t.alphaTest>0){e.alphaTest.value=t.alphaTest}}function f(e,t){e.specular.value.copy(t.specular);e.shininess.value=Math.max(t.shininess,1e-4)}function p(e,t){if(t.gradientMap){e.gradientMap.value=t.gradientMap}}function m(e,t){e.metalness.value=t.metalness;if(t.metalnessMap){e.metalnessMap.value=t.metalnessMap;l(t.metalnessMap,e.metalnessMapTransform)}e.roughness.value=t.roughness;if(t.roughnessMap){e.roughnessMap.value=t.roughnessMap;l(t.roughnessMap,e.roughnessMapTransform)}if(t.envMap){e.envMapIntensity.value=t.envMapIntensity}}function g(e,t,n){e.ior.value=t.ior;if(t.sheen>0){e.sheenColor.value.copy(t.sheenColor).multiplyScalar(t.sheen);e.sheenRoughness.value=t.sheenRoughness;if(t.sheenColorMap){e.sheenColorMap.value=t.sheenColorMap;l(t.sheenColorMap,e.sheenColorMapTransform)}if(t.sheenRoughnessMap){e.sheenRoughnessMap.value=t.sheenRoughnessMap;l(t.sheenRoughnessMap,e.sheenRoughnessMapTransform)}}if(t.clearcoat>0){e.clearcoat.value=t.clearcoat;e.clearcoatRoughness.value=t.clearcoatRoughness;if(t.clearcoatMap){e.clearcoatMap.value=t.clearcoatMap;l(t.clearcoatMap,e.clearcoatMapTransform)}if(t.clearcoatRoughnessMap){e.clearcoatRoughnessMap.value=t.clearcoatRoughnessMap;l(t.clearcoatRoughnessMap,e.clearcoatRoughnessMapTransform)}if(t.clearcoatNormalMap){e.clearcoatNormalMap.value=t.clearcoatNormalMap;l(t.clearcoatNormalMap,e.clearcoatNormalMapTransform);e.clearcoatNormalScale.value.copy(t.clearcoatNormalScale);if(t.side===BackSide){e.clearcoatNormalScale.value.negate()}}}if(t.dispersion>0){e.dispersion.value=t.dispersion}if(t.iridescence>0){e.iridescence.value=t.iridescence;e.iridescenceIOR.value=t.iridescenceIOR;e.iridescenceThicknessMinimum.value=t.iridescenceThicknessRange[0];e.iridescenceThicknessMaximum.value=t.iridescenceThicknessRange[1];if(t.iridescenceMap){e.iridescenceMap.value=t.iridescenceMap;l(t.iridescenceMap,e.iridescenceMapTransform)}if(t.iridescenceThicknessMap){e.iridescenceThicknessMap.value=t.iridescenceThicknessMap;l(t.iridescenceThicknessMap,e.iridescenceThicknessMapTransform)}}if(t.transmission>0){e.transmission.value=t.transmission;e.transmissionSamplerMap.value=n.texture;e.transmissionSamplerSize.value.set(n.width,n.height);if(t.transmissionMap){e.transmissionMap.value=t.transmissionMap;l(t.transmissionMap,e.transmissionMapTransform)}e.thickness.value=t.thickness;if(t.thicknessMap){e.thicknessMap.value=t.thicknessMap;l(t.thicknessMap,e.thicknessMapTransform)}e.attenuationDistance.value=t.attenuationDistance;e.attenuationColor.value.copy(t.attenuationColor)}if(t.anisotropy>0){e.anisotropyVector.value.set(t.anisotropy*Math.cos(t.anisotropyRotation),t.anisotropy*Math.sin(t.anisotropyRotation));if(t.anisotropyMap){e.anisotropyMap.value=t.anisotropyMap;l(t.anisotropyMap,e.anisotropyMapTransform)}}e.specularIntensity.value=t.specularIntensity;e.specularColor.value.copy(t.specularColor);if(t.specularColorMap){e.specularColorMap.value=t.specularColorMap;l(t.specularColorMap,e.specularColorMapTransform)}if(t.specularIntensityMap){e.specularIntensityMap.value=t.specularIntensityMap;l(t.specularIntensityMap,e.specularIntensityMapTransform)}}function _(e,t){if(t.matcap){e.matcap.value=t.matcap}}function v(e,t){const n=o.get(t).light;e.referencePosition.value.setFromMatrixPosition(n.matrixWorld);e.nearDistance.value=n.shadow.camera.near;e.farDistance.value=n.shadow.camera.far}return{refreshFogUniforms:e,refreshMaterialUniforms:t}}function WebGLUniformsGroups(u,s,e,a){let h={};let o={};let i=[];const t=u.getParameter(u.MAX_UNIFORM_BUFFER_BINDINGS);function n(e,t){const n=t.program;a.uniformBlockBinding(e,n)}function r(e,t){let n=h[e.id];if(n===undefined){p(e);n=l(e);h[e.id]=n;e.addEventListener("dispose",g)}const i=t.program;a.updateUBOMapping(e,i);const r=s.render.frame;if(o[e.id]!==r){d(e);o[e.id]=r}}function l(e){const t=c();e.__bindingPointIndex=t;const n=u.createBuffer();const i=e.__size;const r=e.usage;u.bindBuffer(u.UNIFORM_BUFFER,n);u.bufferData(u.UNIFORM_BUFFER,i,r);u.bindBuffer(u.UNIFORM_BUFFER,null);u.bindBufferBase(u.UNIFORM_BUFFER,t,n);return n}function c(){for(let e=0;e<t;e++){if(i.indexOf(e)===-1){i.push(e);return e}}console.error("THREE.WebGLRenderer: Maximum number of simultaneously usable uniforms groups reached.");return 0}function d(e){const t=h[e.id];const i=e.uniforms;const r=e.__cache;u.bindBuffer(u.UNIFORM_BUFFER,t);for(let n=0,e=i.length;n<e;n++){const s=Array.isArray(i[n])?i[n]:[i[n]];for(let e=0,t=s.length;e<t;e++){const a=s[e];if(f(a,n,e,r)===true){const o=a.__offset;const l=Array.isArray(a.value)?a.value:[a.value];let n=0;for(let t=0;t<l.length;t++){const c=l[t];const e=m(c);if(typeof c==="number"||typeof c==="boolean"){a.__data[0]=c;u.bufferSubData(u.UNIFORM_BUFFER,o+n,a.__data)}else if(c.isMatrix3){a.__data[0]=c.elements[0];a.__data[1]=c.elements[1];a.__data[2]=c.elements[2];a.__data[3]=0;a.__data[4]=c.elements[3];a.__data[5]=c.elements[4];a.__data[6]=c.elements[5];a.__data[7]=0;a.__data[8]=c.elements[6];a.__data[9]=c.elements[7];a.__data[10]=c.elements[8];a.__data[11]=0}else{c.toArray(a.__data,n);n+=e.storage/Float32Array.BYTES_PER_ELEMENT}}u.bufferSubData(u.UNIFORM_BUFFER,o,a.__data)}}}u.bindBuffer(u.UNIFORM_BUFFER,null)}function f(e,t,n,i){const r=e.value;const s=t+"_"+n;if(i[s]===undefined){if(typeof r==="number"||typeof r==="boolean"){i[s]=r}else{i[s]=r.clone()}return true}else{const a=i[s];if(typeof r==="number"||typeof r==="boolean"){if(a!==r){i[s]=r;return true}}else{if(a.equals(r)===false){a.copy(r);return true}}}return false}function p(e){const n=e.uniforms;let i=0;const r=16;for(let e=0,t=n.length;e<t;e++){const s=Array.isArray(n[e])?n[e]:[n[e]];for(let e=0,t=s.length;e<t;e++){const a=s[e];const o=Array.isArray(a.value)?a.value:[a.value];for(let t=0,e=o.length;t<e;t++){const l=o[t];const e=m(l);const c=i%r;if(c!==0&&r-c<e.boundary){i+=r-c}a.__data=new Float32Array(e.storage/Float32Array.BYTES_PER_ELEMENT);a.__offset=i;i+=e.storage}}}const t=i%r;if(t>0)i+=r-t;e.__size=i;e.__cache={};return this}function m(e){const t={boundary:0,storage:0};if(typeof e==="number"||typeof e==="boolean"){t.boundary=4;t.storage=4}else if(e.isVector2){t.boundary=8;t.storage=8}else if(e.isVector3||e.isColor){t.boundary=16;t.storage=12}else if(e.isVector4){t.boundary=16;t.storage=16}else if(e.isMatrix3){t.boundary=48;t.storage=48}else if(e.isMatrix4){t.boundary=64;t.storage=64}else if(e.isTexture){console.warn("THREE.WebGLRenderer: Texture samplers can not be part of an uniforms group.")}else{console.warn("THREE.WebGLRenderer: Unsupported uniform value type.",e)}return t}function g(e){const t=e.target;t.removeEventListener("dispose",g);const n=i.indexOf(t.__bindingPointIndex);i.splice(n,1);u.deleteBuffer(h[t.id]);delete h[t.id];delete o[t.id]}function _(){for(const e in h){u.deleteBuffer(h[e])}i=[];h={};o={}}return{bind:n,update:r,dispose:_}}class WebGLRenderer{constructor(e={}){const{canvas:i=createCanvasElement(),context:a=null,depth:o=true,stencil:S=false,alpha:b=false,antialias:T=false,premultipliedAlpha:A=true,preserveDrawingBuffer:E=false,powerPreference:w="default",failIfMajorPerformanceCaveat:C=false}=e;this.isWebGLRenderer=true;let R;if(a!==null){if(typeof WebGLRenderingContext!=="undefined"&&a instanceof WebGLRenderingContext){throw new Error("THREE.WebGLRenderer: WebGL 1 is not supported since r163.")}R=a.getContextAttributes().alpha}else{R=b}const d=new Uint32Array(4);const f=new Int32Array(4);let p=null;let I=null;const l=[];const c=[];this.domElement=i;this.debug={checkShaderErrors:true,onShaderError:null};this.autoClear=true;this.autoClearColor=true;this.autoClearDepth=true;this.autoClearStencil=true;this.sortObjects=true;this.clippingPlanes=[];this.localClippingEnabled=false;this._outputColorSpace=SRGBColorSpace;this._useLegacyLights=false;this.toneMapping=NoToneMapping;this.toneMappingExposure=1;const U=this;let L=false;let P=0;let Y=0;let D=null;let N=-1;let B=null;const v=new Vector4;const Z=new Vector4;let J=null;const K=new Color(0);let Q=0;let r=i.width;let F=i.height;let O=1;let ee=null;let te=null;const m=new Vector4(0,0,r,F);const ne=new Vector4(0,0,r,F);let ie=false;const re=new Frustum;let V=false;let se=false;const ae=new Matrix4;const G=new Vector3;const oe={background:null,fog:null,environment:null,overrideMaterial:null,isScene:true};function le(){return D===null?O:1}let z=a;function ce(e,t){const n=i.getContext(e,t);if(n!==null)return n;return null}try{const ke={alpha:true,depth:o,stencil:S,antialias:T,premultipliedAlpha:A,preserveDrawingBuffer:E,powerPreference:w,failIfMajorPerformanceCaveat:C};if("setAttribute"in i)i.setAttribute("data-engine",`three.js r${REVISION}`);i.addEventListener("webglcontextlost",xe,false);i.addEventListener("webglcontextrestored",Me,false);i.addEventListener("webglcontextcreationerror",Se,false);if(z===null){const He="webgl2";z=ce(He,ke);if(z===null){if(ce(He)){throw new Error("Error creating WebGL context with your selected attributes.")}else{throw new Error("Error creating WebGL context.")}}}}catch(e){console.error("THREE.WebGLRenderer: "+e.message);throw e}let y,k,H,s;let W,$,X,j,ue,he,t;let g,de,fe,pe,q,u;let _,me,ge,_e;let x,M,ve;function ye(){y=new WebGLExtensions(z);y.init();x=new WebGLUtils(z,y);k=new WebGLCapabilities(z,y,e,x);H=new WebGLState(z);s=new WebGLInfo(z);W=new WebGLProperties;$=new WebGLTextures(z,y,H,W,k,x,s);X=new WebGLCubeMaps(U);j=new WebGLCubeUVMaps(U);ue=new WebGLAttributes(z);M=new WebGLBindingStates(z,ue);he=new WebGLGeometries(z,ue,s,M);t=new WebGLObjects(z,he,ue,s);me=new WebGLMorphtargets(z,k,$);q=new WebGLClipping(W);g=new WebGLPrograms(U,X,j,y,k,M,q);de=new WebGLMaterials(U,W);fe=new WebGLRenderLists;pe=new WebGLRenderStates(y);_=new WebGLBackground(U,X,j,H,t,R,A);u=new WebGLShadowMap(U,t,k);ve=new WebGLUniformsGroups(z,s,k,H);ge=new WebGLBufferRenderer(z,y,s);_e=new WebGLIndexedBufferRenderer(z,y,s);s.programs=g.programs;U.capabilities=k;U.extensions=y;U.properties=W;U.renderLists=fe;U.shadowMap=u;U.state=H;U.info=s}ye();const h=new WebXRManager(U,z);this.xr=h;this.getContext=function(){return z};this.getContextAttributes=function(){return z.getContextAttributes()};this.forceContextLoss=function(){const e=y.get("WEBGL_lose_context");if(e)e.loseContext()};this.forceContextRestore=function(){const e=y.get("WEBGL_lose_context");if(e)e.restoreContext()};this.getPixelRatio=function(){return O};this.setPixelRatio=function(e){if(e===undefined)return;O=e;this.setSize(r,F,false)};this.getSize=function(e){return e.set(r,F)};this.setSize=function(e,t,n=true){if(h.isPresenting){console.warn("THREE.WebGLRenderer: Can't change size while VR device is presenting.");return}r=e;F=t;i.width=Math.floor(e*O);i.height=Math.floor(t*O);if(n===true){i.style.width=e+"px";i.style.height=t+"px"}this.setViewport(0,0,e,t)};this.getDrawingBufferSize=function(e){return e.set(r*O,F*O).floor()};this.setDrawingBufferSize=function(e,t,n){r=e;F=t;O=n;i.width=Math.floor(e*n);i.height=Math.floor(t*n);this.setViewport(0,0,e,t)};this.getCurrentViewport=function(e){return e.copy(v)};this.getViewport=function(e){return e.copy(m)};this.setViewport=function(e,t,n,i){if(e.isVector4){m.set(e.x,e.y,e.z,e.w)}else{m.set(e,t,n,i)}H.viewport(v.copy(m).multiplyScalar(O).round())};this.getScissor=function(e){return e.copy(ne)};this.setScissor=function(e,t,n,i){if(e.isVector4){ne.set(e.x,e.y,e.z,e.w)}else{ne.set(e,t,n,i)}H.scissor(Z.copy(ne).multiplyScalar(O).round())};this.getScissorTest=function(){return ie};this.setScissorTest=function(e){H.setScissorTest(ie=e)};this.setOpaqueSort=function(e){ee=e};this.setTransparentSort=function(e){te=e};this.getClearColor=function(e){return e.copy(_.getClearColor())};this.setClearColor=function(){_.setClearColor.apply(_,arguments)};this.getClearAlpha=function(){return _.getClearAlpha()};this.setClearAlpha=function(){_.setClearAlpha.apply(_,arguments)};this.clear=function(e=true,t=true,n=true){let i=0;if(e){let e=false;if(D!==null){const r=D.texture.format;e=r===RGBAIntegerFormat||r===RGIntegerFormat||r===RedIntegerFormat}if(e){const s=D.texture.type;const a=s===UnsignedByteType||s===UnsignedIntType||s===UnsignedShortType||s===UnsignedInt248Type||s===UnsignedShort4444Type||s===UnsignedShort5551Type;const o=_.getClearColor();const l=_.getClearAlpha();const c=o.r;const u=o.g;const h=o.b;if(a){d[0]=c;d[1]=u;d[2]=h;d[3]=l;z.clearBufferuiv(z.COLOR,0,d)}else{f[0]=c;f[1]=u;f[2]=h;f[3]=l;z.clearBufferiv(z.COLOR,0,f)}}else{i|=z.COLOR_BUFFER_BIT}}if(t)i|=z.DEPTH_BUFFER_BIT;if(n){i|=z.STENCIL_BUFFER_BIT;this.state.buffers.stencil.setMask(4294967295)}z.clear(i)};this.clearColor=function(){this.clear(true,false,false)};this.clearDepth=function(){this.clear(false,true,false)};this.clearStencil=function(){this.clear(false,false,true)};this.dispose=function(){i.removeEventListener("webglcontextlost",xe,false);i.removeEventListener("webglcontextrestored",Me,false);i.removeEventListener("webglcontextcreationerror",Se,false);fe.dispose();pe.dispose();W.dispose();X.dispose();j.dispose();t.dispose();M.dispose();ve.dispose();g.dispose();h.dispose();h.removeEventListener("sessionstart",Re);h.removeEventListener("sessionend",Le);n.stop()};function xe(e){e.preventDefault();console.log("THREE.WebGLRenderer: Context Lost.");L=true}function Me(){console.log("THREE.WebGLRenderer: Context Restored.");L=false;const e=s.autoReset;const t=u.enabled;const n=u.autoUpdate;const i=u.needsUpdate;const r=u.type;ye();s.autoReset=e;u.enabled=t;u.autoUpdate=n;u.needsUpdate=i;u.type=r}function Se(e){console.error("THREE.WebGLRenderer: A WebGL context could not be created. Reason: ",e.statusMessage)}function be(e){const t=e.target;t.removeEventListener("dispose",be);Te(t)}function Te(e){Ae(e);W.remove(e)}function Ae(e){const t=W.get(e).programs;if(t!==undefined){t.forEach(function(e){g.releaseProgram(e)});if(e.isShaderMaterial){g.releaseShaderCache(e)}}}this.renderBufferDirect=function(e,t,n,i,r,s){if(t===null)t=oe;const a=r.isMesh&&r.matrixWorld.determinant()<0;const o=Ve(e,t,n,i,r);H.setMaterial(i,a);let l=n.index;let c=1;if(i.wireframe===true){l=he.getWireframeAttribute(n);if(l===undefined)return;c=2}const u=n.drawRange;const h=n.attributes.position;let d=u.start*c;let f=(u.start+u.count)*c;if(s!==null){d=Math.max(d,s.start*c);f=Math.min(f,(s.start+s.count)*c)}if(l!==null){d=Math.max(d,0);f=Math.min(f,l.count)}else if(h!==undefined&&h!==null){d=Math.max(d,0);f=Math.min(f,h.count)}const p=f-d;if(p<0||p===Infinity)return;M.setup(r,i,o,n,l);let m;let g=ge;if(l!==null){m=ue.get(l);g=_e;g.setIndex(m)}if(r.isMesh){if(i.wireframe===true){H.setLineWidth(i.wireframeLinewidth*le());g.setMode(z.LINES)}else{g.setMode(z.TRIANGLES)}}else if(r.isLine){let e=i.linewidth;if(e===undefined)e=1;H.setLineWidth(e*le());if(r.isLineSegments){g.setMode(z.LINES)}else if(r.isLineLoop){g.setMode(z.LINE_LOOP)}else{g.setMode(z.LINE_STRIP)}}else if(r.isPoints){g.setMode(z.POINTS)}else if(r.isSprite){g.setMode(z.TRIANGLES)}if(r.isBatchedMesh){if(r._multiDrawInstances!==null){g.renderMultiDrawInstances(r._multiDrawStarts,r._multiDrawCounts,r._multiDrawCount,r._multiDrawInstances)}else{g.renderMultiDraw(r._multiDrawStarts,r._multiDrawCounts,r._multiDrawCount)}}else if(r.isInstancedMesh){g.renderInstances(d,p,r.count)}else if(n.isInstancedBufferGeometry){const _=n._maxInstanceCount!==undefined?n._maxInstanceCount:Infinity;const v=Math.min(n.instanceCount,_);g.renderInstances(d,p,v)}else{g.render(d,p)}};function Ee(e,t,n){if(e.transparent===true&&e.side===DoubleSide&&e.forceSinglePass===false){e.side=BackSide;e.needsUpdate=true;Be(e,t,n);e.side=FrontSide;e.needsUpdate=true;Be(e,t,n);e.side=DoubleSide}else{Be(e,t,n)}}this.compile=function(e,t,r=null){if(r===null)r=e;I=pe.get(r);I.init(t);c.push(I);r.traverseVisible(function(e){if(e.isLight&&e.layers.test(t.layers)){I.pushLight(e);if(e.castShadow){I.pushShadow(e)}}});if(e!==r){e.traverseVisible(function(e){if(e.isLight&&e.layers.test(t.layers)){I.pushLight(e);if(e.castShadow){I.pushShadow(e)}}})}I.setupLights(U._useLegacyLights);const s=new Set;e.traverse(function(t){const n=t.material;if(n){if(Array.isArray(n)){for(let e=0;e<n.length;e++){const i=n[e];Ee(i,r,t);s.add(i)}}else{Ee(n,r,t);s.add(n)}}});c.pop();I=null;return s};this.compileAsync=function(n,e,t=null){const i=this.compile(n,e,t);return new Promise(e=>{function t(){i.forEach(function(e){const t=W.get(e);const n=t.currentProgram;if(n.isReady()){i.delete(e)}});if(i.size===0){e(n);return}setTimeout(t,10)}if(y.get("KHR_parallel_shader_compile")!==null){t()}else{setTimeout(t,10)}})};let we=null;function Ce(e){if(we)we(e)}function Re(){n.stop()}function Le(){n.start()}const n=new WebGLAnimation;n.setAnimationLoop(Ce);if(typeof self!=="undefined")n.setContext(self);this.setAnimationLoop=function(e){we=e;h.setAnimationLoop(e);e===null?n.stop():n.start()};h.addEventListener("sessionstart",Re);h.addEventListener("sessionend",Le);this.render=function(n,e){if(e!==undefined&&e.isCamera!==true){console.error("THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.");return}if(L===true)return;if(n.matrixWorldAutoUpdate===true)n.updateMatrixWorld();if(e.parent===null&&e.matrixWorldAutoUpdate===true)e.updateMatrixWorld();if(h.enabled===true&&h.isPresenting===true){if(h.cameraAutoUpdate===true)h.updateCamera(e);e=h.getCamera()}if(n.isScene===true)n.onBeforeRender(U,n,e,D);I=pe.get(n,c.length);I.init(e);c.push(I);ae.multiplyMatrices(e.projectionMatrix,e.matrixWorldInverse);re.setFromProjectionMatrix(ae);se=this.localClippingEnabled;V=q.init(this.clippingPlanes,se);p=fe.get(n,l.length);p.init();l.push(p);Pe(n,e,0,U.sortObjects);p.finish();if(U.sortObjects===true){p.sort(ee,te)}const t=h.enabled===false||h.isPresenting===false||h.hasDepthSensing()===false;if(t){_.addToRenderList(p,n)}this.info.render.frame++;if(V===true)q.beginShadows();const i=I.state.shadowsArray;u.render(i,n,e);if(V===true)q.endShadows();if(this.info.autoReset===true)this.info.reset();const r=p.opaque;const s=p.transmissive;I.setupLights(U._useLegacyLights);if(e.isArrayCamera){const a=e.cameras;if(s.length>0){for(let e=0,t=a.length;e<t;e++){const o=a[e];Ue(r,s,n,o)}}if(t)_.render(n);for(let e=0,t=a.length;e<t;e++){const o=a[e];Ie(p,n,o,o.viewport)}}else{if(s.length>0)Ue(r,s,n,e);if(t)_.render(n);Ie(p,n,e)}if(D!==null){$.updateMultisampleRenderTarget(D);$.updateRenderTargetMipmap(D)}if(n.isScene===true)n.onAfterRender(U,n,e);M.resetDefaultState();N=-1;B=null;c.pop();if(c.length>0){I=c[c.length-1];if(V===true)q.setGlobalState(U.clippingPlanes,I.state.camera)}else{I=null}l.pop();if(l.length>0){p=l[l.length-1]}else{p=null}};function Pe(n,i,r,s){if(n.visible===false)return;const e=n.layers.test(i.layers);if(e){if(n.isGroup){r=n.renderOrder}else if(n.isLOD){if(n.autoUpdate===true)n.update(i)}else if(n.isLight){I.pushLight(n);if(n.castShadow){I.pushShadow(n)}}else if(n.isSprite){if(!n.frustumCulled||re.intersectsSprite(n)){if(s){G.setFromMatrixPosition(n.matrixWorld).applyMatrix4(ae)}const o=t.update(n);const l=n.material;if(l.visible){p.push(n,o,l,r,G.z,null)}}}else if(n.isMesh||n.isLine||n.isPoints){if(!n.frustumCulled||re.intersectsObject(n)){const o=t.update(n);const l=n.material;if(s){if(n.boundingSphere!==undefined){if(n.boundingSphere===null)n.computeBoundingSphere();G.copy(n.boundingSphere.center)}else{if(o.boundingSphere===null)o.computeBoundingSphere();G.copy(o.boundingSphere.center)}G.applyMatrix4(n.matrixWorld).applyMatrix4(ae)}if(Array.isArray(l)){const c=o.groups;for(let e=0,t=c.length;e<t;e++){const u=c[e];const h=l[u.materialIndex];if(h&&h.visible){p.push(n,o,h,r,G.z,u)}}}else if(l.visible){p.push(n,o,l,r,G.z,null)}}}}const a=n.children;for(let e=0,t=a.length;e<t;e++){Pe(a[e],i,r,s)}}function Ie(e,t,n,i){const r=e.opaque;const s=e.transmissive;const a=e.transparent;I.setupLightsView(n);if(V===true)q.setGlobalState(U.clippingPlanes,n);if(i)H.viewport(v.copy(i));if(r.length>0)De(r,t,n);if(s.length>0)De(s,t,n);if(a.length>0)De(a,t,n);H.buffers.depth.setTest(true);H.buffers.depth.setMask(true);H.buffers.color.setMask(true);H.setPolygonOffset(false)}function Ue(e,n,i,r){const t=i.isScene===true?i.overrideMaterial:null;if(t!==null){return}if(I.state.transmissionRenderTarget[r.id]===undefined){I.state.transmissionRenderTarget[r.id]=new WebGLRenderTarget(1,1,{generateMipmaps:true,type:y.has("EXT_color_buffer_half_float")||y.has("EXT_color_buffer_float")?HalfFloatType:UnsignedByteType,minFilter:LinearMipmapLinearFilter,samples:4,stencilBuffer:S,resolveStencilBuffer:false});const h=W.get(I.state.transmissionRenderTarget[r.id]);h.__ignoreDepthValues=true}const s=I.state.transmissionRenderTarget[r.id];const a=r.viewport||v;s.setSize(a.z,a.w);const o=U.getRenderTarget();U.setRenderTarget(s);U.getClearColor(K);Q=U.getClearAlpha();if(Q<1)U.setClearColor(16777215,.5);U.clear();const l=U.toneMapping;U.toneMapping=NoToneMapping;const c=r.viewport;if(r.viewport!==undefined)r.viewport=undefined;I.setupLightsView(r);if(V===true)q.setGlobalState(U.clippingPlanes,r);De(e,i,r);$.updateMultisampleRenderTarget(s);$.updateRenderTargetMipmap(s);let u=false;for(let e=0,t=n.length;e<t;e++){const d=n[e];const f=d.object;const p=d.geometry;const m=d.material;const g=d.group;if(m.side===DoubleSide&&f.layers.test(r.layers)){const _=m.side;m.side=BackSide;m.needsUpdate=true;Ne(f,i,r,p,m,g);m.side=_;m.needsUpdate=true;u=true}}if(u===true){$.updateMultisampleRenderTarget(s);$.updateRenderTargetMipmap(s)}U.setRenderTarget(o);U.setClearColor(K,Q);if(c!==undefined)r.viewport=c;U.toneMapping=l}function De(n,i,r){const s=i.isScene===true?i.overrideMaterial:null;for(let e=0,t=n.length;e<t;e++){const a=n[e];const o=a.object;const l=a.geometry;const c=s===null?a.material:s;const u=a.group;if(o.layers.test(r.layers)){Ne(o,i,r,l,c,u)}}}function Ne(e,t,n,i,r,s){e.onBeforeRender(U,t,n,i,r,s);e.modelViewMatrix.multiplyMatrices(n.matrixWorldInverse,e.matrixWorld);e.normalMatrix.getNormalMatrix(e.modelViewMatrix);r.onBeforeRender(U,t,n,i,e,s);if(r.transparent===true&&r.side===DoubleSide&&r.forceSinglePass===false){r.side=BackSide;r.needsUpdate=true;U.renderBufferDirect(n,t,i,r,e,s);r.side=FrontSide;r.needsUpdate=true;U.renderBufferDirect(n,t,i,r,e,s);r.side=DoubleSide}else{U.renderBufferDirect(n,t,i,r,e,s)}e.onAfterRender(U,t,n,i,r,s)}function Be(e,t,n){if(t.isScene!==true)t=oe;const i=W.get(e);const r=I.state.lights;const s=I.state.shadowsArray;const a=r.state.version;const o=g.getParameters(e,r.state,s,t,n);const l=g.getProgramCacheKey(o);let c=i.programs;i.environment=e.isMeshStandardMaterial?t.environment:null;i.fog=t.fog;i.envMap=(e.isMeshStandardMaterial?j:X).get(e.envMap||i.environment);i.envMapRotation=i.environment!==null&&e.envMap===null?t.environmentRotation:e.envMapRotation;if(c===undefined){e.addEventListener("dispose",be);c=new Map;i.programs=c}let u=c.get(l);if(u!==undefined){if(i.currentProgram===u&&i.lightsStateVersion===a){Oe(e,o);return u}}else{o.uniforms=g.getUniforms(e);e.onBuild(n,o,U);e.onBeforeCompile(o,U);u=g.acquireProgram(o,l);c.set(l,u);i.uniforms=o.uniforms}const h=i.uniforms;if(!e.isShaderMaterial&&!e.isRawShaderMaterial||e.clipping===true){h.clippingPlanes=q.uniform}Oe(e,o);i.needsLights=ze(e);i.lightsStateVersion=a;if(i.needsLights){h.ambientLightColor.value=r.state.ambient;h.lightProbe.value=r.state.probe;h.directionalLights.value=r.state.directional;h.directionalLightShadows.value=r.state.directionalShadow;h.spotLights.value=r.state.spot;h.spotLightShadows.value=r.state.spotShadow;h.rectAreaLights.value=r.state.rectArea;h.ltc_1.value=r.state.rectAreaLTC1;h.ltc_2.value=r.state.rectAreaLTC2;h.pointLights.value=r.state.point;h.pointLightShadows.value=r.state.pointShadow;h.hemisphereLights.value=r.state.hemi;h.directionalShadowMap.value=r.state.directionalShadowMap;h.directionalShadowMatrix.value=r.state.directionalShadowMatrix;h.spotShadowMap.value=r.state.spotShadowMap;h.spotLightMatrix.value=r.state.spotLightMatrix;h.spotLightMap.value=r.state.spotLightMap;h.pointShadowMap.value=r.state.pointShadowMap;h.pointShadowMatrix.value=r.state.pointShadowMatrix}i.currentProgram=u;i.uniformsList=null;return u}function Fe(e){if(e.uniformsList===null){const t=e.currentProgram.getUniforms();e.uniformsList=WebGLUniforms.seqWithValue(t.seq,e.uniforms)}return e.uniformsList}function Oe(e,t){const n=W.get(e);n.outputColorSpace=t.outputColorSpace;n.batching=t.batching;n.instancing=t.instancing;n.instancingColor=t.instancingColor;n.instancingMorph=t.instancingMorph;n.skinning=t.skinning;n.morphTargets=t.morphTargets;n.morphNormals=t.morphNormals;n.morphColors=t.morphColors;n.morphTargetsCount=t.morphTargetsCount;n.numClippingPlanes=t.numClippingPlanes;n.numIntersection=t.numClipIntersection;n.vertexAlphas=t.vertexAlphas;n.vertexTangents=t.vertexTangents;n.toneMapping=t.toneMapping}function Ve(e,t,n,i,r){if(t.isScene!==true)t=oe;$.resetTextureUnits();const s=t.fog;const a=i.isMeshStandardMaterial?t.environment:null;const o=D===null?U.outputColorSpace:D.isXRRenderTarget===true?D.texture.colorSpace:LinearSRGBColorSpace;const l=(i.isMeshStandardMaterial?j:X).get(i.envMap||a);const c=i.vertexColors===true&&!!n.attributes.color&&n.attributes.color.itemSize===4;const u=!!n.attributes.tangent&&(!!i.normalMap||i.anisotropy>0);const h=!!n.morphAttributes.position;const d=!!n.morphAttributes.normal;const f=!!n.morphAttributes.color;let p=NoToneMapping;if(i.toneMapped){if(D===null||D.isXRRenderTarget===true){p=U.toneMapping}}const m=n.morphAttributes.position||n.morphAttributes.normal||n.morphAttributes.color;const g=m!==undefined?m.length:0;const _=W.get(i);const v=I.state.lights;if(V===true){if(se===true||e!==B){const w=e===B&&i.id===N;q.setState(i,e,w)}}let y=false;if(i.version===_.__version){if(_.needsLights&&_.lightsStateVersion!==v.state.version){y=true}else if(_.outputColorSpace!==o){y=true}else if(r.isBatchedMesh&&_.batching===false){y=true}else if(!r.isBatchedMesh&&_.batching===true){y=true}else if(r.isInstancedMesh&&_.instancing===false){y=true}else if(!r.isInstancedMesh&&_.instancing===true){y=true}else if(r.isSkinnedMesh&&_.skinning===false){y=true}else if(!r.isSkinnedMesh&&_.skinning===true){y=true}else if(r.isInstancedMesh&&_.instancingColor===true&&r.instanceColor===null){y=true}else if(r.isInstancedMesh&&_.instancingColor===false&&r.instanceColor!==null){y=true}else if(r.isInstancedMesh&&_.instancingMorph===true&&r.morphTexture===null){y=true}else if(r.isInstancedMesh&&_.instancingMorph===false&&r.morphTexture!==null){y=true}else if(_.envMap!==l){y=true}else if(i.fog===true&&_.fog!==s){y=true}else if(_.numClippingPlanes!==undefined&&(_.numClippingPlanes!==q.numPlanes||_.numIntersection!==q.numIntersection)){y=true}else if(_.vertexAlphas!==c){y=true}else if(_.vertexTangents!==u){y=true}else if(_.morphTargets!==h){y=true}else if(_.morphNormals!==d){y=true}else if(_.morphColors!==f){y=true}else if(_.toneMapping!==p){y=true}else if(_.morphTargetsCount!==g){y=true}}else{y=true;_.__version=i.version}let x=_.currentProgram;if(y===true){x=Be(i,t,r)}let M=false;let S=false;let b=false;const T=x.getUniforms(),A=_.uniforms;if(H.useProgram(x.program)){M=true;S=true;b=true}if(i.id!==N){N=i.id;S=true}if(M||B!==e){T.setValue(z,"projectionMatrix",e.projectionMatrix);T.setValue(z,"viewMatrix",e.matrixWorldInverse);const C=T.map.cameraPosition;if(C!==undefined){C.setValue(z,G.setFromMatrixPosition(e.matrixWorld))}if(k.logarithmicDepthBuffer){T.setValue(z,"logDepthBufFC",2/(Math.log(e.far+1)/Math.LN2))}if(i.isMeshPhongMaterial||i.isMeshToonMaterial||i.isMeshLambertMaterial||i.isMeshBasicMaterial||i.isMeshStandardMaterial||i.isShaderMaterial){T.setValue(z,"isOrthographic",e.isOrthographicCamera===true)}if(B!==e){B=e;S=true;b=true}}if(r.isSkinnedMesh){T.setOptional(z,r,"bindMatrix");T.setOptional(z,r,"bindMatrixInverse");const R=r.skeleton;if(R){if(R.boneTexture===null)R.computeBoneTexture();T.setValue(z,"boneTexture",R.boneTexture,$)}}if(r.isBatchedMesh){T.setOptional(z,r,"batchingTexture");T.setValue(z,"batchingTexture",r._matricesTexture,$)}const E=n.morphAttributes;if(E.position!==undefined||E.normal!==undefined||E.color!==undefined){me.update(r,n,x)}if(S||_.receiveShadow!==r.receiveShadow){_.receiveShadow=r.receiveShadow;T.setValue(z,"receiveShadow",r.receiveShadow)}if(i.isMeshGouraudMaterial&&i.envMap!==null){A.envMap.value=l;A.flipEnvMap.value=l.isCubeTexture&&l.isRenderTargetTexture===false?-1:1}if(i.isMeshStandardMaterial&&i.envMap===null&&t.environment!==null){A.envMapIntensity.value=t.environmentIntensity}if(S){T.setValue(z,"toneMappingExposure",U.toneMappingExposure);if(_.needsLights){Ge(A,b)}if(s&&i.fog===true){de.refreshFogUniforms(A,s)}de.refreshMaterialUniforms(A,i,O,F,I.state.transmissionRenderTarget[e.id]);WebGLUniforms.upload(z,Fe(_),A,$)}if(i.isShaderMaterial&&i.uniformsNeedUpdate===true){WebGLUniforms.upload(z,Fe(_),A,$);i.uniformsNeedUpdate=false}if(i.isSpriteMaterial){T.setValue(z,"center",r.center)}T.setValue(z,"modelViewMatrix",r.modelViewMatrix);T.setValue(z,"normalMatrix",r.normalMatrix);T.setValue(z,"modelMatrix",r.matrixWorld);if(i.isShaderMaterial||i.isRawShaderMaterial){const L=i.uniformsGroups;for(let e=0,t=L.length;e<t;e++){const P=L[e];ve.update(P,x);ve.bind(P,x)}}return x}function Ge(e,t){e.ambientLightColor.needsUpdate=t;e.lightProbe.needsUpdate=t;e.directionalLights.needsUpdate=t;e.directionalLightShadows.needsUpdate=t;e.pointLights.needsUpdate=t;e.pointLightShadows.needsUpdate=t;e.spotLights.needsUpdate=t;e.spotLightShadows.needsUpdate=t;e.rectAreaLights.needsUpdate=t;e.hemisphereLights.needsUpdate=t}function ze(e){return e.isMeshLambertMaterial||e.isMeshToonMaterial||e.isMeshPhongMaterial||e.isMeshStandardMaterial||e.isShadowMaterial||e.isShaderMaterial&&e.lights===true}this.getActiveCubeFace=function(){return P};this.getActiveMipmapLevel=function(){return Y};this.getRenderTarget=function(){return D};this.setRenderTargetTextures=function(e,t,n){W.get(e.texture).__webglTexture=t;W.get(e.depthTexture).__webglTexture=n;const i=W.get(e);i.__hasExternalTextures=true;i.__autoAllocateDepthBuffer=n===undefined;if(!i.__autoAllocateDepthBuffer){if(y.has("WEBGL_multisampled_render_to_texture")===true){console.warn("THREE.WebGLRenderer: Render-to-texture extension was disabled because an external texture was provided");i.__useRenderToTexture=false}}};this.setRenderTargetFramebuffer=function(e,t){const n=W.get(e);n.__webglFramebuffer=t;n.__useDefaultFramebuffer=t===undefined};this.setRenderTarget=function(e,t=0,n=0){D=e;P=t;Y=n;let i=true;let r=null;let s=false;let a=false;if(e){const l=W.get(e);if(l.__useDefaultFramebuffer!==undefined){H.bindFramebuffer(z.FRAMEBUFFER,null);i=false}else if(l.__webglFramebuffer===undefined){$.setupRenderTarget(e)}else if(l.__hasExternalTextures){$.rebindTextures(e,W.get(e.texture).__webglTexture,W.get(e.depthTexture).__webglTexture)}const c=e.texture;if(c.isData3DTexture||c.isDataArrayTexture||c.isCompressedArrayTexture){a=true}const u=W.get(e).__webglFramebuffer;if(e.isWebGLCubeRenderTarget){if(Array.isArray(u[t])){r=u[t][n]}else{r=u[t]}s=true}else if(e.samples>0&&$.useMultisampledRTT(e)===false){r=W.get(e).__webglMultisampledFramebuffer}else{if(Array.isArray(u)){r=u[n]}else{r=u}}v.copy(e.viewport);Z.copy(e.scissor);J=e.scissorTest}else{v.copy(m).multiplyScalar(O).floor();Z.copy(ne).multiplyScalar(O).floor();J=ie}const o=H.bindFramebuffer(z.FRAMEBUFFER,r);if(o&&i){H.drawBuffers(e,r)}H.viewport(v);H.scissor(Z);H.setScissorTest(J);if(s){const h=W.get(e.texture);z.framebufferTexture2D(z.FRAMEBUFFER,z.COLOR_ATTACHMENT0,z.TEXTURE_CUBE_MAP_POSITIVE_X+t,h.__webglTexture,n)}else if(a){const h=W.get(e.texture);const d=t||0;z.framebufferTextureLayer(z.FRAMEBUFFER,z.COLOR_ATTACHMENT0,h.__webglTexture,n||0,d)}N=-1};this.readRenderTargetPixels=function(e,t,n,i,r,s,a){if(!(e&&e.isWebGLRenderTarget)){console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.");return}let o=W.get(e).__webglFramebuffer;if(e.isWebGLCubeRenderTarget&&a!==undefined){o=o[a]}if(o){H.bindFramebuffer(z.FRAMEBUFFER,o);try{const l=e.texture;const c=l.format;const u=l.type;if(!k.textureFormatReadable(c)){console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.");return}if(!k.textureTypeReadable(u)){console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.");return}if(t>=0&&t<=e.width-i&&(n>=0&&n<=e.height-r)){z.readPixels(t,n,i,r,x.convert(c),x.convert(u),s)}}finally{const o=D!==null?W.get(D).__webglFramebuffer:null;H.bindFramebuffer(z.FRAMEBUFFER,o)}}};this.copyFramebufferToTexture=function(e,t,n=0){const i=Math.pow(2,-n);const r=Math.floor(t.image.width*i);const s=Math.floor(t.image.height*i);$.setTexture2D(t,0);z.copyTexSubImage2D(z.TEXTURE_2D,n,0,0,e.x,e.y,r,s);H.unbindTexture()};this.copyTextureToTexture=function(e,t,n,i=0){const r=t.image.width;const s=t.image.height;const a=x.convert(n.format);const o=x.convert(n.type);$.setTexture2D(n,0);z.pixelStorei(z.UNPACK_FLIP_Y_WEBGL,n.flipY);z.pixelStorei(z.UNPACK_PREMULTIPLY_ALPHA_WEBGL,n.premultiplyAlpha);z.pixelStorei(z.UNPACK_ALIGNMENT,n.unpackAlignment);if(t.isDataTexture){z.texSubImage2D(z.TEXTURE_2D,i,e.x,e.y,r,s,a,o,t.image.data)}else{if(t.isCompressedTexture){z.compressedTexSubImage2D(z.TEXTURE_2D,i,e.x,e.y,t.mipmaps[0].width,t.mipmaps[0].height,a,t.mipmaps[0].data)}else{z.texSubImage2D(z.TEXTURE_2D,i,e.x,e.y,a,o,t.image)}}if(i===0&&n.generateMipmaps)z.generateMipmap(z.TEXTURE_2D);H.unbindTexture()};this.copyTextureToTexture3D=function(e,t,n,i,r=0){const s=Math.round(e.max.x-e.min.x);const a=Math.round(e.max.y-e.min.y);const o=e.max.z-e.min.z+1;const l=x.convert(i.format);const c=x.convert(i.type);let u;if(i.isData3DTexture){$.setTexture3D(i,0);u=z.TEXTURE_3D}else if(i.isDataArrayTexture||i.isCompressedArrayTexture){$.setTexture2DArray(i,0);u=z.TEXTURE_2D_ARRAY}else{console.warn("THREE.WebGLRenderer.copyTextureToTexture3D: only supports THREE.DataTexture3D and THREE.DataTexture2DArray.");return}z.pixelStorei(z.UNPACK_FLIP_Y_WEBGL,i.flipY);z.pixelStorei(z.UNPACK_PREMULTIPLY_ALPHA_WEBGL,i.premultiplyAlpha);z.pixelStorei(z.UNPACK_ALIGNMENT,i.unpackAlignment);const h=z.getParameter(z.UNPACK_ROW_LENGTH);const d=z.getParameter(z.UNPACK_IMAGE_HEIGHT);const f=z.getParameter(z.UNPACK_SKIP_PIXELS);const p=z.getParameter(z.UNPACK_SKIP_ROWS);const m=z.getParameter(z.UNPACK_SKIP_IMAGES);const g=n.isCompressedTexture?n.mipmaps[r]:n.image;z.pixelStorei(z.UNPACK_ROW_LENGTH,g.width);z.pixelStorei(z.UNPACK_IMAGE_HEIGHT,g.height);z.pixelStorei(z.UNPACK_SKIP_PIXELS,e.min.x);z.pixelStorei(z.UNPACK_SKIP_ROWS,e.min.y);z.pixelStorei(z.UNPACK_SKIP_IMAGES,e.min.z);if(n.isDataTexture||n.isData3DTexture){z.texSubImage3D(u,r,t.x,t.y,t.z,s,a,o,l,c,g.data)}else{if(i.isCompressedArrayTexture){z.compressedTexSubImage3D(u,r,t.x,t.y,t.z,s,a,o,l,g.data)}else{z.texSubImage3D(u,r,t.x,t.y,t.z,s,a,o,l,c,g)}}z.pixelStorei(z.UNPACK_ROW_LENGTH,h);z.pixelStorei(z.UNPACK_IMAGE_HEIGHT,d);z.pixelStorei(z.UNPACK_SKIP_PIXELS,f);z.pixelStorei(z.UNPACK_SKIP_ROWS,p);z.pixelStorei(z.UNPACK_SKIP_IMAGES,m);if(r===0&&i.generateMipmaps)z.generateMipmap(u);H.unbindTexture()};this.initTexture=function(e){if(e.isCubeTexture){$.setTextureCube(e,0)}else if(e.isData3DTexture){$.setTexture3D(e,0)}else if(e.isDataArrayTexture||e.isCompressedArrayTexture){$.setTexture2DArray(e,0)}else{$.setTexture2D(e,0)}H.unbindTexture()};this.resetState=function(){P=0;Y=0;D=null;H.reset();M.reset()};if(typeof __THREE_DEVTOOLS__!=="undefined"){__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe",{detail:this}))}}get coordinateSystem(){return WebGLCoordinateSystem}get outputColorSpace(){return this._outputColorSpace}set outputColorSpace(e){this._outputColorSpace=e;const t=this.getContext();t.drawingBufferColorSpace=e===DisplayP3ColorSpace?"display-p3":"srgb";t.unpackColorSpace=ColorManagement.workingColorSpace===LinearDisplayP3ColorSpace?"display-p3":"srgb"}get useLegacyLights(){console.warn("THREE.WebGLRenderer: The property .useLegacyLights has been deprecated. Migrate your lighting according to the following guide: https://discourse.threejs.org/t/updates-to-lighting-in-three-js-r155/53733.");return this._useLegacyLights}set useLegacyLights(e){console.warn("THREE.WebGLRenderer: The property .useLegacyLights has been deprecated. Migrate your lighting according to the following guide: https://discourse.threejs.org/t/updates-to-lighting-in-three-js-r155/53733.");this._useLegacyLights=e}}class FogExp2{constructor(e,t=25e-5){this.isFogExp2=true;this.name="";this.color=new Color(e);this.density=t}clone(){return new FogExp2(this.color,this.density)}toJSON(){return{type:"FogExp2",name:this.name,color:this.color.getHex(),density:this.density}}}class Fog{constructor(e,t=1,n=1e3){this.isFog=true;this.name="";this.color=new Color(e);this.near=t;this.far=n}clone(){return new Fog(this.color,this.near,this.far)}toJSON(){return{type:"Fog",name:this.name,color:this.color.getHex(),near:this.near,far:this.far}}}class Scene extends Object3D{constructor(){super();this.isScene=true;this.type="Scene";this.background=null;this.environment=null;this.fog=null;this.backgroundBlurriness=0;this.backgroundIntensity=1;this.backgroundRotation=new Euler;this.environmentIntensity=1;this.environmentRotation=new Euler;this.overrideMaterial=null;if(typeof __THREE_DEVTOOLS__!=="undefined"){__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe",{detail:this}))}}copy(e,t){super.copy(e,t);if(e.background!==null)this.background=e.background.clone();if(e.environment!==null)this.environment=e.environment.clone();if(e.fog!==null)this.fog=e.fog.clone();this.backgroundBlurriness=e.backgroundBlurriness;this.backgroundIntensity=e.backgroundIntensity;this.backgroundRotation.copy(e.backgroundRotation);this.environmentIntensity=e.environmentIntensity;this.environmentRotation.copy(e.environmentRotation);if(e.overrideMaterial!==null)this.overrideMaterial=e.overrideMaterial.clone();this.matrixAutoUpdate=e.matrixAutoUpdate;return this}toJSON(e){const t=super.toJSON(e);if(this.fog!==null)t.object.fog=this.fog.toJSON();if(this.backgroundBlurriness>0)t.object.backgroundBlurriness=this.backgroundBlurriness;if(this.backgroundIntensity!==1)t.object.backgroundIntensity=this.backgroundIntensity;t.object.backgroundRotation=this.backgroundRotation.toArray();if(this.environmentIntensity!==1)t.object.environmentIntensity=this.environmentIntensity;t.object.environmentRotation=this.environmentRotation.toArray();return t}}class InterleavedBuffer{constructor(e,t){this.isInterleavedBuffer=true;this.array=e;this.stride=t;this.count=e!==undefined?e.length/t:0;this.usage=StaticDrawUsage;this._updateRange={offset:0,count:-1};this.updateRanges=[];this.version=0;this.uuid=generateUUID()}onUploadCallback(){}set needsUpdate(e){if(e===true)this.version++}get updateRange(){warnOnce("THREE.InterleavedBuffer: updateRange() is deprecated and will be removed in r169. Use addUpdateRange() instead.");return this._updateRange}setUsage(e){this.usage=e;return this}addUpdateRange(e,t){this.updateRanges.push({start:e,count:t})}clearUpdateRanges(){this.updateRanges.length=0}copy(e){this.array=new e.array.constructor(e.array);this.count=e.count;this.stride=e.stride;this.usage=e.usage;return this}copyAt(n,i,r){n*=this.stride;r*=i.stride;for(let e=0,t=this.stride;e<t;e++){this.array[n+e]=i.array[r+e]}return this}set(e,t=0){this.array.set(e,t);return this}clone(e){if(e.arrayBuffers===undefined){e.arrayBuffers={}}if(this.array.buffer._uuid===undefined){this.array.buffer._uuid=generateUUID()}if(e.arrayBuffers[this.array.buffer._uuid]===undefined){e.arrayBuffers[this.array.buffer._uuid]=this.array.slice(0).buffer}const t=new this.array.constructor(e.arrayBuffers[this.array.buffer._uuid]);const n=new this.constructor(t,this.stride);n.setUsage(this.usage);return n}onUpload(e){this.onUploadCallback=e;return this}toJSON(e){if(e.arrayBuffers===undefined){e.arrayBuffers={}}if(this.array.buffer._uuid===undefined){this.array.buffer._uuid=generateUUID()}if(e.arrayBuffers[this.array.buffer._uuid]===undefined){e.arrayBuffers[this.array.buffer._uuid]=Array.from(new Uint32Array(this.array.buffer))}return{uuid:this.uuid,buffer:this.array.buffer._uuid,type:this.array.constructor.name,stride:this.stride}}}const _vector$6=new Vector3;class InterleavedBufferAttribute{constructor(e,t,n,i=false){this.isInterleavedBufferAttribute=true;this.name="";this.data=e;this.itemSize=t;this.offset=n;this.normalized=i}get count(){return this.data.count}get array(){return this.data.array}set needsUpdate(e){this.data.needsUpdate=e}applyMatrix4(n){for(let e=0,t=this.data.count;e<t;e++){_vector$6.fromBufferAttribute(this,e);_vector$6.applyMatrix4(n);this.setXYZ(e,_vector$6.x,_vector$6.y,_vector$6.z)}return this}applyNormalMatrix(n){for(let e=0,t=this.count;e<t;e++){_vector$6.fromBufferAttribute(this,e);_vector$6.applyNormalMatrix(n);this.setXYZ(e,_vector$6.x,_vector$6.y,_vector$6.z)}return this}transformDirection(n){for(let e=0,t=this.count;e<t;e++){_vector$6.fromBufferAttribute(this,e);_vector$6.transformDirection(n);this.setXYZ(e,_vector$6.x,_vector$6.y,_vector$6.z)}return this}getComponent(e,t){let n=this.array[e*this.data.stride+this.offset+t];if(this.normalized)n=denormalize(n,this.array);return n}setComponent(e,t,n){if(this.normalized)n=normalize(n,this.array);this.data.array[e*this.data.stride+this.offset+t]=n;return this}setX(e,t){if(this.normalized)t=normalize(t,this.array);this.data.array[e*this.data.stride+this.offset]=t;return this}setY(e,t){if(this.normalized)t=normalize(t,this.array);this.data.array[e*this.data.stride+this.offset+1]=t;return this}setZ(e,t){if(this.normalized)t=normalize(t,this.array);this.data.array[e*this.data.stride+this.offset+2]=t;return this}setW(e,t){if(this.normalized)t=normalize(t,this.array);this.data.array[e*this.data.stride+this.offset+3]=t;return this}getX(e){let t=this.data.array[e*this.data.stride+this.offset];if(this.normalized)t=denormalize(t,this.array);return t}getY(e){let t=this.data.array[e*this.data.stride+this.offset+1];if(this.normalized)t=denormalize(t,this.array);return t}getZ(e){let t=this.data.array[e*this.data.stride+this.offset+2];if(this.normalized)t=denormalize(t,this.array);return t}getW(e){let t=this.data.array[e*this.data.stride+this.offset+3];if(this.normalized)t=denormalize(t,this.array);return t}setXY(e,t,n){e=e*this.data.stride+this.offset;if(this.normalized){t=normalize(t,this.array);n=normalize(n,this.array)}this.data.array[e+0]=t;this.data.array[e+1]=n;return this}setXYZ(e,t,n,i){e=e*this.data.stride+this.offset;if(this.normalized){t=normalize(t,this.array);n=normalize(n,this.array);i=normalize(i,this.array)}this.data.array[e+0]=t;this.data.array[e+1]=n;this.data.array[e+2]=i;return this}setXYZW(e,t,n,i,r){e=e*this.data.stride+this.offset;if(this.normalized){t=normalize(t,this.array);n=normalize(n,this.array);i=normalize(i,this.array);r=normalize(r,this.array)}this.data.array[e+0]=t;this.data.array[e+1]=n;this.data.array[e+2]=i;this.data.array[e+3]=r;return this}clone(e){if(e===undefined){console.log("THREE.InterleavedBufferAttribute.clone(): Cloning an interleaved buffer attribute will de-interleave buffer data.");const t=[];for(let e=0;e<this.count;e++){const n=e*this.data.stride+this.offset;for(let e=0;e<this.itemSize;e++){t.push(this.data.array[n+e])}}return new BufferAttribute(new this.array.constructor(t),this.itemSize,this.normalized)}else{if(e.interleavedBuffers===undefined){e.interleavedBuffers={}}if(e.interleavedBuffers[this.data.uuid]===undefined){e.interleavedBuffers[this.data.uuid]=this.data.clone(e)}return new InterleavedBufferAttribute(e.interleavedBuffers[this.data.uuid],this.itemSize,this.offset,this.normalized)}}toJSON(e){if(e===undefined){console.log("THREE.InterleavedBufferAttribute.toJSON(): Serializing an interleaved buffer attribute will de-interleave buffer data.");const t=[];for(let e=0;e<this.count;e++){const n=e*this.data.stride+this.offset;for(let e=0;e<this.itemSize;e++){t.push(this.data.array[n+e])}}return{itemSize:this.itemSize,type:this.array.constructor.name,array:t,normalized:this.normalized}}else{if(e.interleavedBuffers===undefined){e.interleavedBuffers={}}if(e.interleavedBuffers[this.data.uuid]===undefined){e.interleavedBuffers[this.data.uuid]=this.data.toJSON(e)}return{isInterleavedBufferAttribute:true,itemSize:this.itemSize,data:this.data.uuid,offset:this.offset,normalized:this.normalized}}}}class SpriteMaterial extends Material{constructor(e){super();this.isSpriteMaterial=true;this.type="SpriteMaterial";this.color=new Color(16777215);this.map=null;this.alphaMap=null;this.rotation=0;this.sizeAttenuation=true;this.transparent=true;this.fog=true;this.setValues(e)}copy(e){super.copy(e);this.color.copy(e.color);this.map=e.map;this.alphaMap=e.alphaMap;this.rotation=e.rotation;this.sizeAttenuation=e.sizeAttenuation;this.fog=e.fog;return this}}let _geometry;const _intersectPoint=new Vector3;const _worldScale=new Vector3;const _mvPosition=new Vector3;const _alignedPosition=new Vector2;const _rotatedPosition=new Vector2;const _viewWorldMatrix=new Matrix4;const _vA=new Vector3;const _vB=new Vector3;const _vC=new Vector3;const _uvA=new Vector2;const _uvB=new Vector2;const _uvC=new Vector2;class Sprite extends Object3D{constructor(e=new SpriteMaterial){super();this.isSprite=true;this.type="Sprite";if(_geometry===undefined){_geometry=new BufferGeometry;const t=new Float32Array([-.5,-.5,0,0,0,.5,-.5,0,1,0,.5,.5,0,1,1,-.5,.5,0,0,1]);const n=new InterleavedBuffer(t,5);_geometry.setIndex([0,1,2,0,2,3]);_geometry.setAttribute("position",new InterleavedBufferAttribute(n,3,0,false));_geometry.setAttribute("uv",new InterleavedBufferAttribute(n,2,3,false))}this.geometry=_geometry;this.material=e;this.center=new Vector2(.5,.5)}raycast(e,t){if(e.camera===null){console.error('THREE.Sprite: "Raycaster.camera" needs to be set in order to raycast against sprites.')}_worldScale.setFromMatrixScale(this.matrixWorld);_viewWorldMatrix.copy(e.camera.matrixWorld);this.modelViewMatrix.multiplyMatrices(e.camera.matrixWorldInverse,this.matrixWorld);_mvPosition.setFromMatrixPosition(this.modelViewMatrix);if(e.camera.isPerspectiveCamera&&this.material.sizeAttenuation===false){_worldScale.multiplyScalar(-_mvPosition.z)}const n=this.material.rotation;let i,r;if(n!==0){r=Math.cos(n);i=Math.sin(n)}const s=this.center;transformVertex(_vA.set(-.5,-.5,0),_mvPosition,s,_worldScale,i,r);transformVertex(_vB.set(.5,-.5,0),_mvPosition,s,_worldScale,i,r);transformVertex(_vC.set(.5,.5,0),_mvPosition,s,_worldScale,i,r);_uvA.set(0,0);_uvB.set(1,0);_uvC.set(1,1);let a=e.ray.intersectTriangle(_vA,_vB,_vC,false,_intersectPoint);if(a===null){transformVertex(_vB.set(-.5,.5,0),_mvPosition,s,_worldScale,i,r);_uvB.set(0,1);a=e.ray.intersectTriangle(_vA,_vC,_vB,false,_intersectPoint);if(a===null){return}}const o=e.ray.origin.distanceTo(_intersectPoint);if(o<e.near||o>e.far)return;t.push({distance:o,point:_intersectPoint.clone(),uv:Triangle.getInterpolation(_intersectPoint,_vA,_vB,_vC,_uvA,_uvB,_uvC,new Vector2),face:null,object:this})}copy(e,t){super.copy(e,t);if(e.center!==undefined)this.center.copy(e.center);this.material=e.material;return this}}function transformVertex(e,t,n,i,r,s){_alignedPosition.subVectors(e,n).addScalar(.5).multiply(i);if(r!==undefined){_rotatedPosition.x=s*_alignedPosition.x-r*_alignedPosition.y;_rotatedPosition.y=r*_alignedPosition.x+s*_alignedPosition.y}else{_rotatedPosition.copy(_alignedPosition)}e.copy(t);e.x+=_rotatedPosition.x;e.y+=_rotatedPosition.y;e.applyMatrix4(_viewWorldMatrix)}const _v1$2=new Vector3;const _v2$1=new Vector3;class LOD extends Object3D{constructor(){super();this._currentLevel=0;this.type="LOD";Object.defineProperties(this,{levels:{enumerable:true,value:[]},isLOD:{value:true}});this.autoUpdate=true}copy(e){super.copy(e,false);const n=e.levels;for(let e=0,t=n.length;e<t;e++){const i=n[e];this.addLevel(i.object.clone(),i.distance,i.hysteresis)}this.autoUpdate=e.autoUpdate;return this}addLevel(e,t=0,n=0){t=Math.abs(t);const i=this.levels;let r;for(r=0;r<i.length;r++){if(t<i[r].distance){break}}i.splice(r,0,{distance:t,hysteresis:n,object:e});this.add(e);return this}getCurrentLevel(){return this._currentLevel}getObjectForDistance(n){const i=this.levels;if(i.length>0){let t,e;for(t=1,e=i.length;t<e;t++){let e=i[t].distance;if(i[t].object.visible){e-=e*i[t].hysteresis}if(n<e){break}}return i[t-1].object}return null}raycast(e,t){const n=this.levels;if(n.length>0){_v1$2.setFromMatrixPosition(this.matrixWorld);const i=e.ray.origin.distanceTo(_v1$2);this.getObjectForDistance(i).raycast(e,t)}}update(n){const i=this.levels;if(i.length>1){_v1$2.setFromMatrixPosition(n.matrixWorld);_v2$1.setFromMatrixPosition(this.matrixWorld);const r=_v1$2.distanceTo(_v2$1)/n.zoom;i[0].object.visible=true;let t,e;for(t=1,e=i.length;t<e;t++){let e=i[t].distance;if(i[t].object.visible){e-=e*i[t].hysteresis}if(r>=e){i[t-1].object.visible=false;i[t].object.visible=true}else{break}}this._currentLevel=t-1;for(;t<e;t++){i[t].object.visible=false}}}toJSON(e){const n=super.toJSON(e);if(this.autoUpdate===false)n.object.autoUpdate=false;n.object.levels=[];const i=this.levels;for(let e=0,t=i.length;e<t;e++){const r=i[e];n.object.levels.push({object:r.object.uuid,distance:r.distance,hysteresis:r.hysteresis})}return n}}const _basePosition=new Vector3;const _skinIndex=new Vector4;const _skinWeight=new Vector4;const _vector3=new Vector3;const _matrix4=new Matrix4;const _vertex=new Vector3;const _sphere$4=new Sphere;const _inverseMatrix$2=new Matrix4;const _ray$2=new Ray;class SkinnedMesh extends Mesh{constructor(e,t){super(e,t);this.isSkinnedMesh=true;this.type="SkinnedMesh";this.bindMode=AttachedBindMode;this.bindMatrix=new Matrix4;this.bindMatrixInverse=new Matrix4;this.boundingBox=null;this.boundingSphere=null}computeBoundingBox(){const e=this.geometry;if(this.boundingBox===null){this.boundingBox=new Box3}this.boundingBox.makeEmpty();const t=e.getAttribute("position");for(let e=0;e<t.count;e++){this.getVertexPosition(e,_vertex);this.boundingBox.expandByPoint(_vertex)}}computeBoundingSphere(){const e=this.geometry;if(this.boundingSphere===null){this.boundingSphere=new Sphere}this.boundingSphere.makeEmpty();const t=e.getAttribute("position");for(let e=0;e<t.count;e++){this.getVertexPosition(e,_vertex);this.boundingSphere.expandByPoint(_vertex)}}copy(e,t){super.copy(e,t);this.bindMode=e.bindMode;this.bindMatrix.copy(e.bindMatrix);this.bindMatrixInverse.copy(e.bindMatrixInverse);this.skeleton=e.skeleton;if(e.boundingBox!==null)this.boundingBox=e.boundingBox.clone();if(e.boundingSphere!==null)this.boundingSphere=e.boundingSphere.clone();return this}raycast(e,t){const n=this.material;const i=this.matrixWorld;if(n===undefined)return;if(this.boundingSphere===null)this.computeBoundingSphere();_sphere$4.copy(this.boundingSphere);_sphere$4.applyMatrix4(i);if(e.ray.intersectsSphere(_sphere$4)===false)return;_inverseMatrix$2.copy(i).invert();_ray$2.copy(e.ray).applyMatrix4(_inverseMatrix$2);if(this.boundingBox!==null){if(_ray$2.intersectsBox(this.boundingBox)===false)return}this._computeIntersections(e,t,_ray$2)}getVertexPosition(e,t){super.getVertexPosition(e,t);this.applyBoneTransform(e,t);return t}bind(e,t){this.skeleton=e;if(t===undefined){this.updateMatrixWorld(true);this.skeleton.calculateInverses();t=this.matrixWorld}this.bindMatrix.copy(t);this.bindMatrixInverse.copy(t).invert()}pose(){this.skeleton.pose()}normalizeSkinWeights(){const n=new Vector4;const i=this.geometry.attributes.skinWeight;for(let e=0,t=i.count;e<t;e++){n.fromBufferAttribute(i,e);const r=1/n.manhattanLength();if(r!==Infinity){n.multiplyScalar(r)}else{n.set(1,0,0,0)}i.setXYZW(e,n.x,n.y,n.z,n.w)}}updateMatrixWorld(e){super.updateMatrixWorld(e);if(this.bindMode===AttachedBindMode){this.bindMatrixInverse.copy(this.matrixWorld).invert()}else if(this.bindMode===DetachedBindMode){this.bindMatrixInverse.copy(this.bindMatrix).invert()}else{console.warn("THREE.SkinnedMesh: Unrecognized bindMode: "+this.bindMode)}}applyBoneTransform(e,t){const n=this.skeleton;const i=this.geometry;_skinIndex.fromBufferAttribute(i.attributes.skinIndex,e);_skinWeight.fromBufferAttribute(i.attributes.skinWeight,e);_basePosition.copy(t).applyMatrix4(this.bindMatrix);t.set(0,0,0);for(let e=0;e<4;e++){const r=_skinWeight.getComponent(e);if(r!==0){const s=_skinIndex.getComponent(e);_matrix4.multiplyMatrices(n.bones[s].matrixWorld,n.boneInverses[s]);t.addScaledVector(_vector3.copy(_basePosition).applyMatrix4(_matrix4),r)}}return t.applyMatrix4(this.bindMatrixInverse)}}class Bone extends Object3D{constructor(){super();this.isBone=true;this.type="Bone"}}class DataTexture extends Texture{constructor(e=null,t=1,n=1,i,r,s,a,o,l=NearestFilter,c=NearestFilter,u,h){super(null,s,a,o,l,c,i,r,u,h);this.isDataTexture=true;this.image={data:e,width:t,height:n};this.generateMipmaps=false;this.flipY=false;this.unpackAlignment=1}}const _offsetMatrix=new Matrix4;const _identityMatrix$1=new Matrix4;class Skeleton{constructor(e=[],t=[]){this.uuid=generateUUID();this.bones=e.slice(0);this.boneInverses=t;this.boneMatrices=null;this.boneTexture=null;this.init()}init(){const e=this.bones;const t=this.boneInverses;this.boneMatrices=new Float32Array(e.length*16);if(t.length===0){this.calculateInverses()}else{if(e.length!==t.length){console.warn("THREE.Skeleton: Number of inverse bone matrices does not match amount of bones.");this.boneInverses=[];for(let e=0,t=this.bones.length;e<t;e++){this.boneInverses.push(new Matrix4)}}}}calculateInverses(){this.boneInverses.length=0;for(let e=0,t=this.bones.length;e<t;e++){const n=new Matrix4;if(this.bones[e]){n.copy(this.bones[e].matrixWorld).invert()}this.boneInverses.push(n)}}pose(){for(let e=0,t=this.bones.length;e<t;e++){const n=this.bones[e];if(n){n.matrixWorld.copy(this.boneInverses[e]).invert()}}for(let e=0,t=this.bones.length;e<t;e++){const n=this.bones[e];if(n){if(n.parent&&n.parent.isBone){n.matrix.copy(n.parent.matrixWorld).invert();n.matrix.multiply(n.matrixWorld)}else{n.matrix.copy(n.matrixWorld)}n.matrix.decompose(n.position,n.quaternion,n.scale)}}}update(){const n=this.bones;const i=this.boneInverses;const r=this.boneMatrices;const e=this.boneTexture;for(let e=0,t=n.length;e<t;e++){const s=n[e]?n[e].matrixWorld:_identityMatrix$1;_offsetMatrix.multiplyMatrices(s,i[e]);_offsetMatrix.toArray(r,e*16)}if(e!==null){e.needsUpdate=true}}clone(){return new Skeleton(this.bones,this.boneInverses)}computeBoneTexture(){let e=Math.sqrt(this.bones.length*4);e=Math.ceil(e/4)*4;e=Math.max(e,4);const t=new Float32Array(e*e*4);t.set(this.boneMatrices);const n=new DataTexture(t,e,e,RGBAFormat,FloatType);n.needsUpdate=true;this.boneMatrices=t;this.boneTexture=n;return this}getBoneByName(n){for(let e=0,t=this.bones.length;e<t;e++){const i=this.bones[e];if(i.name===n){return i}}return undefined}dispose(){if(this.boneTexture!==null){this.boneTexture.dispose();this.boneTexture=null}}fromJSON(n,i){this.uuid=n.uuid;for(let t=0,e=n.bones.length;t<e;t++){const r=n.bones[t];let e=i[r];if(e===undefined){console.warn("THREE.Skeleton: No bone found with UUID:",r);e=new Bone}this.bones.push(e);this.boneInverses.push((new Matrix4).fromArray(n.boneInverses[t]))}this.init();return this}toJSON(){const n={metadata:{version:4.6,type:"Skeleton",generator:"Skeleton.toJSON"},bones:[],boneInverses:[]};n.uuid=this.uuid;const i=this.bones;const r=this.boneInverses;for(let e=0,t=i.length;e<t;e++){const s=i[e];n.bones.push(s.uuid);const a=r[e];n.boneInverses.push(a.toArray())}return n}}class InstancedBufferAttribute extends BufferAttribute{constructor(e,t,n,i=1){super(e,t,n);this.isInstancedBufferAttribute=true;this.meshPerAttribute=i}copy(e){super.copy(e);this.meshPerAttribute=e.meshPerAttribute;return this}toJSON(){const e=super.toJSON();e.meshPerAttribute=this.meshPerAttribute;e.isInstancedBufferAttribute=true;return e}}const _instanceLocalMatrix=new Matrix4;const _instanceWorldMatrix=new Matrix4;const _instanceIntersects=[];const _box3=new Box3;const _identity=new Matrix4;const _mesh$1=new Mesh;const _sphere$3=new Sphere;class InstancedMesh extends Mesh{constructor(e,t,n){super(e,t);this.isInstancedMesh=true;this.instanceMatrix=new InstancedBufferAttribute(new Float32Array(n*16),16);this.instanceColor=null;this.morphTexture=null;this.count=n;this.boundingBox=null;this.boundingSphere=null;for(let e=0;e<n;e++){this.setMatrixAt(e,_identity)}}computeBoundingBox(){const t=this.geometry;const n=this.count;if(this.boundingBox===null){this.boundingBox=new Box3}if(t.boundingBox===null){t.computeBoundingBox()}this.boundingBox.makeEmpty();for(let e=0;e<n;e++){this.getMatrixAt(e,_instanceLocalMatrix);_box3.copy(t.boundingBox).applyMatrix4(_instanceLocalMatrix);this.boundingBox.union(_box3)}}computeBoundingSphere(){const t=this.geometry;const n=this.count;if(this.boundingSphere===null){this.boundingSphere=new Sphere}if(t.boundingSphere===null){t.computeBoundingSphere()}this.boundingSphere.makeEmpty();for(let e=0;e<n;e++){this.getMatrixAt(e,_instanceLocalMatrix);_sphere$3.copy(t.boundingSphere).applyMatrix4(_instanceLocalMatrix);this.boundingSphere.union(_sphere$3)}}copy(e,t){super.copy(e,t);this.instanceMatrix.copy(e.instanceMatrix);if(e.morphTexture!==null)this.morphTexture=e.morphTexture.clone();if(e.instanceColor!==null)this.instanceColor=e.instanceColor.clone();this.count=e.count;if(e.boundingBox!==null)this.boundingBox=e.boundingBox.clone();if(e.boundingSphere!==null)this.boundingSphere=e.boundingSphere.clone();return this}getColorAt(e,t){t.fromArray(this.instanceColor.array,e*3)}getMatrixAt(e,t){t.fromArray(this.instanceMatrix.array,e*16)}getMorphAt(e,t){const n=t.morphTargetInfluences;const i=this.morphTexture.source.data.data;const r=n.length+1;const s=e*r+1;for(let e=0;e<n.length;e++){n[e]=i[s+e]}}raycast(e,i){const t=this.matrixWorld;const r=this.count;_mesh$1.geometry=this.geometry;_mesh$1.material=this.material;if(_mesh$1.material===undefined)return;if(this.boundingSphere===null)this.computeBoundingSphere();_sphere$3.copy(this.boundingSphere);_sphere$3.applyMatrix4(t);if(e.ray.intersectsSphere(_sphere$3)===false)return;for(let n=0;n<r;n++){this.getMatrixAt(n,_instanceLocalMatrix);_instanceWorldMatrix.multiplyMatrices(t,_instanceLocalMatrix);_mesh$1.matrixWorld=_instanceWorldMatrix;_mesh$1.raycast(e,_instanceIntersects);for(let t=0,e=_instanceIntersects.length;t<e;t++){const e=_instanceIntersects[t];e.instanceId=n;e.object=this;i.push(e)}_instanceIntersects.length=0}}setColorAt(e,t){if(this.instanceColor===null){this.instanceColor=new InstancedBufferAttribute(new Float32Array(this.instanceMatrix.count*3),3)}t.toArray(this.instanceColor.array,e*3)}setMatrixAt(e,t){t.toArray(this.instanceMatrix.array,e*16)}setMorphAt(e,t){const n=t.morphTargetInfluences;const i=n.length+1;if(this.morphTexture===null){this.morphTexture=new DataTexture(new Float32Array(i*this.count),i,this.count,RedFormat,FloatType)}const r=this.morphTexture.source.data.data;let s=0;for(let e=0;e<n.length;e++){s+=n[e]}const a=this.geometry.morphTargetsRelative?1:1-s;const o=i*e;r[o]=a;r.set(n,o+1)}updateMorphTargets(){}dispose(){this.dispatchEvent({type:"dispose"});if(this.morphTexture!==null){this.morphTexture.dispose();this.morphTexture=null}return this}}function sortOpaque(e,t){return e.z-t.z}function sortTransparent(e,t){return t.z-e.z}class MultiDrawRenderList{constructor(){this.index=0;this.pool=[];this.list=[]}push(e,t){const n=this.pool;const i=this.list;if(this.index>=n.length){n.push({start:-1,count:-1,z:-1})}const r=n[this.index];i.push(r);this.index++;r.start=e.start;r.count=e.count;r.z=t}reset(){this.list.length=0;this.index=0}}const ID_ATTR_NAME="batchId";const _matrix$1=new Matrix4;const _invMatrixWorld=new Matrix4;const _identityMatrix=new Matrix4;const _projScreenMatrix$2=new Matrix4;const _frustum=new Frustum;const _box$1=new Box3;const _sphere$2=new Sphere;const _vector$5=new Vector3;const _renderList=new MultiDrawRenderList;const _mesh=new Mesh;const _batchIntersects=[];function copyAttributeData(n,i,r=0){const s=i.itemSize;if(n.isInterleavedBufferAttribute||n.array.constructor!==i.array.constructor){const e=n.count;for(let t=0;t<e;t++){for(let e=0;e<s;e++){i.setComponent(t+r,e,n.getComponent(t,e))}}}else{i.array.set(n.array,r*s)}i.needsUpdate=true}class BatchedMesh extends Mesh{get maxGeometryCount(){return this._maxGeometryCount}constructor(e,t,n=t*2,i){super(new BufferGeometry,i);this.isBatchedMesh=true;this.perObjectFrustumCulled=true;this.sortObjects=true;this.boundingBox=null;this.boundingSphere=null;this.customSort=null;this._drawRanges=[];this._reservedRanges=[];this._visibility=[];this._active=[];this._bounds=[];this._maxGeometryCount=e;this._maxVertexCount=t;this._maxIndexCount=n;this._geometryInitialized=false;this._geometryCount=0;this._multiDrawCounts=new Int32Array(e);this._multiDrawStarts=new Int32Array(e);this._multiDrawCount=0;this._multiDrawInstances=null;this._visibilityChanged=true;this._matricesTexture=null;this._initMatricesTexture()}_initMatricesTexture(){let e=Math.sqrt(this._maxGeometryCount*4);e=Math.ceil(e/4)*4;e=Math.max(e,4);const t=new Float32Array(e*e*4);const n=new DataTexture(t,e,e,RGBAFormat,FloatType);this._matricesTexture=n}_initializeGeometry(e){const t=this.geometry;const n=this._maxVertexCount;const i=this._maxGeometryCount;const r=this._maxIndexCount;if(this._geometryInitialized===false){for(const a in e.attributes){const o=e.getAttribute(a);const{array:l,itemSize:c,normalized:u}=o;const h=new l.constructor(n*c);const d=new BufferAttribute(h,c,u);t.setAttribute(a,d)}if(e.getIndex()!==null){const f=n>65536?new Uint32Array(r):new Uint16Array(r);t.setIndex(new BufferAttribute(f,1))}const s=i>65536?new Uint32Array(n):new Uint16Array(n);t.setAttribute(ID_ATTR_NAME,new BufferAttribute(s,1));this._geometryInitialized=true}}_validateGeometry(e){if(e.getAttribute(ID_ATTR_NAME)){throw new Error(`BatchedMesh: Geometry cannot use attribute "${ID_ATTR_NAME}"`)}const t=this.geometry;if(Boolean(e.getIndex())!==Boolean(t.getIndex())){throw new Error('BatchedMesh: All geometries must consistently have "index".')}for(const n in t.attributes){if(n===ID_ATTR_NAME){continue}if(!e.hasAttribute(n)){throw new Error(`BatchedMesh: Added geometry missing "${n}". All geometries must have consistent attributes.`)}const i=e.getAttribute(n);const r=t.getAttribute(n);if(i.itemSize!==r.itemSize||i.normalized!==r.normalized){throw new Error("BatchedMesh: All attributes must have a consistent itemSize and normalized value.")}}}setCustomSort(e){this.customSort=e;return this}computeBoundingBox(){if(this.boundingBox===null){this.boundingBox=new Box3}const t=this._geometryCount;const n=this.boundingBox;const i=this._active;n.makeEmpty();for(let e=0;e<t;e++){if(i[e]===false)continue;this.getMatrixAt(e,_matrix$1);this.getBoundingBoxAt(e,_box$1).applyMatrix4(_matrix$1);n.union(_box$1)}}computeBoundingSphere(){if(this.boundingSphere===null){this.boundingSphere=new Sphere}const t=this._geometryCount;const n=this.boundingSphere;const i=this._active;n.makeEmpty();for(let e=0;e<t;e++){if(i[e]===false)continue;this.getMatrixAt(e,_matrix$1);this.getBoundingSphereAt(e,_sphere$2).applyMatrix4(_matrix$1);n.union(_sphere$2)}}addGeometry(e,t=-1,n=-1){this._initializeGeometry(e);this._validateGeometry(e);if(this._geometryCount>=this._maxGeometryCount){throw new Error("BatchedMesh: Maximum geometry count reached.")}const i={vertexStart:-1,vertexCount:-1,indexStart:-1,indexCount:-1};let r=null;const s=this._reservedRanges;const a=this._drawRanges;const o=this._bounds;if(this._geometryCount!==0){r=s[s.length-1]}if(t===-1){i.vertexCount=e.getAttribute("position").count}else{i.vertexCount=t}if(r===null){i.vertexStart=0}else{i.vertexStart=r.vertexStart+r.vertexCount}const l=e.getIndex();const c=l!==null;if(c){if(n===-1){i.indexCount=l.count}else{i.indexCount=n}if(r===null){i.indexStart=0}else{i.indexStart=r.indexStart+r.indexCount}}if(i.indexStart!==-1&&i.indexStart+i.indexCount>this._maxIndexCount||i.vertexStart+i.vertexCount>this._maxVertexCount){throw new Error("BatchedMesh: Reserved space request exceeds the maximum buffer size.")}const u=this._visibility;const h=this._active;const d=this._matricesTexture;const f=this._matricesTexture.image.data;u.push(true);h.push(true);const p=this._geometryCount;this._geometryCount++;_identityMatrix.toArray(f,p*16);d.needsUpdate=true;s.push(i);a.push({start:c?i.indexStart:i.vertexStart,count:-1});o.push({boxInitialized:false,box:new Box3,sphereInitialized:false,sphere:new Sphere});const m=this.geometry.getAttribute(ID_ATTR_NAME);for(let e=0;e<i.vertexCount;e++){m.setX(i.vertexStart+e,p)}m.needsUpdate=true;this.setGeometryAt(p,e);return p}setGeometryAt(e,t){if(e>=this._geometryCount){throw new Error("BatchedMesh: Maximum geometry count reached.")}this._validateGeometry(t);const n=this.geometry;const i=n.getIndex()!==null;const r=n.getIndex();const s=t.getIndex();const a=this._reservedRanges[e];if(i&&s.count>a.indexCount||t.attributes.position.count>a.vertexCount){throw new Error("BatchedMesh: Reserved space not large enough for provided geometry.")}const o=a.vertexStart;const l=a.vertexCount;for(const d in n.attributes){if(d===ID_ATTR_NAME){continue}const f=t.getAttribute(d);const p=n.getAttribute(d);copyAttributeData(f,p,o);const m=f.itemSize;for(let e=f.count,t=l;e<t;e++){const g=o+e;for(let e=0;e<m;e++){p.setComponent(g,e,0)}}p.needsUpdate=true;p.addUpdateRange(o*m,l*m)}if(i){const _=a.indexStart;for(let e=0;e<s.count;e++){r.setX(_+e,o+s.getX(e))}for(let e=s.count,t=a.indexCount;e<t;e++){r.setX(_+e,o)}r.needsUpdate=true;r.addUpdateRange(_,a.indexCount)}const c=this._bounds[e];if(t.boundingBox!==null){c.box.copy(t.boundingBox);c.boxInitialized=true}else{c.boxInitialized=false}if(t.boundingSphere!==null){c.sphere.copy(t.boundingSphere);c.sphereInitialized=true}else{c.sphereInitialized=false}const u=this._drawRanges[e];const h=t.getAttribute("position");u.count=i?s.count:h.count;this._visibilityChanged=true;return e}deleteGeometry(e){const t=this._active;if(e>=t.length||t[e]===false){return this}t[e]=false;this._visibilityChanged=true;return this}getInstanceCountAt(e){if(this._multiDrawInstances===null)return null;return this._multiDrawInstances[e]}setInstanceCountAt(e,t){if(this._multiDrawInstances===null){this._multiDrawInstances=new Int32Array(this._maxGeometryCount).fill(1)}this._multiDrawInstances[e]=t;return e}getBoundingBoxAt(e,t){const n=this._active;if(n[e]===false){return null}const i=this._bounds[e];const r=i.box;const s=this.geometry;if(i.boxInitialized===false){r.makeEmpty();const a=s.index;const o=s.attributes.position;const l=this._drawRanges[e];for(let t=l.start,e=l.start+l.count;t<e;t++){let e=t;if(a){e=a.getX(e)}r.expandByPoint(_vector$5.fromBufferAttribute(o,e))}i.boxInitialized=true}t.copy(r);return t}getBoundingSphereAt(e,t){const n=this._active;if(n[e]===false){return null}const i=this._bounds[e];const r=i.sphere;const s=this.geometry;if(i.sphereInitialized===false){r.makeEmpty();this.getBoundingBoxAt(e,_box$1);_box$1.getCenter(r.center);const a=s.index;const o=s.attributes.position;const l=this._drawRanges[e];let n=0;for(let t=l.start,e=l.start+l.count;t<e;t++){let e=t;if(a){e=a.getX(e)}_vector$5.fromBufferAttribute(o,e);n=Math.max(n,r.center.distanceToSquared(_vector$5))}r.radius=Math.sqrt(n);i.sphereInitialized=true}t.copy(r);return t}setMatrixAt(e,t){const n=this._active;const i=this._matricesTexture;const r=this._matricesTexture.image.data;const s=this._geometryCount;if(e>=s||n[e]===false){return this}t.toArray(r,e*16);i.needsUpdate=true;return this}getMatrixAt(e,t){const n=this._active;const i=this._matricesTexture.image.data;const r=this._geometryCount;if(e>=r||n[e]===false){return null}return t.fromArray(i,e*16)}setVisibleAt(e,t){const n=this._visibility;const i=this._active;const r=this._geometryCount;if(e>=r||i[e]===false||n[e]===t){return this}n[e]=t;this._visibilityChanged=true;return this}getVisibleAt(e){const t=this._visibility;const n=this._active;const i=this._geometryCount;if(e>=i||n[e]===false){return false}return t[e]}raycast(e,i){const t=this._visibility;const r=this._active;const s=this._drawRanges;const a=this._geometryCount;const o=this.matrixWorld;const n=this.geometry;_mesh.material=this.material;_mesh.geometry.index=n.index;_mesh.geometry.attributes=n.attributes;if(_mesh.geometry.boundingBox===null){_mesh.geometry.boundingBox=new Box3}if(_mesh.geometry.boundingSphere===null){_mesh.geometry.boundingSphere=new Sphere}for(let n=0;n<a;n++){if(!t[n]||!r[n]){continue}const l=s[n];_mesh.geometry.setDrawRange(l.start,l.count);this.getMatrixAt(n,_mesh.matrixWorld).premultiply(o);this.getBoundingBoxAt(n,_mesh.geometry.boundingBox);this.getBoundingSphereAt(n,_mesh.geometry.boundingSphere);_mesh.raycast(e,_batchIntersects);for(let t=0,e=_batchIntersects.length;t<e;t++){const e=_batchIntersects[t];e.object=this;e.batchId=n;i.push(e)}_batchIntersects.length=0}_mesh.material=null;_mesh.geometry.index=null;_mesh.geometry.attributes={};_mesh.geometry.setDrawRange(0,Infinity)}copy(e){super.copy(e);this.geometry=e.geometry.clone();this.perObjectFrustumCulled=e.perObjectFrustumCulled;this.sortObjects=e.sortObjects;this.boundingBox=e.boundingBox!==null?e.boundingBox.clone():null;this.boundingSphere=e.boundingSphere!==null?e.boundingSphere.clone():null;this._drawRanges=e._drawRanges.map(e=>({...e}));this._reservedRanges=e._reservedRanges.map(e=>({...e}));this._visibility=e._visibility.slice();this._active=e._active.slice();this._bounds=e._bounds.map(e=>({boxInitialized:e.boxInitialized,box:e.box.clone(),sphereInitialized:e.sphereInitialized,sphere:e.sphere.clone()}));this._maxGeometryCount=e._maxGeometryCount;this._maxVertexCount=e._maxVertexCount;this._maxIndexCount=e._maxIndexCount;this._geometryInitialized=e._geometryInitialized;this._geometryCount=e._geometryCount;this._multiDrawCounts=e._multiDrawCounts.slice();this._multiDrawStarts=e._multiDrawStarts.slice();this._matricesTexture=e._matricesTexture.clone();this._matricesTexture.image.data=this._matricesTexture.image.slice();return this}dispose(){this.geometry.dispose();this._matricesTexture.dispose();this._matricesTexture=null;return this}onBeforeRender(e,t,n,i,r){if(!this._visibilityChanged&&!this.perObjectFrustumCulled&&!this.sortObjects){return}const s=i.getIndex();const a=s===null?1:s.array.BYTES_PER_ELEMENT;const o=this._active;const l=this._visibility;const c=this._multiDrawStarts;const u=this._multiDrawCounts;const h=this._drawRanges;const d=this.perObjectFrustumCulled;if(d){_projScreenMatrix$2.multiplyMatrices(n.projectionMatrix,n.matrixWorldInverse).multiply(this.matrixWorld);_frustum.setFromProjectionMatrix(_projScreenMatrix$2,e.coordinateSystem)}let f=0;if(this.sortObjects){_invMatrixWorld.copy(this.matrixWorld).invert();_vector$5.setFromMatrixPosition(n.matrixWorld).applyMatrix4(_invMatrixWorld);for(let t=0,e=l.length;t<e;t++){if(l[t]&&o[t]){this.getMatrixAt(t,_matrix$1);this.getBoundingSphereAt(t,_sphere$2).applyMatrix4(_matrix$1);let e=false;if(d){e=!_frustum.intersectsSphere(_sphere$2)}if(!e){const g=_vector$5.distanceTo(_sphere$2.center);_renderList.push(h[t],g)}}}const p=_renderList.list;const m=this.customSort;if(m===null){p.sort(r.transparent?sortTransparent:sortOpaque)}else{m.call(this,p,n)}for(let e=0,t=p.length;e<t;e++){const _=p[e];c[f]=_.start*a;u[f]=_.count;f++}_renderList.reset()}else{for(let t=0,e=l.length;t<e;t++){if(l[t]&&o[t]){let e=false;if(d){this.getMatrixAt(t,_matrix$1);this.getBoundingSphereAt(t,_sphere$2).applyMatrix4(_matrix$1);e=!_frustum.intersectsSphere(_sphere$2)}if(!e){const v=h[t];c[f]=v.start*a;u[f]=v.count;f++}}}}this._multiDrawCount=f;this._visibilityChanged=false}onBeforeShadow(e,t,n,i,r,s){this.onBeforeRender(e,null,i,r,s)}}class LineBasicMaterial extends Material{constructor(e){super();this.isLineBasicMaterial=true;this.type="LineBasicMaterial";this.color=new Color(16777215);this.map=null;this.linewidth=1;this.linecap="round";this.linejoin="round";this.fog=true;this.setValues(e)}copy(e){super.copy(e);this.color.copy(e.color);this.map=e.map;this.linewidth=e.linewidth;this.linecap=e.linecap;this.linejoin=e.linejoin;this.fog=e.fog;return this}}const _vStart=new Vector3;const _vEnd=new Vector3;const _inverseMatrix$1=new Matrix4;const _ray$1=new Ray;const _sphere$1=new Sphere;const _intersectPointOnRay=new Vector3;const _intersectPointOnSegment=new Vector3;class Line extends Object3D{constructor(e=new BufferGeometry,t=new LineBasicMaterial){super();this.isLine=true;this.type="Line";this.geometry=e;this.material=t;this.updateMorphTargets()}copy(e,t){super.copy(e,t);this.material=Array.isArray(e.material)?e.material.slice():e.material;this.geometry=e.geometry;return this}computeLineDistances(){const e=this.geometry;if(e.index===null){const n=e.attributes.position;const i=[0];for(let e=1,t=n.count;e<t;e++){_vStart.fromBufferAttribute(n,e-1);_vEnd.fromBufferAttribute(n,e);i[e]=i[e-1];i[e]+=_vStart.distanceTo(_vEnd)}e.setAttribute("lineDistance",new Float32BufferAttribute(i,1))}else{console.warn("THREE.Line.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.")}return this}raycast(n,i){const e=this.geometry;const t=this.matrixWorld;const r=n.params.Line.threshold;const s=e.drawRange;if(e.boundingSphere===null)e.computeBoundingSphere();_sphere$1.copy(e.boundingSphere);_sphere$1.applyMatrix4(t);_sphere$1.radius+=r;if(n.ray.intersectsSphere(_sphere$1)===false)return;_inverseMatrix$1.copy(t).invert();_ray$1.copy(n.ray).applyMatrix4(_inverseMatrix$1);const a=r/((this.scale.x+this.scale.y+this.scale.z)/3);const o=a*a;const l=this.isLineSegments?2:1;const c=e.index;const u=e.attributes;const h=u.position;if(c!==null){const d=Math.max(0,s.start);const f=Math.min(c.count,s.start+s.count);for(let t=d,e=f-1;t<e;t+=l){const p=c.getX(t);const m=c.getX(t+1);const e=checkIntersection(this,n,_ray$1,o,p,m);if(e){i.push(e)}}if(this.isLineLoop){const p=c.getX(f-1);const m=c.getX(d);const e=checkIntersection(this,n,_ray$1,o,p,m);if(e){i.push(e)}}}else{const d=Math.max(0,s.start);const f=Math.min(h.count,s.start+s.count);for(let t=d,e=f-1;t<e;t+=l){const e=checkIntersection(this,n,_ray$1,o,t,t+1);if(e){i.push(e)}}if(this.isLineLoop){const e=checkIntersection(this,n,_ray$1,o,f-1,d);if(e){i.push(e)}}}}updateMorphTargets(){const e=this.geometry;const t=e.morphAttributes;const n=Object.keys(t);if(n.length>0){const i=t[n[0]];if(i!==undefined){this.morphTargetInfluences=[];this.morphTargetDictionary={};for(let e=0,t=i.length;e<t;e++){const r=i[e].name||String(e);this.morphTargetInfluences.push(0);this.morphTargetDictionary[r]=e}}}}}function checkIntersection(e,t,n,i,r,s){const a=e.geometry.attributes.position;_vStart.fromBufferAttribute(a,r);_vEnd.fromBufferAttribute(a,s);const o=n.distanceSqToSegment(_vStart,_vEnd,_intersectPointOnRay,_intersectPointOnSegment);if(o>i)return;_intersectPointOnRay.applyMatrix4(e.matrixWorld);const l=t.ray.origin.distanceTo(_intersectPointOnRay);if(l<t.near||l>t.far)return;return{distance:l,point:_intersectPointOnSegment.clone().applyMatrix4(e.matrixWorld),index:r,face:null,faceIndex:null,object:e}}const _start=new Vector3;const _end=new Vector3;class LineSegments extends Line{constructor(e,t){super(e,t);this.isLineSegments=true;this.type="LineSegments"}computeLineDistances(){const e=this.geometry;if(e.index===null){const n=e.attributes.position;const i=[];for(let e=0,t=n.count;e<t;e+=2){_start.fromBufferAttribute(n,e);_end.fromBufferAttribute(n,e+1);i[e]=e===0?0:i[e-1];i[e+1]=i[e]+_start.distanceTo(_end)}e.setAttribute("lineDistance",new Float32BufferAttribute(i,1))}else{console.warn("THREE.LineSegments.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.")}return this}}class LineLoop extends Line{constructor(e,t){super(e,t);this.isLineLoop=true;this.type="LineLoop"}}class PointsMaterial extends Material{constructor(e){super();this.isPointsMaterial=true;this.type="PointsMaterial";this.color=new Color(16777215);this.map=null;this.alphaMap=null;this.size=1;this.sizeAttenuation=true;this.fog=true;this.setValues(e)}copy(e){super.copy(e);this.color.copy(e.color);this.map=e.map;this.alphaMap=e.alphaMap;this.size=e.size;this.sizeAttenuation=e.sizeAttenuation;this.fog=e.fog;return this}}const _inverseMatrix=new Matrix4;const _ray=new Ray;const _sphere=new Sphere;const _position$2=new Vector3;class Points extends Object3D{constructor(e=new BufferGeometry,t=new PointsMaterial){super();this.isPoints=true;this.type="Points";this.geometry=e;this.material=t;this.updateMorphTargets()}copy(e,t){super.copy(e,t);this.material=Array.isArray(e.material)?e.material.slice():e.material;this.geometry=e.geometry;return this}raycast(n,i){const e=this.geometry;const r=this.matrixWorld;const t=n.params.Points.threshold;const s=e.drawRange;if(e.boundingSphere===null)e.computeBoundingSphere();_sphere.copy(e.boundingSphere);_sphere.applyMatrix4(r);_sphere.radius+=t;if(n.ray.intersectsSphere(_sphere)===false)return;_inverseMatrix.copy(r).invert();_ray.copy(n.ray).applyMatrix4(_inverseMatrix);const a=t/((this.scale.x+this.scale.y+this.scale.z)/3);const o=a*a;const l=e.index;const c=e.attributes;const u=c.position;if(l!==null){const h=Math.max(0,s.start);const d=Math.min(l.count,s.start+s.count);for(let e=h,t=d;e<t;e++){const f=l.getX(e);_position$2.fromBufferAttribute(u,f);testPoint(_position$2,f,o,r,n,i,this)}}else{const h=Math.max(0,s.start);const d=Math.min(u.count,s.start+s.count);for(let e=h,t=d;e<t;e++){_position$2.fromBufferAttribute(u,e);testPoint(_position$2,e,o,r,n,i,this)}}}updateMorphTargets(){const e=this.geometry;const t=e.morphAttributes;const n=Object.keys(t);if(n.length>0){const i=t[n[0]];if(i!==undefined){this.morphTargetInfluences=[];this.morphTargetDictionary={};for(let e=0,t=i.length;e<t;e++){const r=i[e].name||String(e);this.morphTargetInfluences.push(0);this.morphTargetDictionary[r]=e}}}}}function testPoint(e,t,n,i,r,s,a){const o=_ray.distanceSqToPoint(e);if(o<n){const l=new Vector3;_ray.closestPointToPoint(e,l);l.applyMatrix4(i);const c=r.ray.origin.distanceTo(l);if(c<r.near||c>r.far)return;s.push({distance:c,distanceToRay:Math.sqrt(o),point:l,index:t,face:null,object:a})}}class VideoTexture extends Texture{constructor(e,t,n,i,r,s,a,o,l){super(e,t,n,i,r,s,a,o,l);this.isVideoTexture=true;this.minFilter=s!==undefined?s:LinearFilter;this.magFilter=r!==undefined?r:LinearFilter;this.generateMipmaps=false;const c=this;function u(){c.needsUpdate=true;e.requestVideoFrameCallback(u)}if("requestVideoFrameCallback"in e){e.requestVideoFrameCallback(u)}}clone(){return new this.constructor(this.image).copy(this)}update(){const e=this.image;const t="requestVideoFrameCallback"in e;if(t===false&&e.readyState>=e.HAVE_CURRENT_DATA){this.needsUpdate=true}}}class FramebufferTexture extends Texture{constructor(e,t){super({width:e,height:t});this.isFramebufferTexture=true;this.magFilter=NearestFilter;this.minFilter=NearestFilter;this.generateMipmaps=false;this.needsUpdate=true}}class CompressedTexture extends Texture{constructor(e,t,n,i,r,s,a,o,l,c,u,h){super(null,s,a,o,l,c,i,r,u,h);this.isCompressedTexture=true;this.image={width:t,height:n};this.mipmaps=e;this.flipY=false;this.generateMipmaps=false}}class CompressedArrayTexture extends CompressedTexture{constructor(e,t,n,i,r,s){super(e,t,n,r,s);this.isCompressedArrayTexture=true;this.image.depth=i;this.wrapR=ClampToEdgeWrapping}}class CompressedCubeTexture extends CompressedTexture{constructor(e,t,n){super(undefined,e[0].width,e[0].height,t,n,CubeReflectionMapping);this.isCompressedCubeTexture=true;this.isCubeTexture=true;this.image=e}}class CanvasTexture extends Texture{constructor(e,t,n,i,r,s,a,o,l){super(e,t,n,i,r,s,a,o,l);this.isCanvasTexture=true;this.needsUpdate=true}}class Curve{constructor(){this.type="Curve";this.arcLengthDivisions=200}getPoint(){console.warn("THREE.Curve: .getPoint() not implemented.");return null}getPointAt(e,t){const n=this.getUtoTmapping(e);return this.getPoint(n,t)}getPoints(t=5){const n=[];for(let e=0;e<=t;e++){n.push(this.getPoint(e/t))}return n}getSpacedPoints(t=5){const n=[];for(let e=0;e<=t;e++){n.push(this.getPointAt(e/t))}return n}getLength(){const e=this.getLengths();return e[e.length-1]}getLengths(t=this.arcLengthDivisions){if(this.cacheArcLengths&&this.cacheArcLengths.length===t+1&&!this.needsUpdate){return this.cacheArcLengths}this.needsUpdate=false;const n=[];let i,r=this.getPoint(0);let s=0;n.push(0);for(let e=1;e<=t;e++){i=this.getPoint(e/t);s+=i.distanceTo(r);n.push(s);r=i}this.cacheArcLengths=n;return n}updateArcLengths(){this.needsUpdate=true;this.getLengths()}getUtoTmapping(e,t){const n=this.getLengths();let i=0;const r=n.length;let s;if(t){s=t}else{s=e*n[r-1]}let a=0,o=r-1,l;while(a<=o){i=Math.floor(a+(o-a)/2);l=n[i]-s;if(l<0){a=i+1}else if(l>0){o=i-1}else{o=i;break}}i=o;if(n[i]===s){return i/(r-1)}const c=n[i];const u=n[i+1];const h=u-c;const d=(s-c)/h;const f=(i+d)/(r-1);return f}getTangent(e,t){const n=1e-4;let i=e-n;let r=e+n;if(i<0)i=0;if(r>1)r=1;const s=this.getPoint(i);const a=this.getPoint(r);const o=t||(s.isVector2?new Vector2:new Vector3);o.copy(a).sub(s).normalize();return o}getTangentAt(e,t){const n=this.getUtoTmapping(e);return this.getTangent(n,t)}computeFrenetFrames(n,e){const t=new Vector3;const i=[];const r=[];const s=[];const a=new Vector3;const o=new Matrix4;for(let e=0;e<=n;e++){const d=e/n;i[e]=this.getTangentAt(d,new Vector3)}r[0]=new Vector3;s[0]=new Vector3;let l=Number.MAX_VALUE;const c=Math.abs(i[0].x);const u=Math.abs(i[0].y);const h=Math.abs(i[0].z);if(c<=l){l=c;t.set(1,0,0)}if(u<=l){l=u;t.set(0,1,0)}if(h<=l){t.set(0,0,1)}a.crossVectors(i[0],t).normalize();r[0].crossVectors(i[0],a);s[0].crossVectors(i[0],r[0]);for(let e=1;e<=n;e++){r[e]=r[e-1].clone();s[e]=s[e-1].clone();a.crossVectors(i[e-1],i[e]);if(a.length()>Number.EPSILON){a.normalize();const f=Math.acos(clamp(i[e-1].dot(i[e]),-1,1));r[e].applyMatrix4(o.makeRotationAxis(a,f))}s[e].crossVectors(i[e],r[e])}if(e===true){let t=Math.acos(clamp(r[0].dot(r[n]),-1,1));t/=n;if(i[0].dot(a.crossVectors(r[0],r[n]))>0){t=-t}for(let e=1;e<=n;e++){r[e].applyMatrix4(o.makeRotationAxis(i[e],t*e));s[e].crossVectors(i[e],r[e])}}return{tangents:i,normals:r,binormals:s}}clone(){return(new this.constructor).copy(this)}copy(e){this.arcLengthDivisions=e.arcLengthDivisions;return this}toJSON(){const e={metadata:{version:4.6,type:"Curve",generator:"Curve.toJSON"}};e.arcLengthDivisions=this.arcLengthDivisions;e.type=this.type;return e}fromJSON(e){this.arcLengthDivisions=e.arcLengthDivisions;return this}}class EllipseCurve extends Curve{constructor(e=0,t=0,n=1,i=1,r=0,s=Math.PI*2,a=false,o=0){super();this.isEllipseCurve=true;this.type="EllipseCurve";this.aX=e;this.aY=t;this.xRadius=n;this.yRadius=i;this.aStartAngle=r;this.aEndAngle=s;this.aClockwise=a;this.aRotation=o}getPoint(e,t=new Vector2){const n=t;const i=Math.PI*2;let r=this.aEndAngle-this.aStartAngle;const s=Math.abs(r)<Number.EPSILON;while(r<0)r+=i;while(r>i)r-=i;if(r<Number.EPSILON){if(s){r=0}else{r=i}}if(this.aClockwise===true&&!s){if(r===i){r=-i}else{r=r-i}}const a=this.aStartAngle+e*r;let o=this.aX+this.xRadius*Math.cos(a);let l=this.aY+this.yRadius*Math.sin(a);if(this.aRotation!==0){const c=Math.cos(this.aRotation);const u=Math.sin(this.aRotation);const h=o-this.aX;const d=l-this.aY;o=h*c-d*u+this.aX;l=h*u+d*c+this.aY}return n.set(o,l)}copy(e){super.copy(e);this.aX=e.aX;this.aY=e.aY;this.xRadius=e.xRadius;this.yRadius=e.yRadius;this.aStartAngle=e.aStartAngle;this.aEndAngle=e.aEndAngle;this.aClockwise=e.aClockwise;this.aRotation=e.aRotation;return this}toJSON(){const e=super.toJSON();e.aX=this.aX;e.aY=this.aY;e.xRadius=this.xRadius;e.yRadius=this.yRadius;e.aStartAngle=this.aStartAngle;e.aEndAngle=this.aEndAngle;e.aClockwise=this.aClockwise;e.aRotation=this.aRotation;return e}fromJSON(e){super.fromJSON(e);this.aX=e.aX;this.aY=e.aY;this.xRadius=e.xRadius;this.yRadius=e.yRadius;this.aStartAngle=e.aStartAngle;this.aEndAngle=e.aEndAngle;this.aClockwise=e.aClockwise;this.aRotation=e.aRotation;return this}}class ArcCurve extends EllipseCurve{constructor(e,t,n,i,r,s){super(e,t,n,n,i,r,s);this.isArcCurve=true;this.type="ArcCurve"}}function CubicPoly(){let r=0,s=0,a=0,o=0;function c(e,t,n,i){r=e;s=n;a=-3*e+3*t-2*n-i;o=2*e-2*t+n+i}return{initCatmullRom:function(e,t,n,i,r){c(t,n,r*(n-e),r*(i-t))},initNonuniformCatmullRom:function(e,t,n,i,r,s,a){let o=(t-e)/r-(n-e)/(r+s)+(n-t)/s;let l=(n-t)/s-(i-t)/(s+a)+(i-n)/a;o*=s;l*=s;c(t,n,o,l)},calc:function(e){const t=e*e;const n=t*e;return r+s*e+a*t+o*n}}}const tmp=new Vector3;const px=new CubicPoly;const py=new CubicPoly;const pz=new CubicPoly;class CatmullRomCurve3 extends Curve{constructor(e=[],t=false,n="centripetal",i=.5){super();this.isCatmullRomCurve3=true;this.type="CatmullRomCurve3";this.points=e;this.closed=t;this.curveType=n;this.tension=i}getPoint(e,t=new Vector3){const n=t;const i=this.points;const r=i.length;const s=(r-(this.closed?0:1))*e;let a=Math.floor(s);let o=s-a;if(this.closed){a+=a>0?0:(Math.floor(Math.abs(a)/r)+1)*r}else if(o===0&&a===r-1){a=r-2;o=1}let l,c;if(this.closed||a>0){l=i[(a-1)%r]}else{tmp.subVectors(i[0],i[1]).add(i[0]);l=tmp}const u=i[a%r];const h=i[(a+1)%r];if(this.closed||a+2<r){c=i[(a+2)%r]}else{tmp.subVectors(i[r-1],i[r-2]).add(i[r-1]);c=tmp}if(this.curveType==="centripetal"||this.curveType==="chordal"){const d=this.curveType==="chordal"?.5:.25;let e=Math.pow(l.distanceToSquared(u),d);let t=Math.pow(u.distanceToSquared(h),d);let n=Math.pow(h.distanceToSquared(c),d);if(t<1e-4)t=1;if(e<1e-4)e=t;if(n<1e-4)n=t;px.initNonuniformCatmullRom(l.x,u.x,h.x,c.x,e,t,n);py.initNonuniformCatmullRom(l.y,u.y,h.y,c.y,e,t,n);pz.initNonuniformCatmullRom(l.z,u.z,h.z,c.z,e,t,n)}else if(this.curveType==="catmullrom"){px.initCatmullRom(l.x,u.x,h.x,c.x,this.tension);py.initCatmullRom(l.y,u.y,h.y,c.y,this.tension);pz.initCatmullRom(l.z,u.z,h.z,c.z,this.tension)}n.set(px.calc(o),py.calc(o),pz.calc(o));return n}copy(n){super.copy(n);this.points=[];for(let e=0,t=n.points.length;e<t;e++){const i=n.points[e];this.points.push(i.clone())}this.closed=n.closed;this.curveType=n.curveType;this.tension=n.tension;return this}toJSON(){const n=super.toJSON();n.points=[];for(let e=0,t=this.points.length;e<t;e++){const i=this.points[e];n.points.push(i.toArray())}n.closed=this.closed;n.curveType=this.curveType;n.tension=this.tension;return n}fromJSON(n){super.fromJSON(n);this.points=[];for(let e=0,t=n.points.length;e<t;e++){const i=n.points[e];this.points.push((new Vector3).fromArray(i))}this.closed=n.closed;this.curveType=n.curveType;this.tension=n.tension;return this}}function CatmullRom(e,t,n,i,r){const s=(i-t)*.5;const a=(r-n)*.5;const o=e*e;const l=e*o;return(2*n-2*i+s+a)*l+(-3*n+3*i-2*s-a)*o+s*e+n}function QuadraticBezierP0(e,t){const n=1-e;return n*n*t}function QuadraticBezierP1(e,t){return 2*(1-e)*e*t}function QuadraticBezierP2(e,t){return e*e*t}function QuadraticBezier(e,t,n,i){return QuadraticBezierP0(e,t)+QuadraticBezierP1(e,n)+QuadraticBezierP2(e,i)}function CubicBezierP0(e,t){const n=1-e;return n*n*n*t}function CubicBezierP1(e,t){const n=1-e;return 3*n*n*e*t}function CubicBezierP2(e,t){return 3*(1-e)*e*e*t}function CubicBezierP3(e,t){return e*e*e*t}function CubicBezier(e,t,n,i,r){return CubicBezierP0(e,t)+CubicBezierP1(e,n)+CubicBezierP2(e,i)+CubicBezierP3(e,r)}class CubicBezierCurve extends Curve{constructor(e=new Vector2,t=new Vector2,n=new Vector2,i=new Vector2){super();this.isCubicBezierCurve=true;this.type="CubicBezierCurve";this.v0=e;this.v1=t;this.v2=n;this.v3=i}getPoint(e,t=new Vector2){const n=t;const i=this.v0,r=this.v1,s=this.v2,a=this.v3;n.set(CubicBezier(e,i.x,r.x,s.x,a.x),CubicBezier(e,i.y,r.y,s.y,a.y));return n}copy(e){super.copy(e);this.v0.copy(e.v0);this.v1.copy(e.v1);this.v2.copy(e.v2);this.v3.copy(e.v3);return this}toJSON(){const e=super.toJSON();e.v0=this.v0.toArray();e.v1=this.v1.toArray();e.v2=this.v2.toArray();e.v3=this.v3.toArray();return e}fromJSON(e){super.fromJSON(e);this.v0.fromArray(e.v0);this.v1.fromArray(e.v1);this.v2.fromArray(e.v2);this.v3.fromArray(e.v3);return this}}class CubicBezierCurve3 extends Curve{constructor(e=new Vector3,t=new Vector3,n=new Vector3,i=new Vector3){super();this.isCubicBezierCurve3=true;this.type="CubicBezierCurve3";this.v0=e;this.v1=t;this.v2=n;this.v3=i}getPoint(e,t=new Vector3){const n=t;const i=this.v0,r=this.v1,s=this.v2,a=this.v3;n.set(CubicBezier(e,i.x,r.x,s.x,a.x),CubicBezier(e,i.y,r.y,s.y,a.y),CubicBezier(e,i.z,r.z,s.z,a.z));return n}copy(e){super.copy(e);this.v0.copy(e.v0);this.v1.copy(e.v1);this.v2.copy(e.v2);this.v3.copy(e.v3);return this}toJSON(){const e=super.toJSON();e.v0=this.v0.toArray();e.v1=this.v1.toArray();e.v2=this.v2.toArray();e.v3=this.v3.toArray();return e}fromJSON(e){super.fromJSON(e);this.v0.fromArray(e.v0);this.v1.fromArray(e.v1);this.v2.fromArray(e.v2);this.v3.fromArray(e.v3);return this}}class LineCurve extends Curve{constructor(e=new Vector2,t=new Vector2){super();this.isLineCurve=true;this.type="LineCurve";this.v1=e;this.v2=t}getPoint(e,t=new Vector2){const n=t;if(e===1){n.copy(this.v2)}else{n.copy(this.v2).sub(this.v1);n.multiplyScalar(e).add(this.v1)}return n}getPointAt(e,t){return this.getPoint(e,t)}getTangent(e,t=new Vector2){return t.subVectors(this.v2,this.v1).normalize()}getTangentAt(e,t){return this.getTangent(e,t)}copy(e){super.copy(e);this.v1.copy(e.v1);this.v2.copy(e.v2);return this}toJSON(){const e=super.toJSON();e.v1=this.v1.toArray();e.v2=this.v2.toArray();return e}fromJSON(e){super.fromJSON(e);this.v1.fromArray(e.v1);this.v2.fromArray(e.v2);return this}}class LineCurve3 extends Curve{constructor(e=new Vector3,t=new Vector3){super();this.isLineCurve3=true;this.type="LineCurve3";this.v1=e;this.v2=t}getPoint(e,t=new Vector3){const n=t;if(e===1){n.copy(this.v2)}else{n.copy(this.v2).sub(this.v1);n.multiplyScalar(e).add(this.v1)}return n}getPointAt(e,t){return this.getPoint(e,t)}getTangent(e,t=new Vector3){return t.subVectors(this.v2,this.v1).normalize()}getTangentAt(e,t){return this.getTangent(e,t)}copy(e){super.copy(e);this.v1.copy(e.v1);this.v2.copy(e.v2);return this}toJSON(){const e=super.toJSON();e.v1=this.v1.toArray();e.v2=this.v2.toArray();return e}fromJSON(e){super.fromJSON(e);this.v1.fromArray(e.v1);this.v2.fromArray(e.v2);return this}}class QuadraticBezierCurve extends Curve{constructor(e=new Vector2,t=new Vector2,n=new Vector2){super();this.isQuadraticBezierCurve=true;this.type="QuadraticBezierCurve";this.v0=e;this.v1=t;this.v2=n}getPoint(e,t=new Vector2){const n=t;const i=this.v0,r=this.v1,s=this.v2;n.set(QuadraticBezier(e,i.x,r.x,s.x),QuadraticBezier(e,i.y,r.y,s.y));return n}copy(e){super.copy(e);this.v0.copy(e.v0);this.v1.copy(e.v1);this.v2.copy(e.v2);return this}toJSON(){const e=super.toJSON();e.v0=this.v0.toArray();e.v1=this.v1.toArray();e.v2=this.v2.toArray();return e}fromJSON(e){super.fromJSON(e);this.v0.fromArray(e.v0);this.v1.fromArray(e.v1);this.v2.fromArray(e.v2);return this}}class QuadraticBezierCurve3 extends Curve{constructor(e=new Vector3,t=new Vector3,n=new Vector3){super();this.isQuadraticBezierCurve3=true;this.type="QuadraticBezierCurve3";this.v0=e;this.v1=t;this.v2=n}getPoint(e,t=new Vector3){const n=t;const i=this.v0,r=this.v1,s=this.v2;n.set(QuadraticBezier(e,i.x,r.x,s.x),QuadraticBezier(e,i.y,r.y,s.y),QuadraticBezier(e,i.z,r.z,s.z));return n}copy(e){super.copy(e);this.v0.copy(e.v0);this.v1.copy(e.v1);this.v2.copy(e.v2);return this}toJSON(){const e=super.toJSON();e.v0=this.v0.toArray();e.v1=this.v1.toArray();e.v2=this.v2.toArray();return e}fromJSON(e){super.fromJSON(e);this.v0.fromArray(e.v0);this.v1.fromArray(e.v1);this.v2.fromArray(e.v2);return this}}class SplineCurve extends Curve{constructor(e=[]){super();this.isSplineCurve=true;this.type="SplineCurve";this.points=e}getPoint(e,t=new Vector2){const n=t;const i=this.points;const r=(i.length-1)*e;const s=Math.floor(r);const a=r-s;const o=i[s===0?s:s-1];const l=i[s];const c=i[s>i.length-2?i.length-1:s+1];const u=i[s>i.length-3?i.length-1:s+2];n.set(CatmullRom(a,o.x,l.x,c.x,u.x),CatmullRom(a,o.y,l.y,c.y,u.y));return n}copy(n){super.copy(n);this.points=[];for(let e=0,t=n.points.length;e<t;e++){const i=n.points[e];this.points.push(i.clone())}return this}toJSON(){const n=super.toJSON();n.points=[];for(let e=0,t=this.points.length;e<t;e++){const i=this.points[e];n.points.push(i.toArray())}return n}fromJSON(n){super.fromJSON(n);this.points=[];for(let e=0,t=n.points.length;e<t;e++){const i=n.points[e];this.points.push((new Vector2).fromArray(i))}return this}}var Curves=Object.freeze({__proto__:null,ArcCurve:ArcCurve,CatmullRomCurve3:CatmullRomCurve3,CubicBezierCurve:CubicBezierCurve,CubicBezierCurve3:CubicBezierCurve3,EllipseCurve:EllipseCurve,LineCurve:LineCurve,LineCurve3:LineCurve3,QuadraticBezierCurve:QuadraticBezierCurve,QuadraticBezierCurve3:QuadraticBezierCurve3,SplineCurve:SplineCurve});class CurvePath extends Curve{constructor(){super();this.type="CurvePath";this.curves=[];this.autoClose=false}add(e){this.curves.push(e)}closePath(){const e=this.curves[0].getPoint(0);const t=this.curves[this.curves.length-1].getPoint(1);if(!e.equals(t)){const n=e.isVector2===true?"LineCurve":"LineCurve3";this.curves.push(new Curves[n](t,e))}return this}getPoint(e,t){const n=e*this.getLength();const i=this.getCurveLengths();let r=0;while(r<i.length){if(i[r]>=n){const s=i[r]-n;const a=this.curves[r];const o=a.getLength();const l=o===0?0:1-s/o;return a.getPointAt(l,t)}r++}return null}getLength(){const e=this.getCurveLengths();return e[e.length-1]}updateArcLengths(){this.needsUpdate=true;this.cacheLengths=null;this.getCurveLengths()}getCurveLengths(){if(this.cacheLengths&&this.cacheLengths.length===this.curves.length){return this.cacheLengths}const n=[];let i=0;for(let e=0,t=this.curves.length;e<t;e++){i+=this.curves[e].getLength();n.push(i)}this.cacheLengths=n;return n}getSpacedPoints(t=40){const n=[];for(let e=0;e<=t;e++){n.push(this.getPoint(e/t))}if(this.autoClose){n.push(n[0])}return n}getPoints(n=12){const i=[];let r;for(let e=0,t=this.curves;e<t.length;e++){const s=t[e];const a=s.isEllipseCurve?n*2:s.isLineCurve||s.isLineCurve3?1:s.isSplineCurve?n*s.points.length:n;const o=s.getPoints(a);for(let e=0;e<o.length;e++){const l=o[e];if(r&&r.equals(l))continue;i.push(l);r=l}}if(this.autoClose&&i.length>1&&!i[i.length-1].equals(i[0])){i.push(i[0])}return i}copy(n){super.copy(n);this.curves=[];for(let e=0,t=n.curves.length;e<t;e++){const i=n.curves[e];this.curves.push(i.clone())}this.autoClose=n.autoClose;return this}toJSON(){const n=super.toJSON();n.autoClose=this.autoClose;n.curves=[];for(let e=0,t=this.curves.length;e<t;e++){const i=this.curves[e];n.curves.push(i.toJSON())}return n}fromJSON(n){super.fromJSON(n);this.autoClose=n.autoClose;this.curves=[];for(let e=0,t=n.curves.length;e<t;e++){const i=n.curves[e];this.curves.push((new Curves[i.type]).fromJSON(i))}return this}}class Path extends CurvePath{constructor(e){super();this.type="Path";this.currentPoint=new Vector2;if(e){this.setFromPoints(e)}}setFromPoints(n){this.moveTo(n[0].x,n[0].y);for(let e=1,t=n.length;e<t;e++){this.lineTo(n[e].x,n[e].y)}return this}moveTo(e,t){this.currentPoint.set(e,t);return this}lineTo(e,t){const n=new LineCurve(this.currentPoint.clone(),new Vector2(e,t));this.curves.push(n);this.currentPoint.set(e,t);return this}quadraticCurveTo(e,t,n,i){const r=new QuadraticBezierCurve(this.currentPoint.clone(),new Vector2(e,t),new Vector2(n,i));this.curves.push(r);this.currentPoint.set(n,i);return this}bezierCurveTo(e,t,n,i,r,s){const a=new CubicBezierCurve(this.currentPoint.clone(),new Vector2(e,t),new Vector2(n,i),new Vector2(r,s));this.curves.push(a);this.currentPoint.set(r,s);return this}splineThru(e){const t=[this.currentPoint.clone()].concat(e);const n=new SplineCurve(t);this.curves.push(n);this.currentPoint.copy(e[e.length-1]);return this}arc(e,t,n,i,r,s){const a=this.currentPoint.x;const o=this.currentPoint.y;this.absarc(e+a,t+o,n,i,r,s);return this}absarc(e,t,n,i,r,s){this.absellipse(e,t,n,n,i,r,s);return this}ellipse(e,t,n,i,r,s,a,o){const l=this.currentPoint.x;const c=this.currentPoint.y;this.absellipse(e+l,t+c,n,i,r,s,a,o);return this}absellipse(e,t,n,i,r,s,a,o){const l=new EllipseCurve(e,t,n,i,r,s,a,o);if(this.curves.length>0){const u=l.getPoint(0);if(!u.equals(this.currentPoint)){this.lineTo(u.x,u.y)}}this.curves.push(l);const c=l.getPoint(1);this.currentPoint.copy(c);return this}copy(e){super.copy(e);this.currentPoint.copy(e.currentPoint);return this}toJSON(){const e=super.toJSON();e.currentPoint=this.currentPoint.toArray();return e}fromJSON(e){super.fromJSON(e);this.currentPoint.fromArray(e.currentPoint);return this}}class LatheGeometry extends BufferGeometry{constructor(n=[new Vector2(0,-.5),new Vector2(.5,0),new Vector2(0,.5)],i=12,e=0,r=Math.PI*2){super();this.type="LatheGeometry";this.parameters={points:n,segments:i,phiStart:e,phiLength:r};i=Math.floor(i);r=clamp(r,0,Math.PI*2);const s=[];const a=[];const o=[];const l=[];const c=[];const u=1/i;const h=new Vector3;const d=new Vector2;const t=new Vector3;const f=new Vector3;const p=new Vector3;let m=0;let g=0;for(let e=0;e<=n.length-1;e++){switch(e){case 0:m=n[e+1].x-n[e].x;g=n[e+1].y-n[e].y;t.x=g*1;t.y=-m;t.z=g*0;p.copy(t);t.normalize();l.push(t.x,t.y,t.z);break;case n.length-1:l.push(p.x,p.y,p.z);break;default:m=n[e+1].x-n[e].x;g=n[e+1].y-n[e].y;t.x=g*1;t.y=-m;t.z=g*0;f.copy(t);t.x+=p.x;t.y+=p.y;t.z+=p.z;t.normalize();l.push(t.x,t.y,t.z);p.copy(f)}}for(let t=0;t<=i;t++){const _=e+t*u*r;const v=Math.sin(_);const y=Math.cos(_);for(let e=0;e<=n.length-1;e++){h.x=n[e].x*v;h.y=n[e].y;h.z=n[e].x*y;a.push(h.x,h.y,h.z);d.x=t/i;d.y=e/(n.length-1);o.push(d.x,d.y);const x=l[3*e+0]*v;const M=l[3*e+1];const S=l[3*e+0]*y;c.push(x,M,S)}}for(let t=0;t<i;t++){for(let e=0;e<n.length-1;e++){const b=e+t*n.length;const T=b;const A=b+n.length;const E=b+n.length+1;const w=b+1;s.push(T,A,w);s.push(E,w,A)}}this.setIndex(s);this.setAttribute("position",new Float32BufferAttribute(a,3));this.setAttribute("uv",new Float32BufferAttribute(o,2));this.setAttribute("normal",new Float32BufferAttribute(c,3))}copy(e){super.copy(e);this.parameters=Object.assign({},e.parameters);return this}static fromJSON(e){return new LatheGeometry(e.points,e.segments,e.phiStart,e.phiLength)}}class CapsuleGeometry extends LatheGeometry{constructor(e=1,t=1,n=4,i=8){const r=new Path;r.absarc(0,-t/2,e,Math.PI*1.5,0);r.absarc(0,t/2,e,0,Math.PI*.5);super(r.getPoints(n),i);this.type="CapsuleGeometry";this.parameters={radius:e,length:t,capSegments:n,radialSegments:i}}static fromJSON(e){return new CapsuleGeometry(e.radius,e.length,e.capSegments,e.radialSegments)}}class CircleGeometry extends BufferGeometry{constructor(n=1,i=32,r=0,s=Math.PI*2){super();this.type="CircleGeometry";this.parameters={radius:n,segments:i,thetaStart:r,thetaLength:s};i=Math.max(3,i);const t=[];const a=[];const o=[];const l=[];const c=new Vector3;const u=new Vector2;a.push(0,0,0);o.push(0,0,1);l.push(.5,.5);for(let e=0,t=3;e<=i;e++,t+=3){const h=r+e/i*s;c.x=n*Math.cos(h);c.y=n*Math.sin(h);a.push(c.x,c.y,c.z);o.push(0,0,1);u.x=(a[t]/n+1)/2;u.y=(a[t+1]/n+1)/2;l.push(u.x,u.y)}for(let e=1;e<=i;e++){t.push(e,e+1,0)}this.setIndex(t);this.setAttribute("position",new Float32BufferAttribute(a,3));this.setAttribute("normal",new Float32BufferAttribute(o,3));this.setAttribute("uv",new Float32BufferAttribute(l,2))}copy(e){super.copy(e);this.parameters=Object.assign({},e.parameters);return this}static fromJSON(e){return new CircleGeometry(e.radius,e.segments,e.thetaStart,e.thetaLength)}}class CylinderGeometry extends BufferGeometry{constructor(g=1,_=1,v=1,y=32,x=1,e=false,M=0,S=Math.PI*2){super();this.type="CylinderGeometry";this.parameters={radiusTop:g,radiusBottom:_,height:v,radialSegments:y,heightSegments:x,openEnded:e,thetaStart:M,thetaLength:S};const b=this;y=Math.floor(y);x=Math.floor(x);const T=[];const A=[];const E=[];const w=[];let C=0;const R=[];const L=v/2;let P=0;t();if(e===false){if(g>0)n(true);if(_>0)n(false)}this.setIndex(T);this.setAttribute("position",new Float32BufferAttribute(A,3));this.setAttribute("normal",new Float32BufferAttribute(E,3));this.setAttribute("uv",new Float32BufferAttribute(w,2));function t(){const t=new Vector3;const n=new Vector3;let i=0;const r=(_-g)/v;for(let e=0;e<=x;e++){const s=[];const a=e/x;const o=a*(_-g)+g;for(let e=0;e<=y;e++){const l=e/y;const c=l*S+M;const u=Math.sin(c);const h=Math.cos(c);n.x=o*u;n.y=-a*v+L;n.z=o*h;A.push(n.x,n.y,n.z);t.set(u,r,h).normalize();E.push(t.x,t.y,t.z);w.push(l,1-a);s.push(C++)}R.push(s)}for(let t=0;t<y;t++){for(let e=0;e<x;e++){const d=R[e][t];const f=R[e+1][t];const p=R[e+1][t+1];const m=R[e][t+1];T.push(d,f,m);T.push(f,p,m);i+=6}}b.addGroup(P,i,0);P+=i}function n(t){const n=C;const i=new Vector2;const r=new Vector3;let s=0;const a=t===true?g:_;const o=t===true?1:-1;for(let e=1;e<=y;e++){A.push(0,L*o,0);E.push(0,o,0);w.push(.5,.5);C++}const l=C;for(let e=0;e<=y;e++){const c=e/y;const u=c*S+M;const h=Math.cos(u);const d=Math.sin(u);r.x=a*d;r.y=L*o;r.z=a*h;A.push(r.x,r.y,r.z);E.push(0,o,0);i.x=h*.5+.5;i.y=d*.5*o+.5;w.push(i.x,i.y);C++}for(let e=0;e<y;e++){const f=n+e;const p=l+e;if(t===true){T.push(p,p+1,f)}else{T.push(p+1,p,f)}s+=3}b.addGroup(P,s,t===true?1:2);P+=s}}copy(e){super.copy(e);this.parameters=Object.assign({},e.parameters);return this}static fromJSON(e){return new CylinderGeometry(e.radiusTop,e.radiusBottom,e.height,e.radialSegments,e.heightSegments,e.openEnded,e.thetaStart,e.thetaLength)}}class ConeGeometry extends CylinderGeometry{constructor(e=1,t=1,n=32,i=1,r=false,s=0,a=Math.PI*2){super(0,e,t,n,i,r,s,a);this.type="ConeGeometry";this.parameters={radius:e,height:t,radialSegments:n,heightSegments:i,openEnded:r,thetaStart:s,thetaLength:a}}static fromJSON(e){return new ConeGeometry(e.radius,e.height,e.radialSegments,e.heightSegments,e.openEnded,e.thetaStart,e.thetaLength)}}class PolyhedronGeometry extends BufferGeometry{constructor(i=[],s=[],e=1,t=0){super();this.type="PolyhedronGeometry";this.parameters={vertices:i,indices:s,radius:e,detail:t};const u=[];const h=[];n(t);r(e);o();this.setAttribute("position",new Float32BufferAttribute(u,3));this.setAttribute("normal",new Float32BufferAttribute(u.slice(),3));this.setAttribute("uv",new Float32BufferAttribute(h,2));if(t===0){this.computeVertexNormals()}else{this.normalizeNormals()}function n(t){const n=new Vector3;const i=new Vector3;const r=new Vector3;for(let e=0;e<s.length;e+=3){c(s[e+0],n);c(s[e+1],i);c(s[e+2],r);a(n,i,r,t)}}function a(e,n,i,t){const r=t+1;const s=[];for(let t=0;t<=r;t++){s[t]=[];const a=e.clone().lerp(i,t/r);const o=n.clone().lerp(i,t/r);const l=r-t;for(let e=0;e<=l;e++){if(e===0&&t===r){s[t][e]=a}else{s[t][e]=a.clone().lerp(o,e/l)}}}for(let t=0;t<r;t++){for(let e=0;e<2*(r-t)-1;e++){const c=Math.floor(e/2);if(e%2===0){d(s[t][c+1]);d(s[t+1][c]);d(s[t][c])}else{d(s[t][c+1]);d(s[t+1][c+1]);d(s[t+1][c])}}}}function r(t){const n=new Vector3;for(let e=0;e<u.length;e+=3){n.x=u[e+0];n.y=u[e+1];n.z=u[e+2];n.normalize().multiplyScalar(t);u[e+0]=n.x;u[e+1]=n.y;u[e+2]=n.z}}function o(){const t=new Vector3;for(let e=0;e<u.length;e+=3){t.x=u[e+0];t.y=u[e+1];t.z=u[e+2];const n=m(t)/2/Math.PI+.5;const i=g(t)/Math.PI+.5;h.push(n,1-i)}f();l()}function l(){for(let e=0;e<h.length;e+=6){const t=h[e+0];const n=h[e+2];const i=h[e+4];const r=Math.max(t,n,i);const s=Math.min(t,n,i);if(r>.9&&s<.1){if(t<.2)h[e+0]+=1;if(n<.2)h[e+2]+=1;if(i<.2)h[e+4]+=1}}}function d(e){u.push(e.x,e.y,e.z)}function c(e,t){const n=e*3;t.x=i[n+0];t.y=i[n+1];t.z=i[n+2]}function f(){const n=new Vector3;const i=new Vector3;const r=new Vector3;const s=new Vector3;const a=new Vector2;const o=new Vector2;const l=new Vector2;for(let e=0,t=0;e<u.length;e+=9,t+=6){n.set(u[e+0],u[e+1],u[e+2]);i.set(u[e+3],u[e+4],u[e+5]);r.set(u[e+6],u[e+7],u[e+8]);a.set(h[t+0],h[t+1]);o.set(h[t+2],h[t+3]);l.set(h[t+4],h[t+5]);s.copy(n).add(i).add(r).divideScalar(3);const c=m(s);p(a,t+0,n,c);p(o,t+2,i,c);p(l,t+4,r,c)}}function p(e,t,n,i){if(i<0&&e.x===1){h[t]=e.x-1}if(n.x===0&&n.z===0){h[t]=i/2/Math.PI+.5}}function m(e){return Math.atan2(e.z,-e.x)}function g(e){return Math.atan2(-e.y,Math.sqrt(e.x*e.x+e.z*e.z))}}copy(e){super.copy(e);this.parameters=Object.assign({},e.parameters);return this}static fromJSON(e){return new PolyhedronGeometry(e.vertices,e.indices,e.radius,e.details)}}class DodecahedronGeometry extends PolyhedronGeometry{constructor(e=1,t=0){const n=(1+Math.sqrt(5))/2;const i=1/n;const r=[-1,-1,-1,-1,-1,1,-1,1,-1,-1,1,1,1,-1,-1,1,-1,1,1,1,-1,1,1,1,0,-i,-n,0,-i,n,0,i,-n,0,i,n,-i,-n,0,-i,n,0,i,-n,0,i,n,0,-n,0,-i,n,0,-i,-n,0,i,n,0,i];const s=[3,11,7,3,7,15,3,15,13,7,19,17,7,17,6,7,6,15,17,4,8,17,8,10,17,10,6,8,0,16,8,16,2,8,2,10,0,12,1,0,1,18,0,18,16,6,10,2,6,2,13,6,13,15,2,16,18,2,18,3,2,3,13,18,1,9,18,9,11,18,11,3,4,14,12,4,12,0,4,0,8,11,9,5,11,5,19,11,19,7,19,5,14,19,14,4,19,4,17,1,12,14,1,14,5,1,5,9];super(r,s,e,t);this.type="DodecahedronGeometry";this.parameters={radius:e,detail:t}}static fromJSON(e){return new DodecahedronGeometry(e.radius,e.detail)}}const _v0=new Vector3;const _v1$1=new Vector3;const _normal=new Vector3;const _triangle=new Triangle;class EdgesGeometry extends BufferGeometry{constructor(e=null,t=1){super();this.type="EdgesGeometry";this.parameters={geometry:e,thresholdAngle:t};if(e!==null){const n=4;const i=Math.pow(10,n);const r=Math.cos(DEG2RAD*t);const s=e.getIndex();const a=e.getAttribute("position");const o=s?s.count:a.count;const l=[0,0,0];const c=["a","b","c"];const u=new Array(3);const h={};const d=[];for(let e=0;e<o;e+=3){if(s){l[0]=s.getX(e);l[1]=s.getX(e+1);l[2]=s.getX(e+2)}else{l[0]=e;l[1]=e+1;l[2]=e+2}const{a:f,b:p,c:m}=_triangle;f.fromBufferAttribute(a,l[0]);p.fromBufferAttribute(a,l[1]);m.fromBufferAttribute(a,l[2]);_triangle.getNormal(_normal);u[0]=`${Math.round(f.x*i)},${Math.round(f.y*i)},${Math.round(f.z*i)}`;u[1]=`${Math.round(p.x*i)},${Math.round(p.y*i)},${Math.round(p.z*i)}`;u[2]=`${Math.round(m.x*i)},${Math.round(m.y*i)},${Math.round(m.z*i)}`;if(u[0]===u[1]||u[1]===u[2]||u[2]===u[0]){continue}for(let e=0;e<3;e++){const g=(e+1)%3;const _=u[e];const v=u[g];const y=_triangle[c[e]];const x=_triangle[c[g]];const M=`${_}_${v}`;const S=`${v}_${_}`;if(S in h&&h[S]){if(_normal.dot(h[S].normal)<=r){d.push(y.x,y.y,y.z);d.push(x.x,x.y,x.z)}h[S]=null}else if(!(M in h)){h[M]={index0:l[e],index1:l[g],normal:_normal.clone()}}}}for(const b in h){if(h[b]){const{index0:T,index1:A}=h[b];_v0.fromBufferAttribute(a,T);_v1$1.fromBufferAttribute(a,A);d.push(_v0.x,_v0.y,_v0.z);d.push(_v1$1.x,_v1$1.y,_v1$1.z)}}this.setAttribute("position",new Float32BufferAttribute(d,3))}}copy(e){super.copy(e);this.parameters=Object.assign({},e.parameters);return this}}class Shape extends Path{constructor(e){super(e);this.uuid=generateUUID();this.type="Shape";this.holes=[]}getPointsHoles(n){const i=[];for(let e=0,t=this.holes.length;e<t;e++){i[e]=this.holes[e].getPoints(n)}return i}extractPoints(e){return{shape:this.getPoints(e),holes:this.getPointsHoles(e)}}copy(n){super.copy(n);this.holes=[];for(let e=0,t=n.holes.length;e<t;e++){const i=n.holes[e];this.holes.push(i.clone())}return this}toJSON(){const n=super.toJSON();n.uuid=this.uuid;n.holes=[];for(let e=0,t=this.holes.length;e<t;e++){const i=this.holes[e];n.holes.push(i.toJSON())}return n}fromJSON(n){super.fromJSON(n);this.uuid=n.uuid;this.holes=[];for(let e=0,t=n.holes.length;e<t;e++){const i=n.holes[e];this.holes.push((new Path).fromJSON(i))}return this}}const Earcut={triangulate:function(t,e,n=2){const i=e&&e.length;const r=i?e[0]*n:t.length;let s=linkedList(t,0,r,n,true);const a=[];if(!s||s.next===s.prev)return a;let o,l,c,u,h,d,f;if(i)s=eliminateHoles(t,e,s,n);if(t.length>80*n){o=c=t[0];l=u=t[1];for(let e=n;e<r;e+=n){h=t[e];d=t[e+1];if(h<o)o=h;if(d<l)l=d;if(h>c)c=h;if(d>u)u=d}f=Math.max(c-o,u-l);f=f!==0?32767/f:0}earcutLinked(s,a,n,o,l,f,0);return a}};function linkedList(e,t,n,i,r){let s,a;if(r===signedArea(e,t,n,i)>0){for(s=t;s<n;s+=i)a=insertNode(s,e[s],e[s+1],a)}else{for(s=n-i;s>=t;s-=i)a=insertNode(s,e[s],e[s+1],a)}if(a&&equals(a,a.next)){removeNode(a);a=a.next}return a}function filterPoints(e,t){if(!e)return e;if(!t)t=e;let n=e,i;do{i=false;if(!n.steiner&&(equals(n,n.next)||area(n.prev,n,n.next)===0)){removeNode(n);n=t=n.prev;if(n===n.next)break;i=true}else{n=n.next}}while(i||n!==t);return t}function earcutLinked(e,t,n,i,r,s,a){if(!e)return;if(!a&&s)indexCurve(e,i,r,s);let o=e,l,c;while(e.prev!==e.next){l=e.prev;c=e.next;if(s?isEarHashed(e,i,r,s):isEar(e)){t.push(l.i/n|0);t.push(e.i/n|0);t.push(c.i/n|0);removeNode(e);e=c.next;o=c.next;continue}e=c;if(e===o){if(!a){earcutLinked(filterPoints(e),t,n,i,r,s,1)}else if(a===1){e=cureLocalIntersections(filterPoints(e),t,n);earcutLinked(e,t,n,i,r,s,2)}else if(a===2){splitEarcut(e,t,n,i,r,s)}break}}}function isEar(e){const t=e.prev,n=e,i=e.next;if(area(t,n,i)>=0)return false;const r=t.x,s=n.x,a=i.x,o=t.y,l=n.y,c=i.y;const u=r<s?r<a?r:a:s<a?s:a,h=o<l?o<c?o:c:l<c?l:c,d=r>s?r>a?r:a:s>a?s:a,f=o>l?o>c?o:c:l>c?l:c;let p=i.next;while(p!==t){if(p.x>=u&&p.x<=d&&p.y>=h&&p.y<=f&&pointInTriangle(r,o,s,l,a,c,p.x,p.y)&&area(p.prev,p,p.next)>=0)return false;p=p.next}return true}function isEarHashed(e,t,n,i){const r=e.prev,s=e,a=e.next;if(area(r,s,a)>=0)return false;const o=r.x,l=s.x,c=a.x,u=r.y,h=s.y,d=a.y;const f=o<l?o<c?o:c:l<c?l:c,p=u<h?u<d?u:d:h<d?h:d,m=o>l?o>c?o:c:l>c?l:c,g=u>h?u>d?u:d:h>d?h:d;const _=zOrder(f,p,t,n,i),v=zOrder(m,g,t,n,i);let y=e.prevZ,x=e.nextZ;while(y&&y.z>=_&&x&&x.z<=v){if(y.x>=f&&y.x<=m&&y.y>=p&&y.y<=g&&y!==r&&y!==a&&pointInTriangle(o,u,l,h,c,d,y.x,y.y)&&area(y.prev,y,y.next)>=0)return false;y=y.prevZ;if(x.x>=f&&x.x<=m&&x.y>=p&&x.y<=g&&x!==r&&x!==a&&pointInTriangle(o,u,l,h,c,d,x.x,x.y)&&area(x.prev,x,x.next)>=0)return false;x=x.nextZ}while(y&&y.z>=_){if(y.x>=f&&y.x<=m&&y.y>=p&&y.y<=g&&y!==r&&y!==a&&pointInTriangle(o,u,l,h,c,d,y.x,y.y)&&area(y.prev,y,y.next)>=0)return false;y=y.prevZ}while(x&&x.z<=v){if(x.x>=f&&x.x<=m&&x.y>=p&&x.y<=g&&x!==r&&x!==a&&pointInTriangle(o,u,l,h,c,d,x.x,x.y)&&area(x.prev,x,x.next)>=0)return false;x=x.nextZ}return true}function cureLocalIntersections(e,t,n){let i=e;do{const r=i.prev,s=i.next.next;if(!equals(r,s)&&intersects(r,i,i.next,s)&&locallyInside(r,s)&&locallyInside(s,r)){t.push(r.i/n|0);t.push(i.i/n|0);t.push(s.i/n|0);removeNode(i);removeNode(i.next);i=e=s}i=i.next}while(i!==e);return filterPoints(i)}function splitEarcut(e,n,i,r,s,a){let o=e;do{let t=o.next.next;while(t!==o.prev){if(o.i!==t.i&&isValidDiagonal(o,t)){let e=splitPolygon(o,t);o=filterPoints(o,o.next);e=filterPoints(e,e.next);earcutLinked(o,n,i,r,s,a,0);earcutLinked(e,n,i,r,s,a,0);return}t=t.next}o=o.next}while(o!==e)}function eliminateHoles(e,t,n,i){const r=[];let s,a,o,l,c;for(s=0,a=t.length;s<a;s++){o=t[s]*i;l=s<a-1?t[s+1]*i:e.length;c=linkedList(e,o,l,i,false);if(c===c.next)c.steiner=true;r.push(getLeftmost(c))}r.sort(compareX);for(s=0;s<r.length;s++){n=eliminateHole(r[s],n)}return n}function compareX(e,t){return e.x-t.x}function eliminateHole(e,t){const n=findHoleBridge(e,t);if(!n){return t}const i=splitPolygon(n,e);filterPoints(i,i.next);return filterPoints(n,n.next)}function findHoleBridge(e,t){let n=t,i=-Infinity,r;const s=e.x,a=e.y;do{if(a<=n.y&&a>=n.next.y&&n.next.y!==n.y){const d=n.x+(a-n.y)*(n.next.x-n.x)/(n.next.y-n.y);if(d<=s&&d>i){i=d;r=n.x<n.next.x?n:n.next;if(d===s)return r}}n=n.next}while(n!==t);if(!r)return null;const o=r,l=r.x,c=r.y;let u=Infinity,h;n=r;do{if(s>=n.x&&n.x>=l&&s!==n.x&&pointInTriangle(a<c?s:i,a,l,c,a<c?i:s,a,n.x,n.y)){h=Math.abs(a-n.y)/(s-n.x);if(locallyInside(n,e)&&(h<u||h===u&&(n.x>r.x||n.x===r.x&&sectorContainsSector(r,n)))){r=n;u=h}}n=n.next}while(n!==o);return r}function sectorContainsSector(e,t){return area(e.prev,e,t.prev)<0&&area(t.next,e,e.next)<0}function indexCurve(e,t,n,i){let r=e;do{if(r.z===0)r.z=zOrder(r.x,r.y,t,n,i);r.prevZ=r.prev;r.nextZ=r.next;r=r.next}while(r!==e);r.prevZ.nextZ=null;r.prevZ=null;sortLinked(r)}function sortLinked(e){let t,n,i,r,s,a,o,l,c=1;do{n=e;e=null;s=null;a=0;while(n){a++;i=n;o=0;for(t=0;t<c;t++){o++;i=i.nextZ;if(!i)break}l=c;while(o>0||l>0&&i){if(o!==0&&(l===0||!i||n.z<=i.z)){r=n;n=n.nextZ;o--}else{r=i;i=i.nextZ;l--}if(s)s.nextZ=r;else e=r;r.prevZ=s;s=r}n=i}s.nextZ=null;c*=2}while(a>1);return e}function zOrder(e,t,n,i,r){e=(e-n)*r|0;t=(t-i)*r|0;e=(e|e<<8)&16711935;e=(e|e<<4)&252645135;e=(e|e<<2)&858993459;e=(e|e<<1)&1431655765;t=(t|t<<8)&16711935;t=(t|t<<4)&252645135;t=(t|t<<2)&858993459;t=(t|t<<1)&1431655765;return e|t<<1}function getLeftmost(e){let t=e,n=e;do{if(t.x<n.x||t.x===n.x&&t.y<n.y)n=t;t=t.next}while(t!==e);return n}function pointInTriangle(e,t,n,i,r,s,a,o){return(r-a)*(t-o)>=(e-a)*(s-o)&&(e-a)*(i-o)>=(n-a)*(t-o)&&(n-a)*(s-o)>=(r-a)*(i-o)}function isValidDiagonal(e,t){return e.next.i!==t.i&&e.prev.i!==t.i&&!intersectsPolygon(e,t)&&(locallyInside(e,t)&&locallyInside(t,e)&&middleInside(e,t)&&(area(e.prev,e,t.prev)||area(e,t.prev,t))||equals(e,t)&&area(e.prev,e,e.next)>0&&area(t.prev,t,t.next)>0)}function area(e,t,n){return(t.y-e.y)*(n.x-t.x)-(t.x-e.x)*(n.y-t.y)}function equals(e,t){return e.x===t.x&&e.y===t.y}function intersects(e,t,n,i){const r=sign(area(e,t,n));const s=sign(area(e,t,i));const a=sign(area(n,i,e));const o=sign(area(n,i,t));if(r!==s&&a!==o)return true;if(r===0&&onSegment(e,n,t))return true;if(s===0&&onSegment(e,i,t))return true;if(a===0&&onSegment(n,e,i))return true;if(o===0&&onSegment(n,t,i))return true;return false}function onSegment(e,t,n){return t.x<=Math.max(e.x,n.x)&&t.x>=Math.min(e.x,n.x)&&t.y<=Math.max(e.y,n.y)&&t.y>=Math.min(e.y,n.y)}function sign(e){return e>0?1:e<0?-1:0}function intersectsPolygon(e,t){let n=e;do{if(n.i!==e.i&&n.next.i!==e.i&&n.i!==t.i&&n.next.i!==t.i&&intersects(n,n.next,e,t))return true;n=n.next}while(n!==e);return false}function locallyInside(e,t){return area(e.prev,e,e.next)<0?area(e,t,e.next)>=0&&area(e,e.prev,t)>=0:area(e,t,e.prev)<0||area(e,e.next,t)<0}function middleInside(e,t){let n=e,i=false;const r=(e.x+t.x)/2,s=(e.y+t.y)/2;do{if(n.y>s!==n.next.y>s&&n.next.y!==n.y&&r<(n.next.x-n.x)*(s-n.y)/(n.next.y-n.y)+n.x)i=!i;n=n.next}while(n!==e);return i}function splitPolygon(e,t){const n=new Node(e.i,e.x,e.y),i=new Node(t.i,t.x,t.y),r=e.next,s=t.prev;e.next=t;t.prev=e;n.next=r;r.prev=n;i.next=n;n.prev=i;s.next=i;i.prev=s;return i}function insertNode(e,t,n,i){const r=new Node(e,t,n);if(!i){r.prev=r;r.next=r}else{r.next=i.next;r.prev=i;i.next.prev=r;i.next=r}return r}function removeNode(e){e.next.prev=e.prev;e.prev.next=e.next;if(e.prevZ)e.prevZ.nextZ=e.nextZ;if(e.nextZ)e.nextZ.prevZ=e.prevZ}function Node(e,t,n){this.i=e;this.x=t;this.y=n;this.prev=null;this.next=null;this.z=0;this.prevZ=null;this.nextZ=null;this.steiner=false}function signedArea(n,i,r,s){let a=0;for(let e=i,t=r-s;e<r;e+=s){a+=(n[t]-n[e])*(n[e+1]+n[t+1]);t=e}return a}class ShapeUtils{static area(n){const i=n.length;let r=0;for(let e=i-1,t=0;t<i;e=t++){r+=n[e].x*n[t].y-n[t].x*n[e].y}return r*.5}static isClockWise(e){return ShapeUtils.area(e)<0}static triangulateShape(e,t){const n=[];const i=[];const r=[];removeDupEndPts(e);addContour(n,e);let s=e.length;t.forEach(removeDupEndPts);for(let e=0;e<t.length;e++){i.push(s);s+=t[e].length;addContour(n,t[e])}const a=Earcut.triangulate(n,i);for(let e=0;e<a.length;e+=3){r.push(a.slice(e,e+3))}return r}}function removeDupEndPts(e){const t=e.length;if(t>2&&e[t-1].equals(e[0])){e.pop()}}function addContour(t,n){for(let e=0;e<n.length;e++){t.push(n[e].x);t.push(n[e].y)}}class ExtrudeGeometry extends BufferGeometry{constructor(n=new Shape([new Vector2(.5,.5),new Vector2(-.5,.5),new Vector2(-.5,-.5),new Vector2(.5,-.5)]),$={}){super();this.type="ExtrudeGeometry";this.parameters={shapes:n,options:$};n=Array.isArray(n)?n:[n];const X=this;const j=[];const q=[];for(let e=0,t=n.length;e<t;e++){const r=n[e];i(r)}this.setAttribute("position",new Float32BufferAttribute(j,3));this.setAttribute("uv",new Float32BufferAttribute(q,2));this.computeVertexNormals();function i(B){const i=[];const F=$.curveSegments!==undefined?$.curveSegments:12;const h=$.steps!==undefined?$.steps:1;const n=$.depth!==undefined?$.depth:1;let r=$.bevelEnabled!==undefined?$.bevelEnabled:true;let t=$.bevelThickness!==undefined?$.bevelThickness:.2;let s=$.bevelSize!==undefined?$.bevelSize:t-.1;let a=$.bevelOffset!==undefined?$.bevelOffset:0;let d=$.bevelSegments!==undefined?$.bevelSegments:3;const e=$.extrudePath;const o=$.UVGenerator!==undefined?$.UVGenerator:WorldUVGenerator;let l,c=false;let u,f,p,m;if(e){l=e.getSpacedPoints(h);c=true;r=false;u=e.computeFrenetFrames(h,false);f=new Vector3;p=new Vector3;m=new Vector3}if(!r){d=0;t=0;s=0;a=0}const O=B.extractPoints(F);let g=O.shape;const _=O.holes;const V=!ShapeUtils.isClockWise(g);if(V){g=g.reverse();for(let e=0,t=_.length;e<t;e++){const I=_[e];if(ShapeUtils.isClockWise(I)){_[e]=I.reverse()}}}const v=ShapeUtils.triangulateShape(g,_);const y=g;for(let e=0,t=_.length;e<t;e++){const I=_[e];g=g.concat(I)}function x(e,t,n){if(!t)console.error("THREE.ExtrudeGeometry: vec does not exist");return e.clone().addScaledVector(t,n)}const M=g.length,S=v.length;function G(e,t,n){let i,r,s;const a=e.x-t.x,o=e.y-t.y;const l=n.x-e.x,c=n.y-e.y;const u=a*a+o*o;const h=a*c-o*l;if(Math.abs(h)>Number.EPSILON){const d=Math.sqrt(u);const f=Math.sqrt(l*l+c*c);const p=t.x-o/d;const m=t.y+a/d;const g=n.x-c/f;const _=n.y+l/f;const v=((g-p)*c-(_-m)*l)/(a*c-o*l);i=p+a*v-e.x;r=m+o*v-e.y;const y=i*i+r*r;if(y<=2){return new Vector2(i,r)}else{s=Math.sqrt(y/2)}}else{let e=false;if(a>Number.EPSILON){if(l>Number.EPSILON){e=true}}else{if(a<-Number.EPSILON){if(l<-Number.EPSILON){e=true}}else{if(Math.sign(o)===Math.sign(c)){e=true}}}if(e){i=-o;r=a;s=Math.sqrt(u)}else{i=a;r=o;s=Math.sqrt(u/2)}}return new Vector2(i/s,r/s)}const b=[];for(let e=0,t=y.length,n=t-1,i=e+1;e<t;e++,n++,i++){if(n===t)n=0;if(i===t)i=0;b[e]=G(y[e],y[n],y[i])}const T=[];let A,E=b.concat();for(let e=0,t=_.length;e<t;e++){const I=_[e];A=[];for(let e=0,t=I.length,n=t-1,i=e+1;e<t;e++,n++,i++){if(n===t)n=0;if(i===t)i=0;A[e]=G(I[e],I[n],I[i])}T.push(A);E=E.concat(A)}for(let e=0;e<d;e++){const U=e/d;const D=t*Math.cos(U*Math.PI/2);const w=s*Math.sin(U*Math.PI/2)+a;for(let e=0,t=y.length;e<t;e++){const N=x(y[e],b[e],w);C(N.x,N.y,-D)}for(let e=0,t=_.length;e<t;e++){const I=_[e];A=T[e];for(let e=0,t=I.length;e<t;e++){const N=x(I[e],A[e],w);C(N.x,N.y,-D)}}}const w=s+a;for(let e=0;e<M;e++){const N=r?x(g[e],E[e],w):g[e];if(!c){C(N.x,N.y,0)}else{p.copy(u.normals[0]).multiplyScalar(N.x);f.copy(u.binormals[0]).multiplyScalar(N.y);m.copy(l[0]).add(p).add(f);C(m.x,m.y,m.z)}}for(let t=1;t<=h;t++){for(let e=0;e<M;e++){const N=r?x(g[e],E[e],w):g[e];if(!c){C(N.x,N.y,n/h*t)}else{p.copy(u.normals[t]).multiplyScalar(N.x);f.copy(u.binormals[t]).multiplyScalar(N.y);m.copy(l[t]).add(p).add(f);C(m.x,m.y,m.z)}}}for(let e=d-1;e>=0;e--){const U=e/d;const D=t*Math.cos(U*Math.PI/2);const w=s*Math.sin(U*Math.PI/2)+a;for(let e=0,t=y.length;e<t;e++){const N=x(y[e],b[e],w);C(N.x,N.y,n+D)}for(let e=0,t=_.length;e<t;e++){const I=_[e];A=T[e];for(let e=0,t=I.length;e<t;e++){const N=x(I[e],A[e],w);if(!c){C(N.x,N.y,n+D)}else{C(N.x,N.y+l[h-1].y,l[h-1].x+D)}}}}z();k();function z(){const e=j.length/3;if(r){let e=0;let t=M*e;for(let e=0;e<S;e++){const n=v[e];R(n[2]+t,n[1]+t,n[0]+t)}e=h+d*2;t=M*e;for(let e=0;e<S;e++){const n=v[e];R(n[0]+t,n[1]+t,n[2]+t)}}else{for(let e=0;e<S;e++){const n=v[e];R(n[2],n[1],n[0])}for(let e=0;e<S;e++){const n=v[e];R(n[0]+M*h,n[1]+M*h,n[2]+M*h)}}X.addGroup(e,j.length/3-e,0)}function k(){const e=j.length/3;let n=0;H(y,n);n+=y.length;for(let t=0,e=_.length;t<e;t++){const e=_[t];H(e,n);n+=e.length}X.addGroup(e,j.length/3-e,1)}function H(e,i){let t=e.length;while(--t>=0){const r=t;let n=t-1;if(n<0)n=e.length-1;for(let e=0,t=h+d*2;e<t;e++){const s=M*e;const a=M*(e+1);const o=i+r+s,l=i+n+s,c=i+n+a,u=i+r+a;W(o,l,c,u)}}}function C(e,t,n){i.push(e);i.push(t);i.push(n)}function R(e,t,n){L(e);L(t);L(n);const i=j.length/3;const r=o.generateTopUV(X,j,i-3,i-2,i-1);P(r[0]);P(r[1]);P(r[2])}function W(e,t,n,i){L(e);L(t);L(i);L(t);L(n);L(i);const r=j.length/3;const s=o.generateSideWallUV(X,j,r-6,r-3,r-2,r-1);P(s[0]);P(s[1]);P(s[3]);P(s[1]);P(s[2]);P(s[3])}function L(e){j.push(i[e*3+0]);j.push(i[e*3+1]);j.push(i[e*3+2])}function P(e){q.push(e.x);q.push(e.y)}}}copy(e){super.copy(e);this.parameters=Object.assign({},e.parameters);return this}toJSON(){const e=super.toJSON();const t=this.parameters.shapes;const n=this.parameters.options;return toJSON$1(t,n,e)}static fromJSON(n,i){const r=[];for(let e=0,t=n.shapes.length;e<t;e++){const s=i[n.shapes[e]];r.push(s)}const e=n.options.extrudePath;if(e!==undefined){n.options.extrudePath=(new Curves[e.type]).fromJSON(e)}return new ExtrudeGeometry(r,n.options)}}const WorldUVGenerator={generateTopUV:function(e,t,n,i,r){const s=t[n*3];const a=t[n*3+1];const o=t[i*3];const l=t[i*3+1];const c=t[r*3];const u=t[r*3+1];return[new Vector2(s,a),new Vector2(o,l),new Vector2(c,u)]},generateSideWallUV:function(e,t,n,i,r,s){const a=t[n*3];const o=t[n*3+1];const l=t[n*3+2];const c=t[i*3];const u=t[i*3+1];const h=t[i*3+2];const d=t[r*3];const f=t[r*3+1];const p=t[r*3+2];const m=t[s*3];const g=t[s*3+1];const _=t[s*3+2];if(Math.abs(o-u)<Math.abs(a-c)){return[new Vector2(a,1-l),new Vector2(c,1-h),new Vector2(d,1-p),new Vector2(m,1-_)]}else{return[new Vector2(o,1-l),new Vector2(u,1-h),new Vector2(f,1-p),new Vector2(g,1-_)]}}};function toJSON$1(n,e,i){i.shapes=[];if(Array.isArray(n)){for(let e=0,t=n.length;e<t;e++){const r=n[e];i.shapes.push(r.uuid)}}else{i.shapes.push(n.uuid)}i.options=Object.assign({},e);if(e.extrudePath!==undefined)i.options.extrudePath=e.extrudePath.toJSON();return i}class IcosahedronGeometry extends PolyhedronGeometry{constructor(e=1,t=0){const n=(1+Math.sqrt(5))/2;const i=[-1,n,0,1,n,0,-1,-n,0,1,-n,0,0,-1,n,0,1,n,0,-1,-n,0,1,-n,n,0,-1,n,0,1,-n,0,-1,-n,0,1];const r=[0,11,5,0,5,1,0,1,7,0,7,10,0,10,11,1,5,9,5,11,4,11,10,2,10,7,6,7,1,8,3,9,4,3,4,2,3,2,6,3,6,8,3,8,9,4,9,5,2,4,11,6,2,10,8,6,7,9,8,1];super(i,r,e,t);this.type="IcosahedronGeometry";this.parameters={radius:e,detail:t}}static fromJSON(e){return new IcosahedronGeometry(e.radius,e.detail)}}class OctahedronGeometry extends PolyhedronGeometry{constructor(e=1,t=0){const n=[1,0,0,-1,0,0,0,1,0,0,-1,0,0,0,1,0,0,-1];const i=[0,2,4,0,4,3,0,3,5,0,5,2,1,2,5,1,5,3,1,3,4,1,4,2];super(n,i,e,t);this.type="OctahedronGeometry";this.parameters={radius:e,detail:t}}static fromJSON(e){return new OctahedronGeometry(e.radius,e.detail)}}class RingGeometry extends BufferGeometry{constructor(e=.5,t=1,n=32,i=1,r=0,s=Math.PI*2){super();this.type="RingGeometry";this.parameters={innerRadius:e,outerRadius:t,thetaSegments:n,phiSegments:i,thetaStart:r,thetaLength:s};n=Math.max(3,n);i=Math.max(1,i);const a=[];const o=[];const l=[];const c=[];let u=e;const h=(t-e)/i;const d=new Vector3;const f=new Vector2;for(let e=0;e<=i;e++){for(let e=0;e<=n;e++){const p=r+e/n*s;d.x=u*Math.cos(p);d.y=u*Math.sin(p);o.push(d.x,d.y,d.z);l.push(0,0,1);f.x=(d.x/t+1)/2;f.y=(d.y/t+1)/2;c.push(f.x,f.y)}u+=h}for(let e=0;e<i;e++){const m=e*(n+1);for(let e=0;e<n;e++){const p=e+m;const g=p;const _=p+n+1;const v=p+n+2;const y=p+1;a.push(g,_,y);a.push(_,v,y)}}this.setIndex(a);this.setAttribute("position",new Float32BufferAttribute(o,3));this.setAttribute("normal",new Float32BufferAttribute(l,3));this.setAttribute("uv",new Float32BufferAttribute(c,2))}copy(e){super.copy(e);this.parameters=Object.assign({},e.parameters);return this}static fromJSON(e){return new RingGeometry(e.innerRadius,e.outerRadius,e.thetaSegments,e.phiSegments,e.thetaStart,e.thetaLength)}}class ShapeGeometry extends BufferGeometry{constructor(t=new Shape([new Vector2(0,.5),new Vector2(-.5,-.5),new Vector2(.5,-.5)]),h=12){super();this.type="ShapeGeometry";this.parameters={shapes:t,curveSegments:h};const d=[];const f=[];const p=[];const m=[];let n=0;let g=0;if(Array.isArray(t)===false){i(t)}else{for(let e=0;e<t.length;e++){i(t[e]);this.addGroup(n,g,e);n+=g;g=0}}this.setIndex(d);this.setAttribute("position",new Float32BufferAttribute(f,3));this.setAttribute("normal",new Float32BufferAttribute(p,3));this.setAttribute("uv",new Float32BufferAttribute(m,2));function i(e){const n=f.length/3;const t=e.extractPoints(h);let i=t.shape;const r=t.holes;if(ShapeUtils.isClockWise(i)===false){i=i.reverse()}for(let e=0,t=r.length;e<t;e++){const a=r[e];if(ShapeUtils.isClockWise(a)===true){r[e]=a.reverse()}}const s=ShapeUtils.triangulateShape(i,r);for(let e=0,t=r.length;e<t;e++){const a=r[e];i=i.concat(a)}for(let t=0,e=i.length;t<e;t++){const e=i[t];f.push(e.x,e.y,0);p.push(0,0,1);m.push(e.x,e.y)}for(let e=0,t=s.length;e<t;e++){const o=s[e];const l=o[0]+n;const c=o[1]+n;const u=o[2]+n;d.push(l,c,u);g+=3}}}copy(e){super.copy(e);this.parameters=Object.assign({},e.parameters);return this}toJSON(){const e=super.toJSON();const t=this.parameters.shapes;return toJSON(t,e)}static fromJSON(n,i){const r=[];for(let e=0,t=n.shapes.length;e<t;e++){const s=i[n.shapes[e]];r.push(s)}return new ShapeGeometry(r,n.curveSegments)}}function toJSON(n,i){i.shapes=[];if(Array.isArray(n)){for(let e=0,t=n.length;e<t;e++){const r=n[e];i.shapes.push(r.uuid)}}else{i.shapes.push(n.uuid)}return i}class SphereGeometry extends BufferGeometry{constructor(n=1,i=32,r=16,s=0,a=Math.PI*2,o=0,l=Math.PI){super();this.type="SphereGeometry";this.parameters={radius:n,widthSegments:i,heightSegments:r,phiStart:s,phiLength:a,thetaStart:o,thetaLength:l};i=Math.max(3,Math.floor(i));r=Math.max(2,Math.floor(r));const c=Math.min(o+l,Math.PI);let u=0;const h=[];const d=new Vector3;const f=new Vector3;const p=[];const m=[];const g=[];const _=[];for(let e=0;e<=r;e++){const v=[];const y=e/r;let t=0;if(e===0&&o===0){t=.5/i}else if(e===r&&c===Math.PI){t=-.5/i}for(let e=0;e<=i;e++){const x=e/i;d.x=-n*Math.cos(s+x*a)*Math.sin(o+y*l);d.y=n*Math.cos(o+y*l);d.z=n*Math.sin(s+x*a)*Math.sin(o+y*l);m.push(d.x,d.y,d.z);f.copy(d).normalize();g.push(f.x,f.y,f.z);_.push(x+t,1-y);v.push(u++)}h.push(v)}for(let t=0;t<r;t++){for(let e=0;e<i;e++){const M=h[t][e+1];const S=h[t][e];const b=h[t+1][e];const T=h[t+1][e+1];if(t!==0||o>0)p.push(M,S,T);if(t!==r-1||c<Math.PI)p.push(S,b,T)}}this.setIndex(p);this.setAttribute("position",new Float32BufferAttribute(m,3));this.setAttribute("normal",new Float32BufferAttribute(g,3));this.setAttribute("uv",new Float32BufferAttribute(_,2))}copy(e){super.copy(e);this.parameters=Object.assign({},e.parameters);return this}static fromJSON(e){return new SphereGeometry(e.radius,e.widthSegments,e.heightSegments,e.phiStart,e.phiLength,e.thetaStart,e.thetaLength)}}class TetrahedronGeometry extends PolyhedronGeometry{constructor(e=1,t=0){const n=[1,1,1,-1,-1,1,-1,1,-1,1,-1,-1];const i=[2,1,0,0,3,2,1,3,0,2,3,1];super(n,i,e,t);this.type="TetrahedronGeometry";this.parameters={radius:e,detail:t}}static fromJSON(e){return new TetrahedronGeometry(e.radius,e.detail)}}class TorusGeometry extends BufferGeometry{constructor(n=1,i=.4,r=12,s=48,a=Math.PI*2){super();this.type="TorusGeometry";this.parameters={radius:n,tube:i,radialSegments:r,tubularSegments:s,arc:a};r=Math.floor(r);s=Math.floor(s);const o=[];const l=[];const c=[];const u=[];const h=new Vector3;const d=new Vector3;const f=new Vector3;for(let t=0;t<=r;t++){for(let e=0;e<=s;e++){const p=e/s*a;const m=t/r*Math.PI*2;d.x=(n+i*Math.cos(m))*Math.cos(p);d.y=(n+i*Math.cos(m))*Math.sin(p);d.z=i*Math.sin(m);l.push(d.x,d.y,d.z);h.x=n*Math.cos(p);h.y=n*Math.sin(p);f.subVectors(d,h).normalize();c.push(f.x,f.y,f.z);u.push(e/s);u.push(t/r)}}for(let t=1;t<=r;t++){for(let e=1;e<=s;e++){const g=(s+1)*t+e-1;const _=(s+1)*(t-1)+e-1;const v=(s+1)*(t-1)+e;const y=(s+1)*t+e;o.push(g,_,y);o.push(_,v,y)}}this.setIndex(o);this.setAttribute("position",new Float32BufferAttribute(l,3));this.setAttribute("normal",new Float32BufferAttribute(c,3));this.setAttribute("uv",new Float32BufferAttribute(u,2))}copy(e){super.copy(e);this.parameters=Object.assign({},e.parameters);return this}static fromJSON(e){return new TorusGeometry(e.radius,e.tube,e.radialSegments,e.tubularSegments,e.arc)}}class TorusKnotGeometry extends BufferGeometry{constructor(e=1,n=.4,i=64,r=8,s=2,a=3){super();this.type="TorusKnotGeometry";this.parameters={radius:e,tube:n,tubularSegments:i,radialSegments:r,p:s,q:a};i=Math.floor(i);r=Math.floor(r);const o=[];const l=[];const c=[];const u=[];const h=new Vector3;const d=new Vector3;const f=new Vector3;const p=new Vector3;const m=new Vector3;const g=new Vector3;const _=new Vector3;for(let t=0;t<=i;++t){const y=t/i*s*Math.PI*2;v(y,s,a,e,f);v(y+.01,s,a,e,p);g.subVectors(p,f);_.addVectors(p,f);m.crossVectors(g,_);_.crossVectors(m,g);m.normalize();_.normalize();for(let e=0;e<=r;++e){const x=e/r*Math.PI*2;const M=-n*Math.cos(x);const S=n*Math.sin(x);h.x=f.x+(M*_.x+S*m.x);h.y=f.y+(M*_.y+S*m.y);h.z=f.z+(M*_.z+S*m.z);l.push(h.x,h.y,h.z);d.subVectors(h,f).normalize();c.push(d.x,d.y,d.z);u.push(t/i);u.push(e/r)}}for(let t=1;t<=i;t++){for(let e=1;e<=r;e++){const b=(r+1)*(t-1)+(e-1);const T=(r+1)*t+(e-1);const A=(r+1)*t+e;const E=(r+1)*(t-1)+e;o.push(b,T,E);o.push(T,A,E)}}this.setIndex(o);this.setAttribute("position",new Float32BufferAttribute(l,3));this.setAttribute("normal",new Float32BufferAttribute(c,3));this.setAttribute("uv",new Float32BufferAttribute(u,2));function v(e,t,n,i,r){const s=Math.cos(e);const a=Math.sin(e);const o=n/t*e;const l=Math.cos(o);r.x=i*(2+l)*.5*s;r.y=i*(2+l)*a*.5;r.z=i*Math.sin(o)*.5}}copy(e){super.copy(e);this.parameters=Object.assign({},e.parameters);return this}static fromJSON(e){return new TorusKnotGeometry(e.radius,e.tube,e.tubularSegments,e.radialSegments,e.p,e.q)}}class TubeGeometry extends BufferGeometry{constructor(a=new QuadraticBezierCurve3(new Vector3(-1,-1,0),new Vector3(-1,1,0),new Vector3(1,1,0)),o=64,l=1,c=8,e=false){super();this.type="TubeGeometry";this.parameters={path:a,tubularSegments:o,radius:l,radialSegments:c,closed:e};const u=a.computeFrenetFrames(o,e);this.tangents=u.tangents;this.normals=u.normals;this.binormals=u.binormals;const h=new Vector3;const d=new Vector3;const n=new Vector2;let f=new Vector3;const p=[];const m=[];const i=[];const g=[];t();this.setIndex(g);this.setAttribute("position",new Float32BufferAttribute(p,3));this.setAttribute("normal",new Float32BufferAttribute(m,3));this.setAttribute("uv",new Float32BufferAttribute(i,2));function t(){for(let e=0;e<o;e++){r(e)}r(e===false?o:0);_();s()}function r(e){f=a.getPointAt(e/o,f);const t=u.normals[e];const n=u.binormals[e];for(let e=0;e<=c;e++){const i=e/c*Math.PI*2;const r=Math.sin(i);const s=-Math.cos(i);d.x=s*t.x+r*n.x;d.y=s*t.y+r*n.y;d.z=s*t.z+r*n.z;d.normalize();m.push(d.x,d.y,d.z);h.x=f.x+l*d.x;h.y=f.y+l*d.y;h.z=f.z+l*d.z;p.push(h.x,h.y,h.z)}}function s(){for(let t=1;t<=o;t++){for(let e=1;e<=c;e++){const n=(c+1)*(t-1)+(e-1);const i=(c+1)*t+(e-1);const r=(c+1)*t+e;const s=(c+1)*(t-1)+e;g.push(n,i,s);g.push(i,r,s)}}}function _(){for(let t=0;t<=o;t++){for(let e=0;e<=c;e++){n.x=t/o;n.y=e/c;i.push(n.x,n.y)}}}}copy(e){super.copy(e);this.parameters=Object.assign({},e.parameters);return this}toJSON(){const e=super.toJSON();e.path=this.parameters.path.toJSON();return e}static fromJSON(e){return new TubeGeometry((new Curves[e.path.type]).fromJSON(e.path),e.tubularSegments,e.radius,e.radialSegments,e.closed)}}class WireframeGeometry extends BufferGeometry{constructor(e=null){super();this.type="WireframeGeometry";this.parameters={geometry:e};if(e!==null){const i=[];const r=new Set;const s=new Vector3;const a=new Vector3;if(e.index!==null){const o=e.attributes.position;const l=e.index;let n=e.groups;if(n.length===0){n=[{start:0,count:l.count,materialIndex:0}]}for(let e=0,t=n.length;e<t;++e){const c=n[e];const u=c.start;const h=c.count;for(let t=u,e=u+h;t<e;t+=3){for(let e=0;e<3;e++){const d=l.getX(t+e);const f=l.getX(t+(e+1)%3);s.fromBufferAttribute(o,d);a.fromBufferAttribute(o,f);if(isUniqueEdge(s,a,r)===true){i.push(s.x,s.y,s.z);i.push(a.x,a.y,a.z)}}}}}else{const o=e.attributes.position;for(let t=0,e=o.count/3;t<e;t++){for(let e=0;e<3;e++){const d=3*t+e;const f=3*t+(e+1)%3;s.fromBufferAttribute(o,d);a.fromBufferAttribute(o,f);if(isUniqueEdge(s,a,r)===true){i.push(s.x,s.y,s.z);i.push(a.x,a.y,a.z)}}}}this.setAttribute("position",new Float32BufferAttribute(i,3))}}copy(e){super.copy(e);this.parameters=Object.assign({},e.parameters);return this}}function isUniqueEdge(e,t,n){const i=`${e.x},${e.y},${e.z}-${t.x},${t.y},${t.z}`;const r=`${t.x},${t.y},${t.z}-${e.x},${e.y},${e.z}`;if(n.has(i)===true||n.has(r)===true){return false}else{n.add(i);n.add(r);return true}}var Geometries=Object.freeze({__proto__:null,BoxGeometry:BoxGeometry,CapsuleGeometry:CapsuleGeometry,CircleGeometry:CircleGeometry,ConeGeometry:ConeGeometry,CylinderGeometry:CylinderGeometry,DodecahedronGeometry:DodecahedronGeometry,EdgesGeometry:EdgesGeometry,ExtrudeGeometry:ExtrudeGeometry,IcosahedronGeometry:IcosahedronGeometry,LatheGeometry:LatheGeometry,OctahedronGeometry:OctahedronGeometry,PlaneGeometry:PlaneGeometry,PolyhedronGeometry:PolyhedronGeometry,RingGeometry:RingGeometry,ShapeGeometry:ShapeGeometry,SphereGeometry:SphereGeometry,TetrahedronGeometry:TetrahedronGeometry,TorusGeometry:TorusGeometry,TorusKnotGeometry:TorusKnotGeometry,TubeGeometry:TubeGeometry,WireframeGeometry:WireframeGeometry});class ShadowMaterial extends Material{constructor(e){super();this.isShadowMaterial=true;this.type="ShadowMaterial";this.color=new Color(0);this.transparent=true;this.fog=true;this.setValues(e)}copy(e){super.copy(e);this.color.copy(e.color);this.fog=e.fog;return this}}class RawShaderMaterial extends ShaderMaterial{constructor(e){super(e);this.isRawShaderMaterial=true;this.type="RawShaderMaterial"}}class MeshStandardMaterial extends Material{constructor(e){super();this.isMeshStandardMaterial=true;this.defines={STANDARD:""};this.type="MeshStandardMaterial";this.color=new Color(16777215);this.roughness=1;this.metalness=0;this.map=null;this.lightMap=null;this.lightMapIntensity=1;this.aoMap=null;this.aoMapIntensity=1;this.emissive=new Color(0);this.emissiveIntensity=1;this.emissiveMap=null;this.bumpMap=null;this.bumpScale=1;this.normalMap=null;this.normalMapType=TangentSpaceNormalMap;this.normalScale=new Vector2(1,1);this.displacementMap=null;this.displacementScale=1;this.displacementBias=0;this.roughnessMap=null;this.metalnessMap=null;this.alphaMap=null;this.envMap=null;this.envMapRotation=new Euler;this.envMapIntensity=1;this.wireframe=false;this.wireframeLinewidth=1;this.wireframeLinecap="round";this.wireframeLinejoin="round";this.flatShading=false;this.fog=true;this.setValues(e)}copy(e){super.copy(e);this.defines={STANDARD:""};this.color.copy(e.color);this.roughness=e.roughness;this.metalness=e.metalness;this.map=e.map;this.lightMap=e.lightMap;this.lightMapIntensity=e.lightMapIntensity;this.aoMap=e.aoMap;this.aoMapIntensity=e.aoMapIntensity;this.emissive.copy(e.emissive);this.emissiveMap=e.emissiveMap;this.emissiveIntensity=e.emissiveIntensity;this.bumpMap=e.bumpMap;this.bumpScale=e.bumpScale;this.normalMap=e.normalMap;this.normalMapType=e.normalMapType;this.normalScale.copy(e.normalScale);this.displacementMap=e.displacementMap;this.displacementScale=e.displacementScale;this.displacementBias=e.displacementBias;this.roughnessMap=e.roughnessMap;this.metalnessMap=e.metalnessMap;this.alphaMap=e.alphaMap;this.envMap=e.envMap;this.envMapRotation.copy(e.envMapRotation);this.envMapIntensity=e.envMapIntensity;this.wireframe=e.wireframe;this.wireframeLinewidth=e.wireframeLinewidth;this.wireframeLinecap=e.wireframeLinecap;this.wireframeLinejoin=e.wireframeLinejoin;this.flatShading=e.flatShading;this.fog=e.fog;return this}}class MeshPhysicalMaterial extends MeshStandardMaterial{constructor(e){super();this.isMeshPhysicalMaterial=true;this.defines={STANDARD:"",PHYSICAL:""};this.type="MeshPhysicalMaterial";this.anisotropyRotation=0;this.anisotropyMap=null;this.clearcoatMap=null;this.clearcoatRoughness=0;this.clearcoatRoughnessMap=null;this.clearcoatNormalScale=new Vector2(1,1);this.clearcoatNormalMap=null;this.ior=1.5;Object.defineProperty(this,"reflectivity",{get:function(){return clamp(2.5*(this.ior-1)/(this.ior+1),0,1)},set:function(e){this.ior=(1+.4*e)/(1-.4*e)}});this.iridescenceMap=null;this.iridescenceIOR=1.3;this.iridescenceThicknessRange=[100,400];this.iridescenceThicknessMap=null;this.sheenColor=new Color(0);this.sheenColorMap=null;this.sheenRoughness=1;this.sheenRoughnessMap=null;this.transmissionMap=null;this.thickness=0;this.thicknessMap=null;this.attenuationDistance=Infinity;this.attenuationColor=new Color(1,1,1);this.specularIntensity=1;this.specularIntensityMap=null;this.specularColor=new Color(1,1,1);this.specularColorMap=null;this._anisotropy=0;this._clearcoat=0;this._dispersion=0;this._iridescence=0;this._sheen=0;this._transmission=0;this.setValues(e)}get anisotropy(){return this._anisotropy}set anisotropy(e){if(this._anisotropy>0!==e>0){this.version++}this._anisotropy=e}get clearcoat(){return this._clearcoat}set clearcoat(e){if(this._clearcoat>0!==e>0){this.version++}this._clearcoat=e}get iridescence(){return this._iridescence}set iridescence(e){if(this._iridescence>0!==e>0){this.version++}this._iridescence=e}get dispersion(){return this._dispersion}set dispersion(e){if(this._dispersion>0!==e>0){this.version++}this._dispersion=e}get sheen(){return this._sheen}set sheen(e){if(this._sheen>0!==e>0){this.version++}this._sheen=e}get transmission(){return this._transmission}set transmission(e){if(this._transmission>0!==e>0){this.version++}this._transmission=e}copy(e){super.copy(e);this.defines={STANDARD:"",PHYSICAL:""};this.anisotropy=e.anisotropy;this.anisotropyRotation=e.anisotropyRotation;this.anisotropyMap=e.anisotropyMap;this.clearcoat=e.clearcoat;this.clearcoatMap=e.clearcoatMap;this.clearcoatRoughness=e.clearcoatRoughness;this.clearcoatRoughnessMap=e.clearcoatRoughnessMap;this.clearcoatNormalMap=e.clearcoatNormalMap;this.clearcoatNormalScale.copy(e.clearcoatNormalScale);this.dispersion=e.dispersion;this.ior=e.ior;this.iridescence=e.iridescence;this.iridescenceMap=e.iridescenceMap;this.iridescenceIOR=e.iridescenceIOR;this.iridescenceThicknessRange=[...e.iridescenceThicknessRange];this.iridescenceThicknessMap=e.iridescenceThicknessMap;this.sheen=e.sheen;this.sheenColor.copy(e.sheenColor);this.sheenColorMap=e.sheenColorMap;this.sheenRoughness=e.sheenRoughness;this.sheenRoughnessMap=e.sheenRoughnessMap;this.transmission=e.transmission;this.transmissionMap=e.transmissionMap;this.thickness=e.thickness;this.thicknessMap=e.thicknessMap;this.attenuationDistance=e.attenuationDistance;this.attenuationColor.copy(e.attenuationColor);this.specularIntensity=e.specularIntensity;this.specularIntensityMap=e.specularIntensityMap;this.specularColor.copy(e.specularColor);this.specularColorMap=e.specularColorMap;return this}}class MeshPhongMaterial extends Material{constructor(e){super();this.isMeshPhongMaterial=true;this.type="MeshPhongMaterial";this.color=new Color(16777215);this.specular=new Color(1118481);this.shininess=30;this.map=null;this.lightMap=null;this.lightMapIntensity=1;this.aoMap=null;this.aoMapIntensity=1;this.emissive=new Color(0);this.emissiveIntensity=1;this.emissiveMap=null;this.bumpMap=null;this.bumpScale=1;this.normalMap=null;this.normalMapType=TangentSpaceNormalMap;this.normalScale=new Vector2(1,1);this.displacementMap=null;this.displacementScale=1;this.displacementBias=0;this.specularMap=null;this.alphaMap=null;this.envMap=null;this.envMapRotation=new Euler;this.combine=MultiplyOperation;this.reflectivity=1;this.refractionRatio=.98;this.wireframe=false;this.wireframeLinewidth=1;this.wireframeLinecap="round";this.wireframeLinejoin="round";this.flatShading=false;this.fog=true;this.setValues(e)}copy(e){super.copy(e);this.color.copy(e.color);this.specular.copy(e.specular);this.shininess=e.shininess;this.map=e.map;this.lightMap=e.lightMap;this.lightMapIntensity=e.lightMapIntensity;this.aoMap=e.aoMap;this.aoMapIntensity=e.aoMapIntensity;this.emissive.copy(e.emissive);this.emissiveMap=e.emissiveMap;this.emissiveIntensity=e.emissiveIntensity;this.bumpMap=e.bumpMap;this.bumpScale=e.bumpScale;this.normalMap=e.normalMap;this.normalMapType=e.normalMapType;this.normalScale.copy(e.normalScale);this.displacementMap=e.displacementMap;this.displacementScale=e.displacementScale;this.displacementBias=e.displacementBias;this.specularMap=e.specularMap;this.alphaMap=e.alphaMap;this.envMap=e.envMap;this.envMapRotation.copy(e.envMapRotation);this.combine=e.combine;this.reflectivity=e.reflectivity;this.refractionRatio=e.refractionRatio;this.wireframe=e.wireframe;this.wireframeLinewidth=e.wireframeLinewidth;this.wireframeLinecap=e.wireframeLinecap;this.wireframeLinejoin=e.wireframeLinejoin;this.flatShading=e.flatShading;this.fog=e.fog;return this}}class MeshToonMaterial extends Material{constructor(e){super();this.isMeshToonMaterial=true;this.defines={TOON:""};this.type="MeshToonMaterial";this.color=new Color(16777215);this.map=null;this.gradientMap=null;this.lightMap=null;this.lightMapIntensity=1;this.aoMap=null;this.aoMapIntensity=1;this.emissive=new Color(0);this.emissiveIntensity=1;this.emissiveMap=null;this.bumpMap=null;this.bumpScale=1;this.normalMap=null;this.normalMapType=TangentSpaceNormalMap;this.normalScale=new Vector2(1,1);this.displacementMap=null;this.displacementScale=1;this.displacementBias=0;this.alphaMap=null;this.wireframe=false;this.wireframeLinewidth=1;this.wireframeLinecap="round";this.wireframeLinejoin="round";this.fog=true;this.setValues(e)}copy(e){super.copy(e);this.color.copy(e.color);this.map=e.map;this.gradientMap=e.gradientMap;this.lightMap=e.lightMap;this.lightMapIntensity=e.lightMapIntensity;this.aoMap=e.aoMap;this.aoMapIntensity=e.aoMapIntensity;this.emissive.copy(e.emissive);this.emissiveMap=e.emissiveMap;this.emissiveIntensity=e.emissiveIntensity;this.bumpMap=e.bumpMap;this.bumpScale=e.bumpScale;this.normalMap=e.normalMap;this.normalMapType=e.normalMapType;this.normalScale.copy(e.normalScale);this.displacementMap=e.displacementMap;this.displacementScale=e.displacementScale;this.displacementBias=e.displacementBias;this.alphaMap=e.alphaMap;this.wireframe=e.wireframe;this.wireframeLinewidth=e.wireframeLinewidth;this.wireframeLinecap=e.wireframeLinecap;this.wireframeLinejoin=e.wireframeLinejoin;this.fog=e.fog;return this}}class MeshNormalMaterial extends Material{constructor(e){super();this.isMeshNormalMaterial=true;this.type="MeshNormalMaterial";this.bumpMap=null;this.bumpScale=1;this.normalMap=null;this.normalMapType=TangentSpaceNormalMap;this.normalScale=new Vector2(1,1);this.displacementMap=null;this.displacementScale=1;this.displacementBias=0;this.wireframe=false;this.wireframeLinewidth=1;this.flatShading=false;this.setValues(e)}copy(e){super.copy(e);this.bumpMap=e.bumpMap;this.bumpScale=e.bumpScale;this.normalMap=e.normalMap;this.normalMapType=e.normalMapType;this.normalScale.copy(e.normalScale);this.displacementMap=e.displacementMap;this.displacementScale=e.displacementScale;this.displacementBias=e.displacementBias;this.wireframe=e.wireframe;this.wireframeLinewidth=e.wireframeLinewidth;this.flatShading=e.flatShading;return this}}class MeshLambertMaterial extends Material{constructor(e){super();this.isMeshLambertMaterial=true;this.type="MeshLambertMaterial";this.color=new Color(16777215);this.map=null;this.lightMap=null;this.lightMapIntensity=1;this.aoMap=null;this.aoMapIntensity=1;this.emissive=new Color(0);this.emissiveIntensity=1;this.emissiveMap=null;this.bumpMap=null;this.bumpScale=1;this.normalMap=null;this.normalMapType=TangentSpaceNormalMap;this.normalScale=new Vector2(1,1);this.displacementMap=null;this.displacementScale=1;this.displacementBias=0;this.specularMap=null;this.alphaMap=null;this.envMap=null;this.envMapRotation=new Euler;this.combine=MultiplyOperation;this.reflectivity=1;this.refractionRatio=.98;this.wireframe=false;this.wireframeLinewidth=1;this.wireframeLinecap="round";this.wireframeLinejoin="round";this.flatShading=false;this.fog=true;this.setValues(e)}copy(e){super.copy(e);this.color.copy(e.color);this.map=e.map;this.lightMap=e.lightMap;this.lightMapIntensity=e.lightMapIntensity;this.aoMap=e.aoMap;this.aoMapIntensity=e.aoMapIntensity;this.emissive.copy(e.emissive);this.emissiveMap=e.emissiveMap;this.emissiveIntensity=e.emissiveIntensity;this.bumpMap=e.bumpMap;this.bumpScale=e.bumpScale;this.normalMap=e.normalMap;this.normalMapType=e.normalMapType;this.normalScale.copy(e.normalScale);this.displacementMap=e.displacementMap;this.displacementScale=e.displacementScale;this.displacementBias=e.displacementBias;this.specularMap=e.specularMap;this.alphaMap=e.alphaMap;this.envMap=e.envMap;this.envMapRotation.copy(e.envMapRotation);this.combine=e.combine;this.reflectivity=e.reflectivity;this.refractionRatio=e.refractionRatio;this.wireframe=e.wireframe;this.wireframeLinewidth=e.wireframeLinewidth;this.wireframeLinecap=e.wireframeLinecap;this.wireframeLinejoin=e.wireframeLinejoin;this.flatShading=e.flatShading;this.fog=e.fog;return this}}class MeshMatcapMaterial extends Material{constructor(e){super();this.isMeshMatcapMaterial=true;this.defines={MATCAP:""};this.type="MeshMatcapMaterial";this.color=new Color(16777215);this.matcap=null;this.map=null;this.bumpMap=null;this.bumpScale=1;this.normalMap=null;this.normalMapType=TangentSpaceNormalMap;this.normalScale=new Vector2(1,1);this.displacementMap=null;this.displacementScale=1;this.displacementBias=0;this.alphaMap=null;this.flatShading=false;this.fog=true;this.setValues(e)}copy(e){super.copy(e);this.defines={MATCAP:""};this.color.copy(e.color);this.matcap=e.matcap;this.map=e.map;this.bumpMap=e.bumpMap;this.bumpScale=e.bumpScale;this.normalMap=e.normalMap;this.normalMapType=e.normalMapType;this.normalScale.copy(e.normalScale);this.displacementMap=e.displacementMap;this.displacementScale=e.displacementScale;this.displacementBias=e.displacementBias;this.alphaMap=e.alphaMap;this.flatShading=e.flatShading;this.fog=e.fog;return this}}class LineDashedMaterial extends LineBasicMaterial{constructor(e){super();this.isLineDashedMaterial=true;this.type="LineDashedMaterial";this.scale=1;this.dashSize=3;this.gapSize=1;this.setValues(e)}copy(e){super.copy(e);this.scale=e.scale;this.dashSize=e.dashSize;this.gapSize=e.gapSize;return this}}function convertArray(e,t,n){if(!e||!n&&e.constructor===t)return e;if(typeof t.BYTES_PER_ELEMENT==="number"){return new t(e)}return Array.prototype.slice.call(e)}function isTypedArray(e){return ArrayBuffer.isView(e)&&!(e instanceof DataView)}function getKeyframeOrder(n){function e(e,t){return n[e]-n[t]}const t=n.length;const i=new Array(t);for(let e=0;e!==t;++e)i[e]=e;i.sort(e);return i}function sortedArray(n,i,r){const s=n.length;const a=new n.constructor(s);for(let e=0,t=0;t!==s;++e){const o=r[e]*i;for(let e=0;e!==i;++e){a[t++]=n[o+e]}}return a}function flattenJSON(e,t,n,i){let r=1,s=e[0];while(s!==undefined&&s[i]===undefined){s=e[r++]}if(s===undefined)return;let a=s[i];if(a===undefined)return;if(Array.isArray(a)){do{a=s[i];if(a!==undefined){t.push(s.time);n.push.apply(n,a)}s=e[r++]}while(s!==undefined)}else if(a.toArray!==undefined){do{a=s[i];if(a!==undefined){t.push(s.time);a.toArray(n,n.length)}s=e[r++]}while(s!==undefined)}else{do{a=s[i];if(a!==undefined){t.push(s.time);n.push(a)}s=e[r++]}while(s!==undefined)}}function subclip(e,t,n,i,r=30){const s=e.clone();s.name=t;const a=[];for(let e=0;e<s.tracks.length;++e){const l=s.tracks[e];const c=l.getValueSize();const u=[];const h=[];for(let t=0;t<l.times.length;++t){const d=l.times[t]*r;if(d<n||d>=i)continue;u.push(l.times[t]);for(let e=0;e<c;++e){h.push(l.values[t*c+e])}}if(u.length===0)continue;l.times=convertArray(u,l.times.constructor);l.values=convertArray(h,l.values.constructor);a.push(l)}s.tracks=a;let o=Infinity;for(let e=0;e<s.tracks.length;++e){if(o>s.tracks[e].times[0]){o=s.tracks[e].times[0]}}for(let e=0;e<s.tracks.length;++e){s.tracks[e].shift(-1*o)}s.resetDuration();return s}function makeClipAdditive(r,e=0,s=r,t=30){if(t<=0)t=30;const n=s.tracks.length;const a=e/t;for(let i=0;i<n;++i){const o=s.tracks[i];const l=o.ValueTypeName;if(l==="bool"||l==="string")continue;const c=r.tracks.find(function(e){return e.name===o.name&&e.ValueTypeName===l});if(c===undefined)continue;let e=0;const u=o.getValueSize();if(o.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline){e=u/3}let t=0;const h=c.getValueSize();if(c.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline){t=h/3}const d=o.times.length-1;let n;if(a<=o.times[0]){const p=e;const m=u-e;n=o.values.slice(p,m)}else if(a>=o.times[d]){const p=d*u+e;const m=p+u-e;n=o.values.slice(p,m)}else{const g=o.createInterpolant();const p=e;const m=u-e;g.evaluate(a);n=g.resultBuffer.slice(p,m)}if(l==="quaternion"){const _=(new Quaternion).fromArray(n).normalize().conjugate();_.toArray(n)}const f=c.times.length;for(let e=0;e<f;++e){const v=e*h+t;if(l==="quaternion"){Quaternion.multiplyQuaternionsFlat(c.values,v,n,0,c.values,v)}else{const y=h-t*2;for(let e=0;e<y;++e){c.values[v+e]-=n[e]}}}}r.blendMode=AdditiveAnimationBlendMode;return r}const AnimationUtils={convertArray:convertArray,isTypedArray:isTypedArray,getKeyframeOrder:getKeyframeOrder,sortedArray:sortedArray,flattenJSON:flattenJSON,subclip:subclip,makeClipAdditive:makeClipAdditive};class Interpolant{constructor(e,t,n,i){this.parameterPositions=e;this._cachedIndex=0;this.resultBuffer=i!==undefined?i:new t.constructor(n);this.sampleValues=t;this.valueSize=n;this.settings=null;this.DefaultSettings_={}}evaluate(t){const n=this.parameterPositions;let i=this._cachedIndex,r=n[i],s=n[i-1];e:{t:{let e;n:{i:if(!(t<r)){for(let e=i+2;;){if(r===undefined){if(t<s)break i;i=n.length;this._cachedIndex=i;return this.copySampleValue_(i-1)}if(i===e)break;s=r;r=n[++i];if(t<r){break t}}e=n.length;break n}if(!(t>=s)){const a=n[1];if(t<a){i=2;s=a}for(let e=i-2;;){if(s===undefined){this._cachedIndex=0;return this.copySampleValue_(0)}if(i===e)break;r=s;s=n[--i-1];if(t>=s){break t}}e=i;i=0;break n}break e}while(i<e){const o=i+e>>>1;if(t<n[o]){e=o}else{i=o+1}}r=n[i];s=n[i-1];if(s===undefined){this._cachedIndex=0;return this.copySampleValue_(0)}if(r===undefined){i=n.length;this._cachedIndex=i;return this.copySampleValue_(i-1)}}this._cachedIndex=i;this.intervalChanged_(i,s,r)}return this.interpolate_(i,s,t,r)}getSettings_(){return this.settings||this.DefaultSettings_}copySampleValue_(e){const t=this.resultBuffer,n=this.sampleValues,i=this.valueSize,r=e*i;for(let e=0;e!==i;++e){t[e]=n[r+e]}return t}interpolate_(){throw new Error("call to abstract method")}intervalChanged_(){}}class CubicInterpolant extends Interpolant{constructor(e,t,n,i){super(e,t,n,i);this._weightPrev=-0;this._offsetPrev=-0;this._weightNext=-0;this._offsetNext=-0;this.DefaultSettings_={endingStart:ZeroCurvatureEnding,endingEnd:ZeroCurvatureEnding}}intervalChanged_(e,t,n){const i=this.parameterPositions;let r=e-2,s=e+1,a=i[r],o=i[s];if(a===undefined){switch(this.getSettings_().endingStart){case ZeroSlopeEnding:r=e;a=2*t-n;break;case WrapAroundEnding:r=i.length-2;a=t+i[r]-i[r+1];break;default:r=e;a=n}}if(o===undefined){switch(this.getSettings_().endingEnd){case ZeroSlopeEnding:s=e;o=2*n-t;break;case WrapAroundEnding:s=1;o=n+i[1]-i[0];break;default:s=e-1;o=t}}const l=(n-t)*.5,c=this.valueSize;this._weightPrev=l/(t-a);this._weightNext=l/(o-n);this._offsetPrev=r*c;this._offsetNext=s*c}interpolate_(e,t,n,i){const r=this.resultBuffer,s=this.sampleValues,a=this.valueSize,o=e*a,l=o-a,c=this._offsetPrev,u=this._offsetNext,h=this._weightPrev,d=this._weightNext,f=(n-t)/(i-t),p=f*f,m=p*f;const g=-h*m+2*h*p-h*f;const _=(1+h)*m+(-1.5-2*h)*p+(-.5+h)*f+1;const v=(-1-d)*m+(1.5+d)*p+.5*f;const y=d*m-d*p;for(let e=0;e!==a;++e){r[e]=g*s[c+e]+_*s[l+e]+v*s[o+e]+y*s[u+e]}return r}}class LinearInterpolant extends Interpolant{constructor(e,t,n,i){super(e,t,n,i)}interpolate_(e,t,n,i){const r=this.resultBuffer,s=this.sampleValues,a=this.valueSize,o=e*a,l=o-a,c=(n-t)/(i-t),u=1-c;for(let e=0;e!==a;++e){r[e]=s[l+e]*u+s[o+e]*c}return r}}class DiscreteInterpolant extends Interpolant{constructor(e,t,n,i){super(e,t,n,i)}interpolate_(e){return this.copySampleValue_(e-1)}}class KeyframeTrack{constructor(e,t,n,i){if(e===undefined)throw new Error("THREE.KeyframeTrack: track name is undefined");if(t===undefined||t.length===0)throw new Error("THREE.KeyframeTrack: no keyframes in track named "+e);this.name=e;this.times=convertArray(t,this.TimeBufferType);this.values=convertArray(n,this.ValueBufferType);this.setInterpolation(i||this.DefaultInterpolation)}static toJSON(e){const t=e.constructor;let n;if(t.toJSON!==this.toJSON){n=t.toJSON(e)}else{n={name:e.name,times:convertArray(e.times,Array),values:convertArray(e.values,Array)};const i=e.getInterpolation();if(i!==e.DefaultInterpolation){n.interpolation=i}}n.type=e.ValueTypeName;return n}InterpolantFactoryMethodDiscrete(e){return new DiscreteInterpolant(this.times,this.values,this.getValueSize(),e)}InterpolantFactoryMethodLinear(e){return new LinearInterpolant(this.times,this.values,this.getValueSize(),e)}InterpolantFactoryMethodSmooth(e){return new CubicInterpolant(this.times,this.values,this.getValueSize(),e)}setInterpolation(e){let t;switch(e){case InterpolateDiscrete:t=this.InterpolantFactoryMethodDiscrete;break;case InterpolateLinear:t=this.InterpolantFactoryMethodLinear;break;case InterpolateSmooth:t=this.InterpolantFactoryMethodSmooth;break}if(t===undefined){const n="unsupported interpolation for "+this.ValueTypeName+" keyframe track named "+this.name;if(this.createInterpolant===undefined){if(e!==this.DefaultInterpolation){this.setInterpolation(this.DefaultInterpolation)}else{throw new Error(n)}}console.warn("THREE.KeyframeTrack:",n);return this}this.createInterpolant=t;return this}getInterpolation(){switch(this.createInterpolant){case this.InterpolantFactoryMethodDiscrete:return InterpolateDiscrete;case this.InterpolantFactoryMethodLinear:return InterpolateLinear;case this.InterpolantFactoryMethodSmooth:return InterpolateSmooth}}getValueSize(){return this.values.length/this.times.length}shift(n){if(n!==0){const i=this.times;for(let e=0,t=i.length;e!==t;++e){i[e]+=n}}return this}scale(n){if(n!==1){const i=this.times;for(let e=0,t=i.length;e!==t;++e){i[e]*=n}}return this}trim(e,t){const n=this.times,i=n.length;let r=0,s=i-1;while(r!==i&&n[r]<e){++r}while(s!==-1&&n[s]>t){--s}++s;if(r!==0||s!==i){if(r>=s){s=Math.max(s,1);r=s-1}const a=this.getValueSize();this.times=n.slice(r,s);this.values=this.values.slice(r*a,s*a)}return this}validate(){let n=true;const e=this.getValueSize();if(e-Math.floor(e)!==0){console.error("THREE.KeyframeTrack: Invalid value size in track.",this);n=false}const t=this.times,i=this.values,r=t.length;if(r===0){console.error("THREE.KeyframeTrack: Track is empty.",this);n=false}let s=null;for(let e=0;e!==r;e++){const a=t[e];if(typeof a==="number"&&isNaN(a)){console.error("THREE.KeyframeTrack: Time is not a valid number.",this,e,a);n=false;break}if(s!==null&&s>a){console.error("THREE.KeyframeTrack: Out of order keys.",this,e,a,s);n=false;break}s=a}if(i!==undefined){if(isTypedArray(i)){for(let e=0,t=i.length;e!==t;++e){const o=i[e];if(isNaN(o)){console.error("THREE.KeyframeTrack: Value is not a valid number.",this,e,o);n=false;break}}}}return n}optimize(){const n=this.times.slice(),i=this.values.slice(),r=this.getValueSize(),s=this.getInterpolation()===InterpolateSmooth,a=n.length-1;let o=1;for(let e=1;e<a;++e){let t=false;const l=n[e];const c=n[e+1];if(l!==c&&(e!==1||l!==n[0])){if(!s){const u=e*r,h=u-r,d=u+r;for(let e=0;e!==r;++e){const f=i[u+e];if(f!==i[h+e]||f!==i[d+e]){t=true;break}}}else{t=true}}if(t){if(e!==o){n[o]=n[e];const p=e*r,m=o*r;for(let e=0;e!==r;++e){i[m+e]=i[p+e]}}++o}}if(a>0){n[o]=n[a];for(let e=a*r,t=o*r,n=0;n!==r;++n){i[t+n]=i[e+n]}++o}if(o!==n.length){this.times=n.slice(0,o);this.values=i.slice(0,o*r)}else{this.times=n;this.values=i}return this}clone(){const e=this.times.slice();const t=this.values.slice();const n=this.constructor;const i=new n(this.name,e,t);i.createInterpolant=this.createInterpolant;return i}}KeyframeTrack.prototype.TimeBufferType=Float32Array;KeyframeTrack.prototype.ValueBufferType=Float32Array;KeyframeTrack.prototype.DefaultInterpolation=InterpolateLinear;class BooleanKeyframeTrack extends KeyframeTrack{}BooleanKeyframeTrack.prototype.ValueTypeName="bool";BooleanKeyframeTrack.prototype.ValueBufferType=Array;BooleanKeyframeTrack.prototype.DefaultInterpolation=InterpolateDiscrete;BooleanKeyframeTrack.prototype.InterpolantFactoryMethodLinear=undefined;BooleanKeyframeTrack.prototype.InterpolantFactoryMethodSmooth=undefined;class ColorKeyframeTrack extends KeyframeTrack{}ColorKeyframeTrack.prototype.ValueTypeName="color";class NumberKeyframeTrack extends KeyframeTrack{}NumberKeyframeTrack.prototype.ValueTypeName="number";class QuaternionLinearInterpolant extends Interpolant{constructor(e,t,n,i){super(e,t,n,i)}interpolate_(e,t,n,i){const r=this.resultBuffer,s=this.sampleValues,a=this.valueSize,o=(n-t)/(i-t);let l=e*a;for(let e=l+a;l!==e;l+=4){Quaternion.slerpFlat(r,0,s,l-a,s,l,o)}return r}}class QuaternionKeyframeTrack extends KeyframeTrack{InterpolantFactoryMethodLinear(e){return new QuaternionLinearInterpolant(this.times,this.values,this.getValueSize(),e)}}QuaternionKeyframeTrack.prototype.ValueTypeName="quaternion";QuaternionKeyframeTrack.prototype.DefaultInterpolation=InterpolateLinear;QuaternionKeyframeTrack.prototype.InterpolantFactoryMethodSmooth=undefined;class StringKeyframeTrack extends KeyframeTrack{}StringKeyframeTrack.prototype.ValueTypeName="string";StringKeyframeTrack.prototype.ValueBufferType=Array;StringKeyframeTrack.prototype.DefaultInterpolation=InterpolateDiscrete;StringKeyframeTrack.prototype.InterpolantFactoryMethodLinear=undefined;StringKeyframeTrack.prototype.InterpolantFactoryMethodSmooth=undefined;class VectorKeyframeTrack extends KeyframeTrack{}VectorKeyframeTrack.prototype.ValueTypeName="vector";class AnimationClip{constructor(e="",t=-1,n=[],i=NormalAnimationBlendMode){this.name=e;this.tracks=n;this.duration=t;this.blendMode=i;this.uuid=generateUUID();if(this.duration<0){this.resetDuration()}}static parse(e){const n=[],i=e.tracks,r=1/(e.fps||1);for(let e=0,t=i.length;e!==t;++e){n.push(parseKeyframeTrack(i[e]).scale(r))}const t=new this(e.name,e.duration,n,e.blendMode);t.uuid=e.uuid;return t}static toJSON(e){const n=[],i=e.tracks;const t={name:e.name,duration:e.duration,tracks:n,uuid:e.uuid,blendMode:e.blendMode};for(let e=0,t=i.length;e!==t;++e){n.push(KeyframeTrack.toJSON(i[e]))}return t}static CreateFromMorphTargetSequence(e,i,r,s){const a=i.length;const o=[];for(let n=0;n<a;n++){let e=[];let t=[];e.push((n+a-1)%a,n,(n+1)%a);t.push(0,1,0);const l=getKeyframeOrder(e);e=sortedArray(e,1,l);t=sortedArray(t,1,l);if(!s&&e[0]===0){e.push(a);t.push(t[0])}o.push(new NumberKeyframeTrack(".morphTargetInfluences["+i[n].name+"]",e,t).scale(1/r))}return new this(e,-1,o)}static findByName(e,t){let n=e;if(!Array.isArray(e)){const i=e;n=i.geometry&&i.geometry.animations||i.animations}for(let e=0;e<n.length;e++){if(n[e].name===t){return n[e]}}return null}static CreateClipsFromMorphTargetSequences(n,e,t){const i={};const r=/^([\w-]*?)([\d]+)$/;for(let e=0,t=n.length;e<t;e++){const a=n[e];const o=a.name.match(r);if(o&&o.length>1){const l=o[1];let e=i[l];if(!e){i[l]=e=[]}e.push(a)}}const s=[];for(const l in i){s.push(this.CreateFromMorphTargetSequence(l,i[l],e,t))}return s}static parseAnimation(e,t){if(!e){console.error("THREE.AnimationClip: No animation in JSONLoader data.");return null}const n=function(e,t,n,i,r){if(n.length!==0){const s=[];const a=[];flattenJSON(n,s,a,i);if(s.length!==0){r.push(new e(t,s,a))}}};const i=[];const r=e.name||"default";const s=e.fps||30;const a=e.blendMode;let o=e.length||-1;const l=e.hierarchy||[];for(let e=0;e<l.length;e++){const u=l[e].keys;if(!u||u.length===0)continue;if(u[0].morphTargets){const h={};let t;for(t=0;t<u.length;t++){if(u[t].morphTargets){for(let e=0;e<u[t].morphTargets.length;e++){h[u[t].morphTargets[e]]=-1}}}for(const d in h){const f=[];const p=[];for(let e=0;e!==u[t].morphTargets.length;++e){const m=u[t];f.push(m.time);p.push(m.morphTarget===d?1:0)}i.push(new NumberKeyframeTrack(".morphTargetInfluence["+d+"]",f,p))}o=h.length*s}else{const g=".bones["+t[e].name+"]";n(VectorKeyframeTrack,g+".position",u,"pos",i);n(QuaternionKeyframeTrack,g+".quaternion",u,"rot",i);n(VectorKeyframeTrack,g+".scale",u,"scl",i)}}if(i.length===0){return null}const c=new this(r,o,i,a);return c}resetDuration(){const n=this.tracks;let i=0;for(let e=0,t=n.length;e!==t;++e){const r=this.tracks[e];i=Math.max(i,r.times[r.times.length-1])}this.duration=i;return this}trim(){for(let e=0;e<this.tracks.length;e++){this.tracks[e].trim(0,this.duration)}return this}validate(){let t=true;for(let e=0;e<this.tracks.length;e++){t=t&&this.tracks[e].validate()}return t}optimize(){for(let e=0;e<this.tracks.length;e++){this.tracks[e].optimize()}return this}clone(){const t=[];for(let e=0;e<this.tracks.length;e++){t.push(this.tracks[e].clone())}return new this.constructor(this.name,this.duration,t,this.blendMode)}toJSON(){return this.constructor.toJSON(this)}}function getTrackTypeForValueTypeName(e){switch(e.toLowerCase()){case"scalar":case"double":case"float":case"number":case"integer":return NumberKeyframeTrack;case"vector":case"vector2":case"vector3":case"vector4":return VectorKeyframeTrack;case"color":return ColorKeyframeTrack;case"quaternion":return QuaternionKeyframeTrack;case"bool":case"boolean":return BooleanKeyframeTrack;case"string":return StringKeyframeTrack}throw new Error("THREE.KeyframeTrack: Unsupported typeName: "+e)}function parseKeyframeTrack(e){if(e.type===undefined){throw new Error("THREE.KeyframeTrack: track type undefined, can not parse")}const t=getTrackTypeForValueTypeName(e.type);if(e.times===undefined){const n=[],i=[];flattenJSON(e.keys,n,i,"value");e.times=n;e.values=i}if(t.parse!==undefined){return t.parse(e)}else{return new t(e.name,e.times,e.values,e.interpolation)}}const Cache={enabled:false,files:{},add:function(e,t){if(this.enabled===false)return;this.files[e]=t},get:function(e){if(this.enabled===false)return;return this.files[e]},remove:function(e){delete this.files[e]},clear:function(){this.files={}}};class LoadingManager{constructor(e,t,n){const i=this;let r=false;let s=0;let a=0;let o=undefined;const l=[];this.onStart=undefined;this.onLoad=e;this.onProgress=t;this.onError=n;this.itemStart=function(e){a++;if(r===false){if(i.onStart!==undefined){i.onStart(e,s,a)}}r=true};this.itemEnd=function(e){s++;if(i.onProgress!==undefined){i.onProgress(e,s,a)}if(s===a){r=false;if(i.onLoad!==undefined){i.onLoad()}}};this.itemError=function(e){if(i.onError!==undefined){i.onError(e)}};this.resolveURL=function(e){if(o){return o(e)}return e};this.setURLModifier=function(e){o=e;return this};this.addHandler=function(e,t){l.push(e,t);return this};this.removeHandler=function(e){const t=l.indexOf(e);if(t!==-1){l.splice(t,2)}return this};this.getHandler=function(n){for(let e=0,t=l.length;e<t;e+=2){const i=l[e];const r=l[e+1];if(i.global)i.lastIndex=0;if(i.test(n)){return r}}return null}}}const DefaultLoadingManager=new LoadingManager;class Loader{constructor(e){this.manager=e!==undefined?e:DefaultLoadingManager;this.crossOrigin="anonymous";this.withCredentials=false;this.path="";this.resourcePath="";this.requestHeader={}}load(){}loadAsync(n,i){const r=this;return new Promise(function(e,t){r.load(n,e,i,t)})}parse(){}setCrossOrigin(e){this.crossOrigin=e;return this}setWithCredentials(e){this.withCredentials=e;return this}setPath(e){this.path=e;return this}setResourcePath(e){this.resourcePath=e;return this}setRequestHeader(e){this.requestHeader=e;return this}}Loader.DEFAULT_MATERIAL_NAME="__DEFAULT";const loading={};class HttpError extends Error{constructor(e,t){super(e);this.response=t}}class FileLoader extends Loader{constructor(e){super(e)}load(s,e,t,n){if(s===undefined)s="";if(this.path!==undefined)s=this.path+s;s=this.manager.resolveURL(s);const i=Cache.get(s);if(i!==undefined){this.manager.itemStart(s);setTimeout(()=>{if(e)e(i);this.manager.itemEnd(s)},0);return i}if(loading[s]!==undefined){loading[s].push({onLoad:e,onProgress:t,onError:n});return}loading[s]=[];loading[s].push({onLoad:e,onProgress:t,onError:n});const r=new Request(s,{headers:new Headers(this.requestHeader),credentials:this.withCredentials?"include":"same-origin"});const a=this.mimeType;const o=this.responseType;fetch(r).then(e=>{if(e.status===200||e.status===0){if(e.status===0){console.warn("THREE.FileLoader: HTTP Status 0 received.")}if(typeof ReadableStream==="undefined"||e.body===undefined||e.body.getReader===undefined){return e}const o=loading[s];const t=e.body.getReader();const n=e.headers.get("Content-Length")||e.headers.get("X-File-Size");const l=n?parseInt(n):0;const c=l!==0;let a=0;const i=new ReadableStream({start(r){s();function s(){t.read().then(({done:e,value:t})=>{if(e){r.close()}else{a+=t.byteLength;const n=new ProgressEvent("progress",{lengthComputable:c,loaded:a,total:l});for(let e=0,t=o.length;e<t;e++){const i=o[e];if(i.onProgress)i.onProgress(n)}r.enqueue(t);s()}})}}});return new Response(i)}else{throw new HttpError(`fetch for "${e.url}" responded with ${e.status}: ${e.statusText}`,e)}}).then(e=>{switch(o){case"arraybuffer":return e.arrayBuffer();case"blob":return e.blob();case"document":return e.text().then(e=>{const t=new DOMParser;return t.parseFromString(e,a)});case"json":return e.json();default:if(a===undefined){return e.text()}else{const t=/charset="?([^;"\s]*)"?/i;const n=t.exec(a);const i=n&&n[1]?n[1].toLowerCase():undefined;const r=new TextDecoder(i);return e.arrayBuffer().then(e=>r.decode(e))}}}).then(n=>{Cache.add(s,n);const i=loading[s];delete loading[s];for(let e=0,t=i.length;e<t;e++){const r=i[e];if(r.onLoad)r.onLoad(n)}}).catch(n=>{const i=loading[s];if(i===undefined){this.manager.itemError(s);throw n}delete loading[s];for(let e=0,t=i.length;e<t;e++){const r=i[e];if(r.onError)r.onError(n)}this.manager.itemError(s)}).finally(()=>{this.manager.itemEnd(s)});this.manager.itemStart(s)}setResponseType(e){this.responseType=e;return this}setMimeType(e){this.mimeType=e;return this}}class AnimationLoader extends Loader{constructor(e){super(e)}load(t,n,e,i){const r=this;const s=new FileLoader(this.manager);s.setPath(this.path);s.setRequestHeader(this.requestHeader);s.setWithCredentials(this.withCredentials);s.load(t,function(e){try{n(r.parse(JSON.parse(e)))}catch(e){if(i){i(e)}else{console.error(e)}r.manager.itemError(t)}},e,i)}parse(t){const n=[];for(let e=0;e<t.length;e++){const i=AnimationClip.parse(t[e]);n.push(i)}return n}}class CompressedTextureLoader extends Loader{constructor(e){super(e)}load(i,r,e,t){const s=this;const a=[];const o=new CompressedTexture;const l=new FileLoader(this.manager);l.setPath(this.path);l.setResponseType("arraybuffer");l.setRequestHeader(this.requestHeader);l.setWithCredentials(s.withCredentials);let c=0;function n(n){l.load(i[n],function(e){const t=s.parse(e,true);a[n]={width:t.width,height:t.height,format:t.format,mipmaps:t.mipmaps};c+=1;if(c===6){if(t.mipmapCount===1)o.minFilter=LinearFilter;o.image=a;o.format=t.format;o.needsUpdate=true;if(r)r(o)}},e,t)}if(Array.isArray(i)){for(let e=0,t=i.length;e<t;++e){n(e)}}else{l.load(i,function(e){const n=s.parse(e,true);if(n.isCubemap){const i=n.mipmaps.length/n.mipmapCount;for(let t=0;t<i;t++){a[t]={mipmaps:[]};for(let e=0;e<n.mipmapCount;e++){a[t].mipmaps.push(n.mipmaps[t*n.mipmapCount+e]);a[t].format=n.format;a[t].width=n.width;a[t].height=n.height}}o.image=a}else{o.image.width=n.width;o.image.height=n.height;o.mipmaps=n.mipmaps}if(n.mipmapCount===1){o.minFilter=LinearFilter}o.format=n.format;o.needsUpdate=true;if(r)r(o)},e,t)}return o}}class ImageLoader extends Loader{constructor(e){super(e)}load(t,e,n,i){if(this.path!==undefined)t=this.path+t;t=this.manager.resolveURL(t);const r=this;const s=Cache.get(t);if(s!==undefined){r.manager.itemStart(t);setTimeout(function(){if(e)e(s);r.manager.itemEnd(t)},0);return s}const a=createElementNS("img");function o(){c();Cache.add(t,this);if(e)e(this);r.manager.itemEnd(t)}function l(e){c();if(i)i(e);r.manager.itemError(t);r.manager.itemEnd(t)}function c(){a.removeEventListener("load",o,false);a.removeEventListener("error",l,false)}a.addEventListener("load",o,false);a.addEventListener("error",l,false);if(t.slice(0,5)!=="data:"){if(this.crossOrigin!==undefined)a.crossOrigin=this.crossOrigin}r.manager.itemStart(t);a.src=t;return a}}class CubeTextureLoader extends Loader{constructor(e){super(e)}load(n,i,e,r){const s=new CubeTexture;s.colorSpace=SRGBColorSpace;const a=new ImageLoader(this.manager);a.setCrossOrigin(this.crossOrigin);a.setPath(this.path);let o=0;function t(t){a.load(n[t],function(e){s.images[t]=e;o++;if(o===6){s.needsUpdate=true;if(i)i(s)}},undefined,r)}for(let e=0;e<n.length;++e){t(e)}return s}}class DataTextureLoader extends Loader{constructor(e){super(e)}load(e,n,t,i){const r=this;const s=new DataTexture;const a=new FileLoader(this.manager);a.setResponseType("arraybuffer");a.setRequestHeader(this.requestHeader);a.setPath(this.path);a.setWithCredentials(r.withCredentials);a.load(e,function(e){let t;try{t=r.parse(e)}catch(e){if(i!==undefined){i(e)}else{console.error(e);return}}if(t.image!==undefined){s.image=t.image}else if(t.data!==undefined){s.image.width=t.width;s.image.height=t.height;s.image.data=t.data}s.wrapS=t.wrapS!==undefined?t.wrapS:ClampToEdgeWrapping;s.wrapT=t.wrapT!==undefined?t.wrapT:ClampToEdgeWrapping;s.magFilter=t.magFilter!==undefined?t.magFilter:LinearFilter;s.minFilter=t.minFilter!==undefined?t.minFilter:LinearFilter;s.anisotropy=t.anisotropy!==undefined?t.anisotropy:1;if(t.colorSpace!==undefined){s.colorSpace=t.colorSpace}if(t.flipY!==undefined){s.flipY=t.flipY}if(t.format!==undefined){s.format=t.format}if(t.type!==undefined){s.type=t.type}if(t.mipmaps!==undefined){s.mipmaps=t.mipmaps;s.minFilter=LinearMipmapLinearFilter}if(t.mipmapCount===1){s.minFilter=LinearFilter}if(t.generateMipmaps!==undefined){s.generateMipmaps=t.generateMipmaps}s.needsUpdate=true;if(n)n(s,t)},t,i);return s}}class TextureLoader extends Loader{constructor(e){super(e)}load(e,t,n,i){const r=new Texture;const s=new ImageLoader(this.manager);s.setCrossOrigin(this.crossOrigin);s.setPath(this.path);s.load(e,function(e){r.image=e;r.needsUpdate=true;if(t!==undefined){t(r)}},n,i);return r}}class Light extends Object3D{constructor(e,t=1){super();this.isLight=true;this.type="Light";this.color=new Color(e);this.intensity=t}dispose(){}copy(e,t){super.copy(e,t);this.color.copy(e.color);this.intensity=e.intensity;return this}toJSON(e){const t=super.toJSON(e);t.object.color=this.color.getHex();t.object.intensity=this.intensity;if(this.groundColor!==undefined)t.object.groundColor=this.groundColor.getHex();if(this.distance!==undefined)t.object.distance=this.distance;if(this.angle!==undefined)t.object.angle=this.angle;if(this.decay!==undefined)t.object.decay=this.decay;if(this.penumbra!==undefined)t.object.penumbra=this.penumbra;if(this.shadow!==undefined)t.object.shadow=this.shadow.toJSON();return t}}class HemisphereLight extends Light{constructor(e,t,n){super(e,n);this.isHemisphereLight=true;this.type="HemisphereLight";this.position.copy(Object3D.DEFAULT_UP);this.updateMatrix();this.groundColor=new Color(t)}copy(e,t){super.copy(e,t);this.groundColor.copy(e.groundColor);return this}}const _projScreenMatrix$1=new Matrix4;const _lightPositionWorld$1=new Vector3;const _lookTarget$1=new Vector3;class LightShadow{constructor(e){this.camera=e;this.bias=0;this.normalBias=0;this.radius=1;this.blurSamples=8;this.mapSize=new Vector2(512,512);this.map=null;this.mapPass=null;this.matrix=new Matrix4;this.autoUpdate=true;this.needsUpdate=false;this._frustum=new Frustum;this._frameExtents=new Vector2(1,1);this._viewportCount=1;this._viewports=[new Vector4(0,0,1,1)]}getViewportCount(){return this._viewportCount}getFrustum(){return this._frustum}updateMatrices(e){const t=this.camera;const n=this.matrix;_lightPositionWorld$1.setFromMatrixPosition(e.matrixWorld);t.position.copy(_lightPositionWorld$1);_lookTarget$1.setFromMatrixPosition(e.target.matrixWorld);t.lookAt(_lookTarget$1);t.updateMatrixWorld();_projScreenMatrix$1.multiplyMatrices(t.projectionMatrix,t.matrixWorldInverse);this._frustum.setFromProjectionMatrix(_projScreenMatrix$1);n.set(.5,0,0,.5,0,.5,0,.5,0,0,.5,.5,0,0,0,1);n.multiply(_projScreenMatrix$1)}getViewport(e){return this._viewports[e]}getFrameExtents(){return this._frameExtents}dispose(){if(this.map){this.map.dispose()}if(this.mapPass){this.mapPass.dispose()}}copy(e){this.camera=e.camera.clone();this.bias=e.bias;this.radius=e.radius;this.mapSize.copy(e.mapSize);return this}clone(){return(new this.constructor).copy(this)}toJSON(){const e={};if(this.bias!==0)e.bias=this.bias;if(this.normalBias!==0)e.normalBias=this.normalBias;if(this.radius!==1)e.radius=this.radius;if(this.mapSize.x!==512||this.mapSize.y!==512)e.mapSize=this.mapSize.toArray();e.camera=this.camera.toJSON(false).object;delete e.camera.matrix;return e}}class SpotLightShadow extends LightShadow{constructor(){super(new PerspectiveCamera(50,1,.5,500));this.isSpotLightShadow=true;this.focus=1}updateMatrices(e){const t=this.camera;const n=RAD2DEG*2*e.angle*this.focus;const i=this.mapSize.width/this.mapSize.height;const r=e.distance||t.far;if(n!==t.fov||i!==t.aspect||r!==t.far){t.fov=n;t.aspect=i;t.far=r;t.updateProjectionMatrix()}super.updateMatrices(e)}copy(e){super.copy(e);this.focus=e.focus;return this}}class SpotLight extends Light{constructor(e,t,n=0,i=Math.PI/3,r=0,s=2){super(e,t);this.isSpotLight=true;this.type="SpotLight";this.position.copy(Object3D.DEFAULT_UP);this.updateMatrix();this.target=new Object3D;this.distance=n;this.angle=i;this.penumbra=r;this.decay=s;this.map=null;this.shadow=new SpotLightShadow}get power(){return this.intensity*Math.PI}set power(e){this.intensity=e/Math.PI}dispose(){this.shadow.dispose()}copy(e,t){super.copy(e,t);this.distance=e.distance;this.angle=e.angle;this.penumbra=e.penumbra;this.decay=e.decay;this.target=e.target.clone();this.shadow=e.shadow.clone();return this}}const _projScreenMatrix=new Matrix4;const _lightPositionWorld=new Vector3;const _lookTarget=new Vector3;class PointLightShadow extends LightShadow{constructor(){super(new PerspectiveCamera(90,1,.5,500));this.isPointLightShadow=true;this._frameExtents=new Vector2(4,2);this._viewportCount=6;this._viewports=[new Vector4(2,1,1,1),new Vector4(0,1,1,1),new Vector4(3,1,1,1),new Vector4(1,1,1,1),new Vector4(3,0,1,1),new Vector4(1,0,1,1)];this._cubeDirections=[new Vector3(1,0,0),new Vector3(-1,0,0),new Vector3(0,0,1),new Vector3(0,0,-1),new Vector3(0,1,0),new Vector3(0,-1,0)];this._cubeUps=[new Vector3(0,1,0),new Vector3(0,1,0),new Vector3(0,1,0),new Vector3(0,1,0),new Vector3(0,0,1),new Vector3(0,0,-1)]}updateMatrices(e,t=0){const n=this.camera;const i=this.matrix;const r=e.distance||n.far;if(r!==n.far){n.far=r;n.updateProjectionMatrix()}_lightPositionWorld.setFromMatrixPosition(e.matrixWorld);n.position.copy(_lightPositionWorld);_lookTarget.copy(n.position);_lookTarget.add(this._cubeDirections[t]);n.up.copy(this._cubeUps[t]);n.lookAt(_lookTarget);n.updateMatrixWorld();i.makeTranslation(-_lightPositionWorld.x,-_lightPositionWorld.y,-_lightPositionWorld.z);_projScreenMatrix.multiplyMatrices(n.projectionMatrix,n.matrixWorldInverse);this._frustum.setFromProjectionMatrix(_projScreenMatrix)}}class PointLight extends Light{constructor(e,t,n=0,i=2){super(e,t);this.isPointLight=true;this.type="PointLight";this.distance=n;this.decay=i;this.shadow=new PointLightShadow}get power(){return this.intensity*4*Math.PI}set power(e){this.intensity=e/(4*Math.PI)}dispose(){this.shadow.dispose()}copy(e,t){super.copy(e,t);this.distance=e.distance;this.decay=e.decay;this.shadow=e.shadow.clone();return this}}class DirectionalLightShadow extends LightShadow{constructor(){super(new OrthographicCamera(-5,5,5,-5,.5,500));this.isDirectionalLightShadow=true}}class DirectionalLight extends Light{constructor(e,t){super(e,t);this.isDirectionalLight=true;this.type="DirectionalLight";this.position.copy(Object3D.DEFAULT_UP);this.updateMatrix();this.target=new Object3D;this.shadow=new DirectionalLightShadow}dispose(){this.shadow.dispose()}copy(e){super.copy(e);this.target=e.target.clone();this.shadow=e.shadow.clone();return this}}class AmbientLight extends Light{constructor(e,t){super(e,t);this.isAmbientLight=true;this.type="AmbientLight"}}class RectAreaLight extends Light{constructor(e,t,n=10,i=10){super(e,t);this.isRectAreaLight=true;this.type="RectAreaLight";this.width=n;this.height=i}get power(){return this.intensity*this.width*this.height*Math.PI}set power(e){this.intensity=e/(this.width*this.height*Math.PI)}copy(e){super.copy(e);this.width=e.width;this.height=e.height;return this}toJSON(e){const t=super.toJSON(e);t.object.width=this.width;t.object.height=this.height;return t}}class SphericalHarmonics3{constructor(){this.isSphericalHarmonics3=true;this.coefficients=[];for(let e=0;e<9;e++){this.coefficients.push(new Vector3)}}set(t){for(let e=0;e<9;e++){this.coefficients[e].copy(t[e])}return this}zero(){for(let e=0;e<9;e++){this.coefficients[e].set(0,0,0)}return this}getAt(e,t){const n=e.x,i=e.y,r=e.z;const s=this.coefficients;t.copy(s[0]).multiplyScalar(.282095);t.addScaledVector(s[1],.488603*i);t.addScaledVector(s[2],.488603*r);t.addScaledVector(s[3],.488603*n);t.addScaledVector(s[4],1.092548*(n*i));t.addScaledVector(s[5],1.092548*(i*r));t.addScaledVector(s[6],.315392*(3*r*r-1));t.addScaledVector(s[7],1.092548*(n*r));t.addScaledVector(s[8],.546274*(n*n-i*i));return t}getIrradianceAt(e,t){const n=e.x,i=e.y,r=e.z;const s=this.coefficients;t.copy(s[0]).multiplyScalar(.886227);t.addScaledVector(s[1],2*.511664*i);t.addScaledVector(s[2],2*.511664*r);t.addScaledVector(s[3],2*.511664*n);t.addScaledVector(s[4],2*.429043*n*i);t.addScaledVector(s[5],2*.429043*i*r);t.addScaledVector(s[6],.743125*r*r-.247708);t.addScaledVector(s[7],2*.429043*n*r);t.addScaledVector(s[8],.429043*(n*n-i*i));return t}add(t){for(let e=0;e<9;e++){this.coefficients[e].add(t.coefficients[e])}return this}addScaledSH(t,n){for(let e=0;e<9;e++){this.coefficients[e].addScaledVector(t.coefficients[e],n)}return this}scale(t){for(let e=0;e<9;e++){this.coefficients[e].multiplyScalar(t)}return this}lerp(t,n){for(let e=0;e<9;e++){this.coefficients[e].lerp(t.coefficients[e],n)}return this}equals(t){for(let e=0;e<9;e++){if(!this.coefficients[e].equals(t.coefficients[e])){return false}}return true}copy(e){return this.set(e.coefficients)}clone(){return(new this.constructor).copy(this)}fromArray(t,n=0){const i=this.coefficients;for(let e=0;e<9;e++){i[e].fromArray(t,n+e*3)}return this}toArray(t=[],n=0){const i=this.coefficients;for(let e=0;e<9;e++){i[e].toArray(t,n+e*3)}return t}static getBasisAt(e,t){const n=e.x,i=e.y,r=e.z;t[0]=.282095;t[1]=.488603*i;t[2]=.488603*r;t[3]=.488603*n;t[4]=1.092548*n*i;t[5]=1.092548*i*r;t[6]=.315392*(3*r*r-1);t[7]=1.092548*n*r;t[8]=.546274*(n*n-i*i)}}class LightProbe extends Light{constructor(e=new SphericalHarmonics3,t=1){super(undefined,t);this.isLightProbe=true;this.sh=e}copy(e){super.copy(e);this.sh.copy(e.sh);return this}fromJSON(e){this.intensity=e.intensity;this.sh.fromArray(e.sh);return this}toJSON(e){const t=super.toJSON(e);t.object.sh=this.sh.toArray();return t}}class MaterialLoader extends Loader{constructor(e){super(e);this.textures={}}load(t,n,e,i){const r=this;const s=new FileLoader(r.manager);s.setPath(r.path);s.setRequestHeader(r.requestHeader);s.setWithCredentials(r.withCredentials);s.load(t,function(e){try{n(r.parse(JSON.parse(e)))}catch(e){if(i){i(e)}else{console.error(e)}r.manager.itemError(t)}},e,i)}parse(t){const n=this.textures;function e(e){if(n[e]===undefined){console.warn("THREE.MaterialLoader: Undefined texture",e)}return n[e]}const i=MaterialLoader.createMaterialFromType(t.type);if(t.uuid!==undefined)i.uuid=t.uuid;if(t.name!==undefined)i.name=t.name;if(t.color!==undefined&&i.color!==undefined)i.color.setHex(t.color);if(t.roughness!==undefined)i.roughness=t.roughness;if(t.metalness!==undefined)i.metalness=t.metalness;if(t.sheen!==undefined)i.sheen=t.sheen;if(t.sheenColor!==undefined)i.sheenColor=(new Color).setHex(t.sheenColor);if(t.sheenRoughness!==undefined)i.sheenRoughness=t.sheenRoughness;if(t.emissive!==undefined&&i.emissive!==undefined)i.emissive.setHex(t.emissive);if(t.specular!==undefined&&i.specular!==undefined)i.specular.setHex(t.specular);if(t.specularIntensity!==undefined)i.specularIntensity=t.specularIntensity;if(t.specularColor!==undefined&&i.specularColor!==undefined)i.specularColor.setHex(t.specularColor);if(t.shininess!==undefined)i.shininess=t.shininess;if(t.clearcoat!==undefined)i.clearcoat=t.clearcoat;if(t.clearcoatRoughness!==undefined)i.clearcoatRoughness=t.clearcoatRoughness;if(t.dispersion!==undefined)i.dispersion=t.dispersion;if(t.iridescence!==undefined)i.iridescence=t.iridescence;if(t.iridescenceIOR!==undefined)i.iridescenceIOR=t.iridescenceIOR;if(t.iridescenceThicknessRange!==undefined)i.iridescenceThicknessRange=t.iridescenceThicknessRange;if(t.transmission!==undefined)i.transmission=t.transmission;if(t.thickness!==undefined)i.thickness=t.thickness;if(t.attenuationDistance!==undefined)i.attenuationDistance=t.attenuationDistance;if(t.attenuationColor!==undefined&&i.attenuationColor!==undefined)i.attenuationColor.setHex(t.attenuationColor);if(t.anisotropy!==undefined)i.anisotropy=t.anisotropy;if(t.anisotropyRotation!==undefined)i.anisotropyRotation=t.anisotropyRotation;if(t.fog!==undefined)i.fog=t.fog;if(t.flatShading!==undefined)i.flatShading=t.flatShading;if(t.blending!==undefined)i.blending=t.blending;if(t.combine!==undefined)i.combine=t.combine;if(t.side!==undefined)i.side=t.side;if(t.shadowSide!==undefined)i.shadowSide=t.shadowSide;if(t.opacity!==undefined)i.opacity=t.opacity;if(t.transparent!==undefined)i.transparent=t.transparent;if(t.alphaTest!==undefined)i.alphaTest=t.alphaTest;if(t.alphaHash!==undefined)i.alphaHash=t.alphaHash;if(t.depthFunc!==undefined)i.depthFunc=t.depthFunc;if(t.depthTest!==undefined)i.depthTest=t.depthTest;if(t.depthWrite!==undefined)i.depthWrite=t.depthWrite;if(t.colorWrite!==undefined)i.colorWrite=t.colorWrite;if(t.blendSrc!==undefined)i.blendSrc=t.blendSrc;if(t.blendDst!==undefined)i.blendDst=t.blendDst;if(t.blendEquation!==undefined)i.blendEquation=t.blendEquation;if(t.blendSrcAlpha!==undefined)i.blendSrcAlpha=t.blendSrcAlpha;if(t.blendDstAlpha!==undefined)i.blendDstAlpha=t.blendDstAlpha;if(t.blendEquationAlpha!==undefined)i.blendEquationAlpha=t.blendEquationAlpha;if(t.blendColor!==undefined&&i.blendColor!==undefined)i.blendColor.setHex(t.blendColor);if(t.blendAlpha!==undefined)i.blendAlpha=t.blendAlpha;if(t.stencilWriteMask!==undefined)i.stencilWriteMask=t.stencilWriteMask;if(t.stencilFunc!==undefined)i.stencilFunc=t.stencilFunc;if(t.stencilRef!==undefined)i.stencilRef=t.stencilRef;if(t.stencilFuncMask!==undefined)i.stencilFuncMask=t.stencilFuncMask;if(t.stencilFail!==undefined)i.stencilFail=t.stencilFail;if(t.stencilZFail!==undefined)i.stencilZFail=t.stencilZFail;if(t.stencilZPass!==undefined)i.stencilZPass=t.stencilZPass;if(t.stencilWrite!==undefined)i.stencilWrite=t.stencilWrite;if(t.wireframe!==undefined)i.wireframe=t.wireframe;if(t.wireframeLinewidth!==undefined)i.wireframeLinewidth=t.wireframeLinewidth;if(t.wireframeLinecap!==undefined)i.wireframeLinecap=t.wireframeLinecap;if(t.wireframeLinejoin!==undefined)i.wireframeLinejoin=t.wireframeLinejoin;if(t.rotation!==undefined)i.rotation=t.rotation;if(t.linewidth!==undefined)i.linewidth=t.linewidth;if(t.dashSize!==undefined)i.dashSize=t.dashSize;if(t.gapSize!==undefined)i.gapSize=t.gapSize;if(t.scale!==undefined)i.scale=t.scale;if(t.polygonOffset!==undefined)i.polygonOffset=t.polygonOffset;if(t.polygonOffsetFactor!==undefined)i.polygonOffsetFactor=t.polygonOffsetFactor;if(t.polygonOffsetUnits!==undefined)i.polygonOffsetUnits=t.polygonOffsetUnits;if(t.dithering!==undefined)i.dithering=t.dithering;if(t.alphaToCoverage!==undefined)i.alphaToCoverage=t.alphaToCoverage;if(t.premultipliedAlpha!==undefined)i.premultipliedAlpha=t.premultipliedAlpha;if(t.forceSinglePass!==undefined)i.forceSinglePass=t.forceSinglePass;if(t.visible!==undefined)i.visible=t.visible;if(t.toneMapped!==undefined)i.toneMapped=t.toneMapped;if(t.userData!==undefined)i.userData=t.userData;if(t.vertexColors!==undefined){if(typeof t.vertexColors==="number"){i.vertexColors=t.vertexColors>0?true:false}else{i.vertexColors=t.vertexColors}}if(t.uniforms!==undefined){for(const r in t.uniforms){const s=t.uniforms[r];i.uniforms[r]={};switch(s.type){case"t":i.uniforms[r].value=e(s.value);break;case"c":i.uniforms[r].value=(new Color).setHex(s.value);break;case"v2":i.uniforms[r].value=(new Vector2).fromArray(s.value);break;case"v3":i.uniforms[r].value=(new Vector3).fromArray(s.value);break;case"v4":i.uniforms[r].value=(new Vector4).fromArray(s.value);break;case"m3":i.uniforms[r].value=(new Matrix3).fromArray(s.value);break;case"m4":i.uniforms[r].value=(new Matrix4).fromArray(s.value);break;default:i.uniforms[r].value=s.value}}}if(t.defines!==undefined)i.defines=t.defines;if(t.vertexShader!==undefined)i.vertexShader=t.vertexShader;if(t.fragmentShader!==undefined)i.fragmentShader=t.fragmentShader;if(t.glslVersion!==undefined)i.glslVersion=t.glslVersion;if(t.extensions!==undefined){for(const a in t.extensions){i.extensions[a]=t.extensions[a]}}if(t.lights!==undefined)i.lights=t.lights;if(t.clipping!==undefined)i.clipping=t.clipping;if(t.size!==undefined)i.size=t.size;if(t.sizeAttenuation!==undefined)i.sizeAttenuation=t.sizeAttenuation;if(t.map!==undefined)i.map=e(t.map);if(t.matcap!==undefined)i.matcap=e(t.matcap);if(t.alphaMap!==undefined)i.alphaMap=e(t.alphaMap);if(t.bumpMap!==undefined)i.bumpMap=e(t.bumpMap);if(t.bumpScale!==undefined)i.bumpScale=t.bumpScale;if(t.normalMap!==undefined)i.normalMap=e(t.normalMap);if(t.normalMapType!==undefined)i.normalMapType=t.normalMapType;if(t.normalScale!==undefined){let e=t.normalScale;if(Array.isArray(e)===false){e=[e,e]}i.normalScale=(new Vector2).fromArray(e)}if(t.displacementMap!==undefined)i.displacementMap=e(t.displacementMap);if(t.displacementScale!==undefined)i.displacementScale=t.displacementScale;if(t.displacementBias!==undefined)i.displacementBias=t.displacementBias;if(t.roughnessMap!==undefined)i.roughnessMap=e(t.roughnessMap);if(t.metalnessMap!==undefined)i.metalnessMap=e(t.metalnessMap);if(t.emissiveMap!==undefined)i.emissiveMap=e(t.emissiveMap);if(t.emissiveIntensity!==undefined)i.emissiveIntensity=t.emissiveIntensity;if(t.specularMap!==undefined)i.specularMap=e(t.specularMap);if(t.specularIntensityMap!==undefined)i.specularIntensityMap=e(t.specularIntensityMap);if(t.specularColorMap!==undefined)i.specularColorMap=e(t.specularColorMap);if(t.envMap!==undefined)i.envMap=e(t.envMap);if(t.envMapRotation!==undefined)i.envMapRotation.fromArray(t.envMapRotation);if(t.envMapIntensity!==undefined)i.envMapIntensity=t.envMapIntensity;if(t.reflectivity!==undefined)i.reflectivity=t.reflectivity;if(t.refractionRatio!==undefined)i.refractionRatio=t.refractionRatio;if(t.lightMap!==undefined)i.lightMap=e(t.lightMap);if(t.lightMapIntensity!==undefined)i.lightMapIntensity=t.lightMapIntensity;if(t.aoMap!==undefined)i.aoMap=e(t.aoMap);if(t.aoMapIntensity!==undefined)i.aoMapIntensity=t.aoMapIntensity;if(t.gradientMap!==undefined)i.gradientMap=e(t.gradientMap);if(t.clearcoatMap!==undefined)i.clearcoatMap=e(t.clearcoatMap);if(t.clearcoatRoughnessMap!==undefined)i.clearcoatRoughnessMap=e(t.clearcoatRoughnessMap);if(t.clearcoatNormalMap!==undefined)i.clearcoatNormalMap=e(t.clearcoatNormalMap);if(t.clearcoatNormalScale!==undefined)i.clearcoatNormalScale=(new Vector2).fromArray(t.clearcoatNormalScale);if(t.iridescenceMap!==undefined)i.iridescenceMap=e(t.iridescenceMap);if(t.iridescenceThicknessMap!==undefined)i.iridescenceThicknessMap=e(t.iridescenceThicknessMap);if(t.transmissionMap!==undefined)i.transmissionMap=e(t.transmissionMap);if(t.thicknessMap!==undefined)i.thicknessMap=e(t.thicknessMap);if(t.anisotropyMap!==undefined)i.anisotropyMap=e(t.anisotropyMap);if(t.sheenColorMap!==undefined)i.sheenColorMap=e(t.sheenColorMap);if(t.sheenRoughnessMap!==undefined)i.sheenRoughnessMap=e(t.sheenRoughnessMap);return i}setTextures(e){this.textures=e;return this}static createMaterialFromType(e){const t={ShadowMaterial:ShadowMaterial,SpriteMaterial:SpriteMaterial,RawShaderMaterial:RawShaderMaterial,ShaderMaterial:ShaderMaterial,PointsMaterial:PointsMaterial,MeshPhysicalMaterial:MeshPhysicalMaterial,MeshStandardMaterial:MeshStandardMaterial,MeshPhongMaterial:MeshPhongMaterial,MeshToonMaterial:MeshToonMaterial,MeshNormalMaterial:MeshNormalMaterial,MeshLambertMaterial:MeshLambertMaterial,MeshDepthMaterial:MeshDepthMaterial,MeshDistanceMaterial:MeshDistanceMaterial,MeshBasicMaterial:MeshBasicMaterial,MeshMatcapMaterial:MeshMatcapMaterial,LineDashedMaterial:LineDashedMaterial,LineBasicMaterial:LineBasicMaterial,Material:Material};return new t[e]}}class LoaderUtils{static decodeText(n){if(typeof TextDecoder!=="undefined"){return(new TextDecoder).decode(n)}let i="";for(let e=0,t=n.length;e<t;e++){i+=String.fromCharCode(n[e])}try{return decodeURIComponent(escape(i))}catch(e){return i}}static extractUrlBase(e){const t=e.lastIndexOf("/");if(t===-1)return"./";return e.slice(0,t+1)}static resolveURL(e,t){if(typeof e!=="string"||e==="")return"";if(/^https?:\/\//i.test(t)&&/^\//.test(e)){t=t.replace(/(^https?:\/\/[^\/]+).*/i,"$1")}if(/^(https?:)?\/\//i.test(e))return e;if(/^data:.*,.*$/i.test(e))return e;if(/^blob:.*$/i.test(e))return e;return t+e}}class InstancedBufferGeometry extends BufferGeometry{constructor(){super();this.isInstancedBufferGeometry=true;this.type="InstancedBufferGeometry";this.instanceCount=Infinity}copy(e){super.copy(e);this.instanceCount=e.instanceCount;return this}toJSON(){const e=super.toJSON();e.instanceCount=this.instanceCount;e.isInstancedBufferGeometry=true;return e}}class BufferGeometryLoader extends Loader{constructor(e){super(e)}load(t,n,e,i){const r=this;const s=new FileLoader(r.manager);s.setPath(r.path);s.setRequestHeader(r.requestHeader);s.setWithCredentials(r.withCredentials);s.load(t,function(e){try{n(r.parse(JSON.parse(e)))}catch(e){if(i){i(e)}else{console.error(e)}r.manager.itemError(t)}},e,i)}parse(n){const o={};const s={};function i(e,t){if(o[t]!==undefined)return o[t];const n=e.interleavedBuffers;const i=n[t];const r=l(e,i.buffer);const s=getTypedArray(i.type,r);const a=new InterleavedBuffer(s,i.stride);a.uuid=i.uuid;o[t]=a;return a}function l(e,t){if(s[t]!==undefined)return s[t];const n=e.arrayBuffers;const i=n[t];const r=new Uint32Array(i).buffer;s[t]=r;return r}const r=n.isInstancedBufferGeometry?new InstancedBufferGeometry:new BufferGeometry;const e=n.data.index;if(e!==undefined){const d=getTypedArray(e.type,e.array);r.setIndex(new BufferAttribute(d,1))}const t=n.data.attributes;for(const f in t){const p=t[f];let e;if(p.isInterleavedBufferAttribute){const m=i(n.data,p.data);e=new InterleavedBufferAttribute(m,p.itemSize,p.offset,p.normalized)}else{const d=getTypedArray(p.type,p.array);const g=p.isInstancedBufferAttribute?InstancedBufferAttribute:BufferAttribute;e=new g(d,p.itemSize,p.normalized)}if(p.name!==undefined)e.name=p.name;if(p.usage!==undefined)e.setUsage(p.usage);r.setAttribute(f,e)}const a=n.data.morphAttributes;if(a){for(const f in a){const _=a[f];const v=[];for(let t=0,e=_.length;t<e;t++){const p=_[t];let e;if(p.isInterleavedBufferAttribute){const m=i(n.data,p.data);e=new InterleavedBufferAttribute(m,p.itemSize,p.offset,p.normalized)}else{const d=getTypedArray(p.type,p.array);e=new BufferAttribute(d,p.itemSize,p.normalized)}if(p.name!==undefined)e.name=p.name;v.push(e)}r.morphAttributes[f]=v}}const c=n.data.morphTargetsRelative;if(c){r.morphTargetsRelative=true}const u=n.data.groups||n.data.drawcalls||n.data.offsets;if(u!==undefined){for(let e=0,t=u.length;e!==t;++e){const y=u[e];r.addGroup(y.start,y.count,y.materialIndex)}}const h=n.data.boundingSphere;if(h!==undefined){const x=new Vector3;if(h.center!==undefined){x.fromArray(h.center)}r.boundingSphere=new Sphere(x,h.radius)}if(n.name)r.name=n.name;if(n.userData)r.userData=n.userData;return r}}class ObjectLoader extends Loader{constructor(e){super(e)}load(i,r,e,s){const a=this;const t=this.path===""?LoaderUtils.extractUrlBase(i):this.path;this.resourcePath=this.resourcePath||t;const n=new FileLoader(this.manager);n.setPath(this.path);n.setRequestHeader(this.requestHeader);n.setWithCredentials(this.withCredentials);n.load(i,function(e){let t=null;try{t=JSON.parse(e)}catch(e){if(s!==undefined)s(e);console.error("THREE:ObjectLoader: Can't parse "+i+".",e.message);return}const n=t.metadata;if(n===undefined||n.type===undefined||n.type.toLowerCase()==="geometry"){if(s!==undefined)s(new Error("THREE.ObjectLoader: Can't load "+i));console.error("THREE.ObjectLoader: Can't load "+i);return}a.parse(t,r)},e,s)}async loadAsync(e,t){const n=this;const i=this.path===""?LoaderUtils.extractUrlBase(e):this.path;this.resourcePath=this.resourcePath||i;const r=new FileLoader(this.manager);r.setPath(this.path);r.setRequestHeader(this.requestHeader);r.setWithCredentials(this.withCredentials);const s=await r.loadAsync(e,t);const a=JSON.parse(s);const o=a.metadata;if(o===undefined||o.type===undefined||o.type.toLowerCase()==="geometry"){throw new Error("THREE.ObjectLoader: Can't load "+e)}return await n.parseAsync(a)}parse(e,t){const n=this.parseAnimations(e.animations);const i=this.parseShapes(e.shapes);const r=this.parseGeometries(e.geometries,i);const s=this.parseImages(e.images,function(){if(t!==undefined)t(l)});const a=this.parseTextures(e.textures,s);const o=this.parseMaterials(e.materials,a);const l=this.parseObject(e.object,r,o,a,n);const c=this.parseSkeletons(e.skeletons,l);this.bindSkeletons(l,c);if(t!==undefined){let e=false;for(const u in s){if(s[u].data instanceof HTMLImageElement){e=true;break}}if(e===false)t(l)}return l}async parseAsync(e){const t=this.parseAnimations(e.animations);const n=this.parseShapes(e.shapes);const i=this.parseGeometries(e.geometries,n);const r=await this.parseImagesAsync(e.images);const s=this.parseTextures(e.textures,r);const a=this.parseMaterials(e.materials,s);const o=this.parseObject(e.object,i,a,s,t);const l=this.parseSkeletons(e.skeletons,o);this.bindSkeletons(o,l);return o}parseShapes(n){const i={};if(n!==undefined){for(let e=0,t=n.length;e<t;e++){const r=(new Shape).fromJSON(n[e]);i[r.uuid]=r}}return i}parseSkeletons(n,e){const i={};const r={};e.traverse(function(e){if(e.isBone)r[e.uuid]=e});if(n!==undefined){for(let e=0,t=n.length;e<t;e++){const s=(new Skeleton).fromJSON(n[e],r);i[s.uuid]=s}}return i}parseGeometries(n,i){const r={};if(n!==undefined){const s=new BufferGeometryLoader;for(let t=0,e=n.length;t<e;t++){let e;const a=n[t];switch(a.type){case"BufferGeometry":case"InstancedBufferGeometry":e=s.parse(a);break;default:if(a.type in Geometries){e=Geometries[a.type].fromJSON(a,i)}else{console.warn(`THREE.ObjectLoader: Unsupported geometry type "${a.type}"`)}}e.uuid=a.uuid;if(a.name!==undefined)e.name=a.name;if(a.userData!==undefined)e.userData=a.userData;r[a.uuid]=e}}return r}parseMaterials(n,e){const i={};const r={};if(n!==undefined){const s=new MaterialLoader;s.setTextures(e);for(let e=0,t=n.length;e<t;e++){const a=n[e];if(i[a.uuid]===undefined){i[a.uuid]=s.parse(a)}r[a.uuid]=i[a.uuid]}}return r}parseAnimations(t){const n={};if(t!==undefined){for(let e=0;e<t.length;e++){const i=t[e];const r=AnimationClip.parse(i);n[r.uuid]=r}}return n}parseImages(n,e){const i=this;const r={};let t;function s(e){i.manager.itemStart(e);return t.load(e,function(){i.manager.itemEnd(e)},undefined,function(){i.manager.itemError(e);i.manager.itemEnd(e)})}function a(e){if(typeof e==="string"){const t=e;const n=/^(\/\/)|([a-z]+:(\/\/)?)/i.test(t)?t:i.resourcePath+t;return s(n)}else{if(e.data){return{data:getTypedArray(e.type,e.data),width:e.width,height:e.height}}else{return null}}}if(n!==undefined&&n.length>0){const o=new LoadingManager(e);t=new ImageLoader(o);t.setCrossOrigin(this.crossOrigin);for(let e=0,t=n.length;e<t;e++){const l=n[e];const c=l.url;if(Array.isArray(c)){const u=[];for(let e=0,t=c.length;e<t;e++){const h=c[e];const d=a(h);if(d!==null){if(d instanceof HTMLImageElement){u.push(d)}else{u.push(new DataTexture(d.data,d.width,d.height))}}}r[l.uuid]=new Source(u)}else{const d=a(l.url);r[l.uuid]=new Source(d)}}}return r}async parseImagesAsync(n){const i=this;const r={};let s;async function a(e){if(typeof e==="string"){const t=e;const n=/^(\/\/)|([a-z]+:(\/\/)?)/i.test(t)?t:i.resourcePath+t;return await s.loadAsync(n)}else{if(e.data){return{data:getTypedArray(e.type,e.data),width:e.width,height:e.height}}else{return null}}}if(n!==undefined&&n.length>0){s=new ImageLoader(this.manager);s.setCrossOrigin(this.crossOrigin);for(let e=0,t=n.length;e<t;e++){const o=n[e];const l=o.url;if(Array.isArray(l)){const c=[];for(let e=0,t=l.length;e<t;e++){const u=l[e];const h=await a(u);if(h!==null){if(h instanceof HTMLImageElement){c.push(h)}else{c.push(new DataTexture(h.data,h.width,h.height))}}}r[o.uuid]=new Source(c)}else{const h=await a(o.url);r[o.uuid]=new Source(h)}}}return r}parseTextures(n,i){function r(e,t){if(typeof e==="number")return e;console.warn("THREE.ObjectLoader.parseTexture: Constant should be in numeric form.",e);return t[e]}const s={};if(n!==undefined){for(let t=0,e=n.length;t<e;t++){const a=n[t];if(a.image===undefined){console.warn('THREE.ObjectLoader: No "image" specified for',a.uuid)}if(i[a.image]===undefined){console.warn("THREE.ObjectLoader: Undefined image",a.image)}const o=i[a.image];const l=o.data;let e;if(Array.isArray(l)){e=new CubeTexture;if(l.length===6)e.needsUpdate=true}else{if(l&&l.data){e=new DataTexture}else{e=new Texture}if(l)e.needsUpdate=true}e.source=o;e.uuid=a.uuid;if(a.name!==undefined)e.name=a.name;if(a.mapping!==undefined)e.mapping=r(a.mapping,TEXTURE_MAPPING);if(a.channel!==undefined)e.channel=a.channel;if(a.offset!==undefined)e.offset.fromArray(a.offset);if(a.repeat!==undefined)e.repeat.fromArray(a.repeat);if(a.center!==undefined)e.center.fromArray(a.center);if(a.rotation!==undefined)e.rotation=a.rotation;if(a.wrap!==undefined){e.wrapS=r(a.wrap[0],TEXTURE_WRAPPING);e.wrapT=r(a.wrap[1],TEXTURE_WRAPPING)}if(a.format!==undefined)e.format=a.format;if(a.internalFormat!==undefined)e.internalFormat=a.internalFormat;if(a.type!==undefined)e.type=a.type;if(a.colorSpace!==undefined)e.colorSpace=a.colorSpace;if(a.minFilter!==undefined)e.minFilter=r(a.minFilter,TEXTURE_FILTER);if(a.magFilter!==undefined)e.magFilter=r(a.magFilter,TEXTURE_FILTER);if(a.anisotropy!==undefined)e.anisotropy=a.anisotropy;if(a.flipY!==undefined)e.flipY=a.flipY;if(a.generateMipmaps!==undefined)e.generateMipmaps=a.generateMipmaps;if(a.premultiplyAlpha!==undefined)e.premultiplyAlpha=a.premultiplyAlpha;if(a.unpackAlignment!==undefined)e.unpackAlignment=a.unpackAlignment;if(a.compareFunction!==undefined)e.compareFunction=a.compareFunction;if(a.userData!==undefined)e.userData=a.userData;s[a.uuid]=e}}return s}parseObject(e,t,s,n,i){let r;function a(e){if(t[e]===undefined){console.warn("THREE.ObjectLoader: Undefined geometry",e)}return t[e]}function o(n){if(n===undefined)return undefined;if(Array.isArray(n)){const i=[];for(let e=0,t=n.length;e<t;e++){const r=n[e];if(s[r]===undefined){console.warn("THREE.ObjectLoader: Undefined material",r)}i.push(s[r])}return i}if(s[n]===undefined){console.warn("THREE.ObjectLoader: Undefined material",n)}return s[n]}function l(e){if(n[e]===undefined){console.warn("THREE.ObjectLoader: Undefined texture",e)}return n[e]}let c,u;switch(e.type){case"Scene":r=new Scene;if(e.background!==undefined){if(Number.isInteger(e.background)){r.background=new Color(e.background)}else{r.background=l(e.background)}}if(e.environment!==undefined){r.environment=l(e.environment)}if(e.fog!==undefined){if(e.fog.type==="Fog"){r.fog=new Fog(e.fog.color,e.fog.near,e.fog.far)}else if(e.fog.type==="FogExp2"){r.fog=new FogExp2(e.fog.color,e.fog.density)}if(e.fog.name!==""){r.fog.name=e.fog.name}}if(e.backgroundBlurriness!==undefined)r.backgroundBlurriness=e.backgroundBlurriness;if(e.backgroundIntensity!==undefined)r.backgroundIntensity=e.backgroundIntensity;if(e.backgroundRotation!==undefined)r.backgroundRotation.fromArray(e.backgroundRotation);if(e.environmentIntensity!==undefined)r.environmentIntensity=e.environmentIntensity;if(e.environmentRotation!==undefined)r.environmentRotation.fromArray(e.environmentRotation);break;case"PerspectiveCamera":r=new PerspectiveCamera(e.fov,e.aspect,e.near,e.far);if(e.focus!==undefined)r.focus=e.focus;if(e.zoom!==undefined)r.zoom=e.zoom;if(e.filmGauge!==undefined)r.filmGauge=e.filmGauge;if(e.filmOffset!==undefined)r.filmOffset=e.filmOffset;if(e.view!==undefined)r.view=Object.assign({},e.view);break;case"OrthographicCamera":r=new OrthographicCamera(e.left,e.right,e.top,e.bottom,e.near,e.far);if(e.zoom!==undefined)r.zoom=e.zoom;if(e.view!==undefined)r.view=Object.assign({},e.view);break;case"AmbientLight":r=new AmbientLight(e.color,e.intensity);break;case"DirectionalLight":r=new DirectionalLight(e.color,e.intensity);break;case"PointLight":r=new PointLight(e.color,e.intensity,e.distance,e.decay);break;case"RectAreaLight":r=new RectAreaLight(e.color,e.intensity,e.width,e.height);break;case"SpotLight":r=new SpotLight(e.color,e.intensity,e.distance,e.angle,e.penumbra,e.decay);break;case"HemisphereLight":r=new HemisphereLight(e.color,e.groundColor,e.intensity);break;case"LightProbe":r=(new LightProbe).fromJSON(e);break;case"SkinnedMesh":c=a(e.geometry);u=o(e.material);r=new SkinnedMesh(c,u);if(e.bindMode!==undefined)r.bindMode=e.bindMode;if(e.bindMatrix!==undefined)r.bindMatrix.fromArray(e.bindMatrix);if(e.skeleton!==undefined)r.skeleton=e.skeleton;break;case"Mesh":c=a(e.geometry);u=o(e.material);r=new Mesh(c,u);break;case"InstancedMesh":c=a(e.geometry);u=o(e.material);const h=e.count;const d=e.instanceMatrix;const f=e.instanceColor;r=new InstancedMesh(c,u,h);r.instanceMatrix=new InstancedBufferAttribute(new Float32Array(d.array),16);if(f!==undefined)r.instanceColor=new InstancedBufferAttribute(new Float32Array(f.array),f.itemSize);break;case"BatchedMesh":c=a(e.geometry);u=o(e.material);r=new BatchedMesh(e.maxGeometryCount,e.maxVertexCount,e.maxIndexCount,u);r.geometry=c;r.perObjectFrustumCulled=e.perObjectFrustumCulled;r.sortObjects=e.sortObjects;r._drawRanges=e.drawRanges;r._reservedRanges=e.reservedRanges;r._visibility=e.visibility;r._active=e.active;r._bounds=e.bounds.map(e=>{const t=new Box3;t.min.fromArray(e.boxMin);t.max.fromArray(e.boxMax);const n=new Sphere;n.radius=e.sphereRadius;n.center.fromArray(e.sphereCenter);return{boxInitialized:e.boxInitialized,box:t,sphereInitialized:e.sphereInitialized,sphere:n}});r._maxGeometryCount=e.maxGeometryCount;r._maxVertexCount=e.maxVertexCount;r._maxIndexCount=e.maxIndexCount;r._geometryInitialized=e.geometryInitialized;r._geometryCount=e.geometryCount;r._matricesTexture=l(e.matricesTexture.uuid);break;case"LOD":r=new LOD;break;case"Line":r=new Line(a(e.geometry),o(e.material));break;case"LineLoop":r=new LineLoop(a(e.geometry),o(e.material));break;case"LineSegments":r=new LineSegments(a(e.geometry),o(e.material));break;case"PointCloud":case"Points":r=new Points(a(e.geometry),o(e.material));break;case"Sprite":r=new Sprite(o(e.material));break;case"Group":r=new Group;break;case"Bone":r=new Bone;break;default:r=new Object3D}r.uuid=e.uuid;if(e.name!==undefined)r.name=e.name;if(e.matrix!==undefined){r.matrix.fromArray(e.matrix);if(e.matrixAutoUpdate!==undefined)r.matrixAutoUpdate=e.matrixAutoUpdate;if(r.matrixAutoUpdate)r.matrix.decompose(r.position,r.quaternion,r.scale)}else{if(e.position!==undefined)r.position.fromArray(e.position);if(e.rotation!==undefined)r.rotation.fromArray(e.rotation);if(e.quaternion!==undefined)r.quaternion.fromArray(e.quaternion);if(e.scale!==undefined)r.scale.fromArray(e.scale)}if(e.up!==undefined)r.up.fromArray(e.up);if(e.castShadow!==undefined)r.castShadow=e.castShadow;if(e.receiveShadow!==undefined)r.receiveShadow=e.receiveShadow;if(e.shadow){if(e.shadow.bias!==undefined)r.shadow.bias=e.shadow.bias;if(e.shadow.normalBias!==undefined)r.shadow.normalBias=e.shadow.normalBias;if(e.shadow.radius!==undefined)r.shadow.radius=e.shadow.radius;if(e.shadow.mapSize!==undefined)r.shadow.mapSize.fromArray(e.shadow.mapSize);if(e.shadow.camera!==undefined)r.shadow.camera=this.parseObject(e.shadow.camera)}if(e.visible!==undefined)r.visible=e.visible;if(e.frustumCulled!==undefined)r.frustumCulled=e.frustumCulled;if(e.renderOrder!==undefined)r.renderOrder=e.renderOrder;if(e.userData!==undefined)r.userData=e.userData;if(e.layers!==undefined)r.layers.mask=e.layers;if(e.children!==undefined){const p=e.children;for(let e=0;e<p.length;e++){r.add(this.parseObject(p[e],t,s,n,i))}}if(e.animations!==undefined){const m=e.animations;for(let e=0;e<m.length;e++){const g=m[e];r.animations.push(i[g])}}if(e.type==="LOD"){if(e.autoUpdate!==undefined)r.autoUpdate=e.autoUpdate;const _=e.levels;for(let e=0;e<_.length;e++){const v=_[e];const y=r.getObjectByProperty("uuid",v.object);if(y!==undefined){r.addLevel(y,v.distance,v.hysteresis)}}}return r}bindSkeletons(e,n){if(Object.keys(n).length===0)return;e.traverse(function(e){if(e.isSkinnedMesh===true&&e.skeleton!==undefined){const t=n[e.skeleton];if(t===undefined){console.warn("THREE.ObjectLoader: No skeleton found with UUID:",e.skeleton)}else{e.bind(t,e.bindMatrix)}}})}}const TEXTURE_MAPPING={UVMapping:UVMapping,CubeReflectionMapping:CubeReflectionMapping,CubeRefractionMapping:CubeRefractionMapping,EquirectangularReflectionMapping:EquirectangularReflectionMapping,EquirectangularRefractionMapping:EquirectangularRefractionMapping,CubeUVReflectionMapping:CubeUVReflectionMapping};const TEXTURE_WRAPPING={RepeatWrapping:RepeatWrapping,ClampToEdgeWrapping:ClampToEdgeWrapping,MirroredRepeatWrapping:MirroredRepeatWrapping};const TEXTURE_FILTER={NearestFilter:NearestFilter,NearestMipmapNearestFilter:NearestMipmapNearestFilter,NearestMipmapLinearFilter:NearestMipmapLinearFilter,LinearFilter:LinearFilter,LinearMipmapNearestFilter:LinearMipmapNearestFilter,LinearMipmapLinearFilter:LinearMipmapLinearFilter};class ImageBitmapLoader extends Loader{constructor(e){super(e);this.isImageBitmapLoader=true;if(typeof createImageBitmap==="undefined"){console.warn("THREE.ImageBitmapLoader: createImageBitmap() not supported.")}if(typeof fetch==="undefined"){console.warn("THREE.ImageBitmapLoader: fetch() not supported.")}this.options={premultiplyAlpha:"none"}}setOptions(e){this.options=e;return this}load(t,n,e,i){if(t===undefined)t="";if(this.path!==undefined)t=this.path+t;t=this.manager.resolveURL(t);const r=this;const s=Cache.get(t);if(s!==undefined){r.manager.itemStart(t);if(s.then){s.then(e=>{if(n)n(e);r.manager.itemEnd(t)}).catch(e=>{if(i)i(e)});return}setTimeout(function(){if(n)n(s);r.manager.itemEnd(t)},0);return s}const a={};a.credentials=this.crossOrigin==="anonymous"?"same-origin":"include";a.headers=this.requestHeader;const o=fetch(t,a).then(function(e){return e.blob()}).then(function(e){return createImageBitmap(e,Object.assign(r.options,{colorSpaceConversion:"none"}))}).then(function(e){Cache.add(t,e);if(n)n(e);r.manager.itemEnd(t);return e}).catch(function(e){if(i)i(e);Cache.remove(t);r.manager.itemError(t);r.manager.itemEnd(t)});Cache.add(t,o);r.manager.itemStart(t)}}let _context;class AudioContext{static getContext(){if(_context===undefined){_context=new(window.AudioContext||window.webkitAudioContext)}return _context}static setContext(e){_context=e}}class AudioLoader extends Loader{constructor(e){super(e)}load(t,i,e,n){const r=this;const s=new FileLoader(this.manager);s.setResponseType("arraybuffer");s.setPath(this.path);s.setRequestHeader(this.requestHeader);s.setWithCredentials(this.withCredentials);s.load(t,function(e){try{const t=e.slice(0);const n=AudioContext.getContext();n.decodeAudioData(t,function(e){i(e)}).catch(a)}catch(e){a(e)}},e,n);function a(e){if(n){n(e)}else{console.error(e)}r.manager.itemError(t)}}}const _eyeRight=new Matrix4;const _eyeLeft=new Matrix4;const _projectionMatrix=new Matrix4;class StereoCamera{constructor(){this.type="StereoCamera";this.aspect=1;this.eyeSep=.064;this.cameraL=new PerspectiveCamera;this.cameraL.layers.enable(1);this.cameraL.matrixAutoUpdate=false;this.cameraR=new PerspectiveCamera;this.cameraR.layers.enable(2);this.cameraR.matrixAutoUpdate=false;this._cache={focus:null,fov:null,aspect:null,near:null,far:null,zoom:null,eyeSep:null}}update(n){const i=this._cache;const e=i.focus!==n.focus||i.fov!==n.fov||i.aspect!==n.aspect*this.aspect||i.near!==n.near||i.far!==n.far||i.zoom!==n.zoom||i.eyeSep!==this.eyeSep;if(e){i.focus=n.focus;i.fov=n.fov;i.aspect=n.aspect*this.aspect;i.near=n.near;i.far=n.far;i.zoom=n.zoom;i.eyeSep=this.eyeSep;_projectionMatrix.copy(n.projectionMatrix);const r=i.eyeSep/2;const s=r*i.near/i.focus;const a=i.near*Math.tan(DEG2RAD*i.fov*.5)/i.zoom;let e,t;_eyeLeft.elements[12]=-r;_eyeRight.elements[12]=r;e=-a*i.aspect+s;t=a*i.aspect+s;_projectionMatrix.elements[0]=2*i.near/(t-e);_projectionMatrix.elements[8]=(t+e)/(t-e);this.cameraL.projectionMatrix.copy(_projectionMatrix);e=-a*i.aspect-s;t=a*i.aspect-s;_projectionMatrix.elements[0]=2*i.near/(t-e);_projectionMatrix.elements[8]=(t+e)/(t-e);this.cameraR.projectionMatrix.copy(_projectionMatrix)}this.cameraL.matrixWorld.copy(n.matrixWorld).multiply(_eyeLeft);this.cameraR.matrixWorld.copy(n.matrixWorld).multiply(_eyeRight)}}class Clock{constructor(e=true){this.autoStart=e;this.startTime=0;this.oldTime=0;this.elapsedTime=0;this.running=false}start(){this.startTime=now();this.oldTime=this.startTime;this.elapsedTime=0;this.running=true}stop(){this.getElapsedTime();this.running=false;this.autoStart=false}getElapsedTime(){this.getDelta();return this.elapsedTime}getDelta(){let e=0;if(this.autoStart&&!this.running){this.start();return 0}if(this.running){const t=now();e=(t-this.oldTime)/1e3;this.oldTime=t;this.elapsedTime+=e}return e}}function now(){return(typeof performance==="undefined"?Date:performance).now()}const _position$1=new Vector3;const _quaternion$1=new Quaternion;const _scale$1=new Vector3;const _orientation$1=new Vector3;class AudioListener extends Object3D{constructor(){super();this.type="AudioListener";this.context=AudioContext.getContext();this.gain=this.context.createGain();this.gain.connect(this.context.destination);this.filter=null;this.timeDelta=0;this._clock=new Clock}getInput(){return this.gain}removeFilter(){if(this.filter!==null){this.gain.disconnect(this.filter);this.filter.disconnect(this.context.destination);this.gain.connect(this.context.destination);this.filter=null}return this}getFilter(){return this.filter}setFilter(e){if(this.filter!==null){this.gain.disconnect(this.filter);this.filter.disconnect(this.context.destination)}else{this.gain.disconnect(this.context.destination)}this.filter=e;this.gain.connect(this.filter);this.filter.connect(this.context.destination);return this}getMasterVolume(){return this.gain.gain.value}setMasterVolume(e){this.gain.gain.setTargetAtTime(e,this.context.currentTime,.01);return this}updateMatrixWorld(e){super.updateMatrixWorld(e);const t=this.context.listener;const n=this.up;this.timeDelta=this._clock.getDelta();this.matrixWorld.decompose(_position$1,_quaternion$1,_scale$1);_orientation$1.set(0,0,-1).applyQuaternion(_quaternion$1);if(t.positionX){const i=this.context.currentTime+this.timeDelta;t.positionX.linearRampToValueAtTime(_position$1.x,i);t.positionY.linearRampToValueAtTime(_position$1.y,i);t.positionZ.linearRampToValueAtTime(_position$1.z,i);t.forwardX.linearRampToValueAtTime(_orientation$1.x,i);t.forwardY.linearRampToValueAtTime(_orientation$1.y,i);t.forwardZ.linearRampToValueAtTime(_orientation$1.z,i);t.upX.linearRampToValueAtTime(n.x,i);t.upY.linearRampToValueAtTime(n.y,i);t.upZ.linearRampToValueAtTime(n.z,i)}else{t.setPosition(_position$1.x,_position$1.y,_position$1.z);t.setOrientation(_orientation$1.x,_orientation$1.y,_orientation$1.z,n.x,n.y,n.z)}}}class Audio extends Object3D{constructor(e){super();this.type="Audio";this.listener=e;this.context=e.context;this.gain=this.context.createGain();this.gain.connect(e.getInput());this.autoplay=false;this.buffer=null;this.detune=0;this.loop=false;this.loopStart=0;this.loopEnd=0;this.offset=0;this.duration=undefined;this.playbackRate=1;this.isPlaying=false;this.hasPlaybackControl=true;this.source=null;this.sourceType="empty";this._startedAt=0;this._progress=0;this._connected=false;this.filters=[]}getOutput(){return this.gain}setNodeSource(e){this.hasPlaybackControl=false;this.sourceType="audioNode";this.source=e;this.connect();return this}setMediaElementSource(e){this.hasPlaybackControl=false;this.sourceType="mediaNode";this.source=this.context.createMediaElementSource(e);this.connect();return this}setMediaStreamSource(e){this.hasPlaybackControl=false;this.sourceType="mediaStreamNode";this.source=this.context.createMediaStreamSource(e);this.connect();return this}setBuffer(e){this.buffer=e;this.sourceType="buffer";if(this.autoplay)this.play();return this}play(e=0){if(this.isPlaying===true){console.warn("THREE.Audio: Audio is already playing.");return}if(this.hasPlaybackControl===false){console.warn("THREE.Audio: this Audio has no playback control.");return}this._startedAt=this.context.currentTime+e;const t=this.context.createBufferSource();t.buffer=this.buffer;t.loop=this.loop;t.loopStart=this.loopStart;t.loopEnd=this.loopEnd;t.onended=this.onEnded.bind(this);t.start(this._startedAt,this._progress+this.offset,this.duration);this.isPlaying=true;this.source=t;this.setDetune(this.detune);this.setPlaybackRate(this.playbackRate);return this.connect()}pause(){if(this.hasPlaybackControl===false){console.warn("THREE.Audio: this Audio has no playback control.");return}if(this.isPlaying===true){this._progress+=Math.max(this.context.currentTime-this._startedAt,0)*this.playbackRate;if(this.loop===true){this._progress=this._progress%(this.duration||this.buffer.duration)}this.source.stop();this.source.onended=null;this.isPlaying=false}return this}stop(){if(this.hasPlaybackControl===false){console.warn("THREE.Audio: this Audio has no playback control.");return}this._progress=0;if(this.source!==null){this.source.stop();this.source.onended=null}this.isPlaying=false;return this}connect(){if(this.filters.length>0){this.source.connect(this.filters[0]);for(let e=1,t=this.filters.length;e<t;e++){this.filters[e-1].connect(this.filters[e])}this.filters[this.filters.length-1].connect(this.getOutput())}else{this.source.connect(this.getOutput())}this._connected=true;return this}disconnect(){if(this._connected===false){return}if(this.filters.length>0){this.source.disconnect(this.filters[0]);for(let e=1,t=this.filters.length;e<t;e++){this.filters[e-1].disconnect(this.filters[e])}this.filters[this.filters.length-1].disconnect(this.getOutput())}else{this.source.disconnect(this.getOutput())}this._connected=false;return this}getFilters(){return this.filters}setFilters(e){if(!e)e=[];if(this._connected===true){this.disconnect();this.filters=e.slice();this.connect()}else{this.filters=e.slice()}return this}setDetune(e){this.detune=e;if(this.isPlaying===true&&this.source.detune!==undefined){this.source.detune.setTargetAtTime(this.detune,this.context.currentTime,.01)}return this}getDetune(){return this.detune}getFilter(){return this.getFilters()[0]}setFilter(e){return this.setFilters(e?[e]:[])}setPlaybackRate(e){if(this.hasPlaybackControl===false){console.warn("THREE.Audio: this Audio has no playback control.");return}this.playbackRate=e;if(this.isPlaying===true){this.source.playbackRate.setTargetAtTime(this.playbackRate,this.context.currentTime,.01)}return this}getPlaybackRate(){return this.playbackRate}onEnded(){this.isPlaying=false}getLoop(){if(this.hasPlaybackControl===false){console.warn("THREE.Audio: this Audio has no playback control.");return false}return this.loop}setLoop(e){if(this.hasPlaybackControl===false){console.warn("THREE.Audio: this Audio has no playback control.");return}this.loop=e;if(this.isPlaying===true){this.source.loop=this.loop}return this}setLoopStart(e){this.loopStart=e;return this}setLoopEnd(e){this.loopEnd=e;return this}getVolume(){return this.gain.gain.value}setVolume(e){this.gain.gain.setTargetAtTime(e,this.context.currentTime,.01);return this}}const _position=new Vector3;const _quaternion=new Quaternion;const _scale=new Vector3;const _orientation=new Vector3;class PositionalAudio extends Audio{constructor(e){super(e);this.panner=this.context.createPanner();this.panner.panningModel="HRTF";this.panner.connect(this.gain)}connect(){super.connect();this.panner.connect(this.gain)}disconnect(){super.disconnect();this.panner.disconnect(this.gain)}getOutput(){return this.panner}getRefDistance(){return this.panner.refDistance}setRefDistance(e){this.panner.refDistance=e;return this}getRolloffFactor(){return this.panner.rolloffFactor}setRolloffFactor(e){this.panner.rolloffFactor=e;return this}getDistanceModel(){return this.panner.distanceModel}setDistanceModel(e){this.panner.distanceModel=e;return this}getMaxDistance(){return this.panner.maxDistance}setMaxDistance(e){this.panner.maxDistance=e;return this}setDirectionalCone(e,t,n){this.panner.coneInnerAngle=e;this.panner.coneOuterAngle=t;this.panner.coneOuterGain=n;return this}updateMatrixWorld(e){super.updateMatrixWorld(e);if(this.hasPlaybackControl===true&&this.isPlaying===false)return;this.matrixWorld.decompose(_position,_quaternion,_scale);_orientation.set(0,0,1).applyQuaternion(_quaternion);const t=this.panner;if(t.positionX){const n=this.context.currentTime+this.listener.timeDelta;t.positionX.linearRampToValueAtTime(_position.x,n);t.positionY.linearRampToValueAtTime(_position.y,n);t.positionZ.linearRampToValueAtTime(_position.z,n);t.orientationX.linearRampToValueAtTime(_orientation.x,n);t.orientationY.linearRampToValueAtTime(_orientation.y,n);t.orientationZ.linearRampToValueAtTime(_orientation.z,n)}else{t.setPosition(_position.x,_position.y,_position.z);t.setOrientation(_orientation.x,_orientation.y,_orientation.z)}}}class AudioAnalyser{constructor(e,t=2048){this.analyser=e.context.createAnalyser();this.analyser.fftSize=t;this.data=new Uint8Array(this.analyser.frequencyBinCount);e.getOutput().connect(this.analyser)}getFrequencyData(){this.analyser.getByteFrequencyData(this.data);return this.data}getAverageFrequency(){let t=0;const n=this.getFrequencyData();for(let e=0;e<n.length;e++){t+=n[e]}return t/n.length}}class PropertyMixer{constructor(e,t,n){this.binding=e;this.valueSize=n;let i,r,s;switch(t){case"quaternion":i=this._slerp;r=this._slerpAdditive;s=this._setAdditiveIdentityQuaternion;this.buffer=new Float64Array(n*6);this._workIndex=5;break;case"string":case"bool":i=this._select;r=this._select;s=this._setAdditiveIdentityOther;this.buffer=new Array(n*5);break;default:i=this._lerp;r=this._lerpAdditive;s=this._setAdditiveIdentityNumeric;this.buffer=new Float64Array(n*5)}this._mixBufferRegion=i;this._mixBufferRegionAdditive=r;this._setIdentity=s;this._origIndex=3;this._addIndex=4;this.cumulativeWeight=0;this.cumulativeWeightAdditive=0;this.useCount=0;this.referenceCount=0}accumulate(e,t){const n=this.buffer,i=this.valueSize,r=e*i+i;let s=this.cumulativeWeight;if(s===0){for(let e=0;e!==i;++e){n[r+e]=n[e]}s=t}else{s+=t;const a=t/s;this._mixBufferRegion(n,r,0,a,i)}this.cumulativeWeight=s}accumulateAdditive(e){const t=this.buffer,n=this.valueSize,i=n*this._addIndex;if(this.cumulativeWeightAdditive===0){this._setIdentity()}this._mixBufferRegionAdditive(t,i,0,e,n);this.cumulativeWeightAdditive+=e}apply(e){const n=this.valueSize,i=this.buffer,r=e*n+n,t=this.cumulativeWeight,s=this.cumulativeWeightAdditive,a=this.binding;this.cumulativeWeight=0;this.cumulativeWeightAdditive=0;if(t<1){const o=n*this._origIndex;this._mixBufferRegion(i,r,o,1-t,n)}if(s>0){this._mixBufferRegionAdditive(i,r,this._addIndex*n,1,n)}for(let e=n,t=n+n;e!==t;++e){if(i[e]!==i[e+n]){a.setValue(i,r);break}}}saveOriginalState(){const e=this.binding;const n=this.buffer,i=this.valueSize,r=i*this._origIndex;e.getValue(n,r);for(let e=i,t=r;e!==t;++e){n[e]=n[r+e%i]}this._setIdentity();this.cumulativeWeight=0;this.cumulativeWeightAdditive=0}restoreOriginalState(){const e=this.valueSize*3;this.binding.setValue(this.buffer,e)}_setAdditiveIdentityNumeric(){const t=this._addIndex*this.valueSize;const n=t+this.valueSize;for(let e=t;e<n;e++){this.buffer[e]=0}}_setAdditiveIdentityQuaternion(){this._setAdditiveIdentityNumeric();this.buffer[this._addIndex*this.valueSize+3]=1}_setAdditiveIdentityOther(){const t=this._origIndex*this.valueSize;const n=this._addIndex*this.valueSize;for(let e=0;e<this.valueSize;e++){this.buffer[n+e]=this.buffer[t+e]}}_select(t,n,i,e,r){if(e>=.5){for(let e=0;e!==r;++e){t[n+e]=t[i+e]}}}_slerp(e,t,n,i){Quaternion.slerpFlat(e,t,e,t,e,n,i)}_slerpAdditive(e,t,n,i,r){const s=this._workIndex*r;Quaternion.multiplyQuaternionsFlat(e,s,e,t,e,n);Quaternion.slerpFlat(e,t,e,t,e,s,i)}_lerp(t,n,i,r,s){const a=1-r;for(let e=0;e!==s;++e){const o=n+e;t[o]=t[o]*a+t[i+e]*r}}_lerpAdditive(t,n,i,r,s){for(let e=0;e!==s;++e){const a=n+e;t[a]=t[a]+t[i+e]*r}}}const _RESERVED_CHARS_RE="\\[\\]\\.:\\/";const _reservedRe=new RegExp("["+_RESERVED_CHARS_RE+"]","g");const _wordChar="[^"+_RESERVED_CHARS_RE+"]";const _wordCharOrDot="[^"+_RESERVED_CHARS_RE.replace("\\.","")+"]";const _directoryRe=/((?:WC+[\/:])*)/.source.replace("WC",_wordChar);const _nodeRe=/(WCOD+)?/.source.replace("WCOD",_wordCharOrDot);const _objectRe=/(?:\.(WC+)(?:\[(.+)\])?)?/.source.replace("WC",_wordChar);const _propertyRe=/\.(WC+)(?:\[(.+)\])?/.source.replace("WC",_wordChar);const _trackRe=new RegExp(""+"^"+_directoryRe+_nodeRe+_objectRe+_propertyRe+"$");const _supportedObjectNames=["material","materials","bones","map"];class Composite{constructor(e,t,n){const i=n||PropertyBinding.parseTrackName(t);this._targetGroup=e;this._bindings=e.subscribe_(t,i)}getValue(e,t){this.bind();const n=this._targetGroup.nCachedObjects_,i=this._bindings[n];if(i!==undefined)i.getValue(e,t)}setValue(n,i){const r=this._bindings;for(let e=this._targetGroup.nCachedObjects_,t=r.length;e!==t;++e){r[e].setValue(n,i)}}bind(){const n=this._bindings;for(let e=this._targetGroup.nCachedObjects_,t=n.length;e!==t;++e){n[e].bind()}}unbind(){const n=this._bindings;for(let e=this._targetGroup.nCachedObjects_,t=n.length;e!==t;++e){n[e].unbind()}}}class PropertyBinding{constructor(e,t,n){this.path=t;this.parsedPath=n||PropertyBinding.parseTrackName(t);this.node=PropertyBinding.findNode(e,this.parsedPath.nodeName);this.rootNode=e;this.getValue=this._getValue_unbound;this.setValue=this._setValue_unbound}static create(e,t,n){if(!(e&&e.isAnimationObjectGroup)){return new PropertyBinding(e,t,n)}else{return new PropertyBinding.Composite(e,t,n)}}static sanitizeNodeName(e){return e.replace(/\s/g,"_").replace(_reservedRe,"")}static parseTrackName(e){const t=_trackRe.exec(e);if(t===null){throw new Error("PropertyBinding: Cannot parse trackName: "+e)}const n={nodeName:t[2],objectName:t[3],objectIndex:t[4],propertyName:t[5],propertyIndex:t[6]};const i=n.nodeName&&n.nodeName.lastIndexOf(".");if(i!==undefined&&i!==-1){const r=n.nodeName.substring(i+1);if(_supportedObjectNames.indexOf(r)!==-1){n.nodeName=n.nodeName.substring(0,i);n.objectName=r}}if(n.propertyName===null||n.propertyName.length===0){throw new Error("PropertyBinding: can not parse propertyName from trackName: "+e)}return n}static findNode(e,r){if(r===undefined||r===""||r==="."||r===-1||r===e.name||r===e.uuid){return e}if(e.skeleton){const t=e.skeleton.getBoneByName(r);if(t!==undefined){return t}}if(e.children){const s=function(t){for(let e=0;e<t.length;e++){const n=t[e];if(n.name===r||n.uuid===r){return n}const i=s(n.children);if(i)return i}return null};const n=s(e.children);if(n){return n}}return null}_getValue_unavailable(){}_setValue_unavailable(){}_getValue_direct(e,t){e[t]=this.targetObject[this.propertyName]}_getValue_array(n,i){const r=this.resolvedProperty;for(let e=0,t=r.length;e!==t;++e){n[i++]=r[e]}}_getValue_arrayElement(e,t){e[t]=this.resolvedProperty[this.propertyIndex]}_getValue_toArray(e,t){this.resolvedProperty.toArray(e,t)}_setValue_direct(e,t){this.targetObject[this.propertyName]=e[t]}_setValue_direct_setNeedsUpdate(e,t){this.targetObject[this.propertyName]=e[t];this.targetObject.needsUpdate=true}_setValue_direct_setMatrixWorldNeedsUpdate(e,t){this.targetObject[this.propertyName]=e[t];this.targetObject.matrixWorldNeedsUpdate=true}_setValue_array(n,i){const r=this.resolvedProperty;for(let e=0,t=r.length;e!==t;++e){r[e]=n[i++]}}_setValue_array_setNeedsUpdate(n,i){const r=this.resolvedProperty;for(let e=0,t=r.length;e!==t;++e){r[e]=n[i++]}this.targetObject.needsUpdate=true}_setValue_array_setMatrixWorldNeedsUpdate(n,i){const r=this.resolvedProperty;for(let e=0,t=r.length;e!==t;++e){r[e]=n[i++]}this.targetObject.matrixWorldNeedsUpdate=true}_setValue_arrayElement(e,t){this.resolvedProperty[this.propertyIndex]=e[t]}_setValue_arrayElement_setNeedsUpdate(e,t){this.resolvedProperty[this.propertyIndex]=e[t];this.targetObject.needsUpdate=true}_setValue_arrayElement_setMatrixWorldNeedsUpdate(e,t){this.resolvedProperty[this.propertyIndex]=e[t];this.targetObject.matrixWorldNeedsUpdate=true}_setValue_fromArray(e,t){this.resolvedProperty.fromArray(e,t)}_setValue_fromArray_setNeedsUpdate(e,t){this.resolvedProperty.fromArray(e,t);this.targetObject.needsUpdate=true}_setValue_fromArray_setMatrixWorldNeedsUpdate(e,t){this.resolvedProperty.fromArray(e,t);this.targetObject.matrixWorldNeedsUpdate=true}_getValue_unbound(e,t){this.bind();this.getValue(e,t)}_setValue_unbound(e,t){this.bind();this.setValue(e,t)}bind(){let n=this.node;const e=this.parsedPath;const i=e.objectName;const t=e.propertyName;let r=e.propertyIndex;if(!n){n=PropertyBinding.findNode(this.rootNode,e.nodeName);this.node=n}this.getValue=this._getValue_unavailable;this.setValue=this._setValue_unavailable;if(!n){console.warn("THREE.PropertyBinding: No target node found for track: "+this.path+".");return}if(i){let t=e.objectIndex;switch(i){case"materials":if(!n.material){console.error("THREE.PropertyBinding: Can not bind to material as node does not have a material.",this);return}if(!n.material.materials){console.error("THREE.PropertyBinding: Can not bind to material.materials as node.material does not have a materials array.",this);return}n=n.material.materials;break;case"bones":if(!n.skeleton){console.error("THREE.PropertyBinding: Can not bind to bones as node does not have a skeleton.",this);return}n=n.skeleton.bones;for(let e=0;e<n.length;e++){if(n[e].name===t){t=e;break}}break;case"map":if("map"in n){n=n.map;break}if(!n.material){console.error("THREE.PropertyBinding: Can not bind to material as node does not have a material.",this);return}if(!n.material.map){console.error("THREE.PropertyBinding: Can not bind to material.map as node.material does not have a map.",this);return}n=n.material.map;break;default:if(n[i]===undefined){console.error("THREE.PropertyBinding: Can not bind to objectName of node undefined.",this);return}n=n[i]}if(t!==undefined){if(n[t]===undefined){console.error("THREE.PropertyBinding: Trying to bind to objectIndex of objectName, but is undefined.",this,n);return}n=n[t]}}const s=n[t];if(s===undefined){const l=e.nodeName;console.error("THREE.PropertyBinding: Trying to update property for track: "+l+"."+t+" but it wasn't found.",n);return}let a=this.Versioning.None;this.targetObject=n;if(n.needsUpdate!==undefined){a=this.Versioning.NeedsUpdate}else if(n.matrixWorldNeedsUpdate!==undefined){a=this.Versioning.MatrixWorldNeedsUpdate}let o=this.BindingType.Direct;if(r!==undefined){if(t==="morphTargetInfluences"){if(!n.geometry){console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.",this);return}if(!n.geometry.morphAttributes){console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphAttributes.",this);return}if(n.morphTargetDictionary[r]!==undefined){r=n.morphTargetDictionary[r]}}o=this.BindingType.ArrayElement;this.resolvedProperty=s;this.propertyIndex=r}else if(s.fromArray!==undefined&&s.toArray!==undefined){o=this.BindingType.HasFromToArray;this.resolvedProperty=s}else if(Array.isArray(s)){o=this.BindingType.EntireArray;this.resolvedProperty=s}else{this.propertyName=t}this.getValue=this.GetterByBindingType[o];this.setValue=this.SetterByBindingTypeAndVersioning[o][a]}unbind(){this.node=null;this.getValue=this._getValue_unbound;this.setValue=this._setValue_unbound}}PropertyBinding.Composite=Composite;PropertyBinding.prototype.BindingType={Direct:0,EntireArray:1,ArrayElement:2,HasFromToArray:3};PropertyBinding.prototype.Versioning={None:0,NeedsUpdate:1,MatrixWorldNeedsUpdate:2};PropertyBinding.prototype.GetterByBindingType=[PropertyBinding.prototype._getValue_direct,PropertyBinding.prototype._getValue_array,PropertyBinding.prototype._getValue_arrayElement,PropertyBinding.prototype._getValue_toArray];PropertyBinding.prototype.SetterByBindingTypeAndVersioning=[[PropertyBinding.prototype._setValue_direct,PropertyBinding.prototype._setValue_direct_setNeedsUpdate,PropertyBinding.prototype._setValue_direct_setMatrixWorldNeedsUpdate],[PropertyBinding.prototype._setValue_array,PropertyBinding.prototype._setValue_array_setNeedsUpdate,PropertyBinding.prototype._setValue_array_setMatrixWorldNeedsUpdate],[PropertyBinding.prototype._setValue_arrayElement,PropertyBinding.prototype._setValue_arrayElement_setNeedsUpdate,PropertyBinding.prototype._setValue_arrayElement_setMatrixWorldNeedsUpdate],[PropertyBinding.prototype._setValue_fromArray,PropertyBinding.prototype._setValue_fromArray_setNeedsUpdate,PropertyBinding.prototype._setValue_fromArray_setMatrixWorldNeedsUpdate]];class AnimationObjectGroup{constructor(){this.isAnimationObjectGroup=true;this.uuid=generateUUID();this._objects=Array.prototype.slice.call(arguments);this.nCachedObjects_=0;const n={};this._indicesByUUID=n;for(let e=0,t=arguments.length;e!==t;++e){n[arguments[e].uuid]=e}this._paths=[];this._parsedPaths=[];this._bindings=[];this._bindingsIndicesByPath={};const e=this;this.stats={objects:{get total(){return e._objects.length},get inUse(){return this.total-e.nCachedObjects_}},get bindingsPerObject(){return e._bindings.length}}}add(){const i=this._objects,r=this._indicesByUUID,s=this._paths,a=this._parsedPaths,o=this._bindings,l=o.length;let c=undefined,u=i.length,h=this.nCachedObjects_;for(let e=0,t=arguments.length;e!==t;++e){const d=arguments[e],f=d.uuid;let n=r[f];if(n===undefined){n=u++;r[f]=n;i.push(d);for(let e=0,t=l;e!==t;++e){o[e].push(new PropertyBinding(d,s[e],a[e]))}}else if(n<h){c=i[n];const p=--h,m=i[p];r[m.uuid]=n;i[n]=m;r[f]=p;i[p]=d;for(let t=0,e=l;t!==e;++t){const g=o[t],_=g[p];let e=g[n];g[n]=_;if(e===undefined){e=new PropertyBinding(d,s[t],a[t])}g[p]=e}}else if(i[n]!==c){console.error("THREE.AnimationObjectGroup: Different objects with the same UUID "+"detected. Clean the caches or recreate your infrastructure when reloading scenes.")}}this.nCachedObjects_=h}remove(){const n=this._objects,i=this._indicesByUUID,r=this._bindings,s=r.length;let a=this.nCachedObjects_;for(let e=0,t=arguments.length;e!==t;++e){const o=arguments[e],l=o.uuid,c=i[l];if(c!==undefined&&c>=a){const u=a++,h=n[u];i[h.uuid]=c;n[c]=h;i[l]=u;n[u]=o;for(let e=0,t=s;e!==t;++e){const d=r[e],f=d[u],p=d[c];d[c]=f;d[u]=p}}}this.nCachedObjects_=a}uncache(){const n=this._objects,i=this._indicesByUUID,r=this._bindings,s=r.length;let a=this.nCachedObjects_,o=n.length;for(let e=0,t=arguments.length;e!==t;++e){const l=arguments[e],c=l.uuid,u=i[c];if(u!==undefined){delete i[c];if(u<a){const h=--a,d=n[h],f=--o,p=n[f];i[d.uuid]=u;n[u]=d;i[p.uuid]=h;n[h]=p;n.pop();for(let e=0,t=s;e!==t;++e){const m=r[e],g=m[h],_=m[f];m[u]=g;m[h]=_;m.pop()}}else{const f=--o,p=n[f];if(f>0){i[p.uuid]=u}n[u]=p;n.pop();for(let e=0,t=s;e!==t;++e){const m=r[e];m[u]=m[f];m.pop()}}}}this.nCachedObjects_=a}subscribe_(n,i){const e=this._bindingsIndicesByPath;let t=e[n];const r=this._bindings;if(t!==undefined)return r[t];const s=this._paths,a=this._parsedPaths,o=this._objects,l=o.length,c=this.nCachedObjects_,u=new Array(l);t=r.length;e[n]=t;s.push(n);a.push(i);r.push(u);for(let e=c,t=o.length;e!==t;++e){const h=o[e];u[e]=new PropertyBinding(h,n,i)}return u}unsubscribe_(e){const t=this._bindingsIndicesByPath,n=t[e];if(n!==undefined){const i=this._paths,r=this._parsedPaths,s=this._bindings,a=s.length-1,o=s[a],l=e[a];t[l]=n;s[n]=o;s.pop();r[n]=r[a];r.pop();i[n]=i[a];i.pop()}}}class AnimationAction{constructor(e,t,n=null,i=t.blendMode){this._mixer=e;this._clip=t;this._localRoot=n;this.blendMode=i;const r=t.tracks,s=r.length,a=new Array(s);const o={endingStart:ZeroCurvatureEnding,endingEnd:ZeroCurvatureEnding};for(let e=0;e!==s;++e){const l=r[e].createInterpolant(null);a[e]=l;l.settings=o}this._interpolantSettings=o;this._interpolants=a;this._propertyBindings=new Array(s);this._cacheIndex=null;this._byClipCacheIndex=null;this._timeScaleInterpolant=null;this._weightInterpolant=null;this.loop=LoopRepeat;this._loopCount=-1;this._startTime=null;this.time=0;this.timeScale=1;this._effectiveTimeScale=1;this.weight=1;this._effectiveWeight=1;this.repetitions=Infinity;this.paused=false;this.enabled=true;this.clampWhenFinished=false;this.zeroSlopeAtStart=true;this.zeroSlopeAtEnd=true}play(){this._mixer._activateAction(this);return this}stop(){this._mixer._deactivateAction(this);return this.reset()}reset(){this.paused=false;this.enabled=true;this.time=0;this._loopCount=-1;this._startTime=null;return this.stopFading().stopWarping()}isRunning(){return this.enabled&&!this.paused&&this.timeScale!==0&&this._startTime===null&&this._mixer._isActiveAction(this)}isScheduled(){return this._mixer._isActiveAction(this)}startAt(e){this._startTime=e;return this}setLoop(e,t){this.loop=e;this.repetitions=t;return this}setEffectiveWeight(e){this.weight=e;this._effectiveWeight=this.enabled?e:0;return this.stopFading()}getEffectiveWeight(){return this._effectiveWeight}fadeIn(e){return this._scheduleFading(e,0,1)}fadeOut(e){return this._scheduleFading(e,1,0)}crossFadeFrom(e,t,n){e.fadeOut(t);this.fadeIn(t);if(n){const i=this._clip.duration,r=e._clip.duration,s=r/i,a=i/r;e.warp(1,s,t);this.warp(a,1,t)}return this}crossFadeTo(e,t,n){return e.crossFadeFrom(this,t,n)}stopFading(){const e=this._weightInterpolant;if(e!==null){this._weightInterpolant=null;this._mixer._takeBackControlInterpolant(e)}return this}setEffectiveTimeScale(e){this.timeScale=e;this._effectiveTimeScale=this.paused?0:e;return this.stopWarping()}getEffectiveTimeScale(){return this._effectiveTimeScale}setDuration(e){this.timeScale=this._clip.duration/e;return this.stopWarping()}syncWith(e){this.time=e.time;this.timeScale=e.timeScale;return this.stopWarping()}halt(e){return this.warp(this._effectiveTimeScale,0,e)}warp(e,t,n){const i=this._mixer,r=i.time,s=this.timeScale;let a=this._timeScaleInterpolant;if(a===null){a=i._lendControlInterpolant();this._timeScaleInterpolant=a}const o=a.parameterPositions,l=a.sampleValues;o[0]=r;o[1]=r+n;l[0]=e/s;l[1]=t/s;return this}stopWarping(){const e=this._timeScaleInterpolant;if(e!==null){this._timeScaleInterpolant=null;this._mixer._takeBackControlInterpolant(e)}return this}getMixer(){return this._mixer}getClip(){return this._clip}getRoot(){return this._localRoot||this._mixer._root}_update(e,t,n,i){if(!this.enabled){this._updateWeight(e);return}const r=this._startTime;if(r!==null){const o=(e-r)*n;if(o<0||n===0){t=0}else{this._startTime=null;t=n*o}}t*=this._updateTimeScale(e);const s=this._updateTime(t);const a=this._updateWeight(e);if(a>0){const l=this._interpolants;const c=this._propertyBindings;switch(this.blendMode){case AdditiveAnimationBlendMode:for(let e=0,t=l.length;e!==t;++e){l[e].evaluate(s);c[e].accumulateAdditive(a)}break;case NormalAnimationBlendMode:default:for(let e=0,t=l.length;e!==t;++e){l[e].evaluate(s);c[e].accumulate(i,a)}}}}_updateWeight(e){let t=0;if(this.enabled){t=this.weight;const n=this._weightInterpolant;if(n!==null){const i=n.evaluate(e)[0];t*=i;if(e>n.parameterPositions[1]){this.stopFading();if(i===0){this.enabled=false}}}}this._effectiveWeight=t;return t}_updateTimeScale(e){let t=0;if(!this.paused){t=this.timeScale;const n=this._timeScaleInterpolant;if(n!==null){const i=n.evaluate(e)[0];t*=i;if(e>n.parameterPositions[1]){this.stopWarping();if(t===0){this.paused=true}else{this.timeScale=t}}}}this._effectiveTimeScale=t;return t}_updateTime(e){const t=this._clip.duration;const n=this.loop;let i=this.time+e;let r=this._loopCount;const s=n===LoopPingPong;if(e===0){if(r===-1)return i;return s&&(r&1)===1?t-i:i}if(n===LoopOnce){if(r===-1){this._loopCount=0;this._setEndings(true,true,false)}e:{if(i>=t){i=t}else if(i<0){i=0}else{this.time=i;break e}if(this.clampWhenFinished)this.paused=true;else this.enabled=false;this.time=i;this._mixer.dispatchEvent({type:"finished",action:this,direction:e<0?-1:1})}}else{if(r===-1){if(e>=0){r=0;this._setEndings(true,this.repetitions===0,s)}else{this._setEndings(this.repetitions===0,true,s)}}if(i>=t||i<0){const a=Math.floor(i/t);i-=t*a;r+=Math.abs(a);const o=this.repetitions-r;if(o<=0){if(this.clampWhenFinished)this.paused=true;else this.enabled=false;i=e>0?t:0;this.time=i;this._mixer.dispatchEvent({type:"finished",action:this,direction:e>0?1:-1})}else{if(o===1){const l=e<0;this._setEndings(l,!l,s)}else{this._setEndings(false,false,s)}this._loopCount=r;this.time=i;this._mixer.dispatchEvent({type:"loop",action:this,loopDelta:a})}}else{this.time=i}if(s&&(r&1)===1){return t-i}}return i}_setEndings(e,t,n){const i=this._interpolantSettings;if(n){i.endingStart=ZeroSlopeEnding;i.endingEnd=ZeroSlopeEnding}else{if(e){i.endingStart=this.zeroSlopeAtStart?ZeroSlopeEnding:ZeroCurvatureEnding}else{i.endingStart=WrapAroundEnding}if(t){i.endingEnd=this.zeroSlopeAtEnd?ZeroSlopeEnding:ZeroCurvatureEnding}else{i.endingEnd=WrapAroundEnding}}}_scheduleFading(e,t,n){const i=this._mixer,r=i.time;let s=this._weightInterpolant;if(s===null){s=i._lendControlInterpolant();this._weightInterpolant=s}const a=s.parameterPositions,o=s.sampleValues;a[0]=r;o[0]=t;a[1]=r+e;o[1]=n;return this}}const _controlInterpolantsResultBuffer=new Float32Array(1);class AnimationMixer extends EventDispatcher{constructor(e){super();this._root=e;this._initMemoryManager();this._accuIndex=0;this.time=0;this.timeScale=1}_bindAction(e,n){const i=e._localRoot||this._root,r=e._clip.tracks,s=r.length,a=e._propertyBindings,o=e._interpolants,l=i.uuid,t=this._bindingsByRootAndName;let c=t[l];if(c===undefined){c={};t[l]=c}for(let t=0;t!==s;++t){const u=r[t],h=u.name;let e=c[h];if(e!==undefined){++e.referenceCount;a[t]=e}else{e=a[t];if(e!==undefined){if(e._cacheIndex===null){++e.referenceCount;this._addInactiveBinding(e,l,h)}continue}const d=n&&n._propertyBindings[t].binding.parsedPath;e=new PropertyMixer(PropertyBinding.create(i,h,d),u.ValueTypeName,u.getValueSize());++e.referenceCount;this._addInactiveBinding(e,l,h);a[t]=e}o[t].resultBuffer=e.buffer}}_activateAction(e){if(!this._isActiveAction(e)){if(e._cacheIndex===null){const t=(e._localRoot||this._root).uuid,i=e._clip.uuid,r=this._actionsByClip[i];this._bindAction(e,r&&r.knownActions[0]);this._addInactiveAction(e,i,t)}const n=e._propertyBindings;for(let e=0,t=n.length;e!==t;++e){const s=n[e];if(s.useCount++===0){this._lendBinding(s);s.saveOriginalState()}}this._lendAction(e)}}_deactivateAction(e){if(this._isActiveAction(e)){const n=e._propertyBindings;for(let e=0,t=n.length;e!==t;++e){const i=n[e];if(--i.useCount===0){i.restoreOriginalState();this._takeBackBinding(i)}}this._takeBackAction(e)}}_initMemoryManager(){this._actions=[];this._nActiveActions=0;this._actionsByClip={};this._bindings=[];this._nActiveBindings=0;this._bindingsByRootAndName={};this._controlInterpolants=[];this._nActiveControlInterpolants=0;const e=this;this.stats={actions:{get total(){return e._actions.length},get inUse(){return e._nActiveActions}},bindings:{get total(){return e._bindings.length},get inUse(){return e._nActiveBindings}},controlInterpolants:{get total(){return e._controlInterpolants.length},get inUse(){return e._nActiveControlInterpolants}}}}_isActiveAction(e){const t=e._cacheIndex;return t!==null&&t<this._nActiveActions}_addInactiveAction(e,t,n){const i=this._actions,r=this._actionsByClip;let s=r[t];if(s===undefined){s={knownActions:[e],actionByRoot:{}};e._byClipCacheIndex=0;r[t]=s}else{const a=s.knownActions;e._byClipCacheIndex=a.length;a.push(e)}e._cacheIndex=i.length;i.push(e);s.actionByRoot[n]=e}_removeInactiveAction(e){const t=this._actions,n=t[t.length-1],i=e._cacheIndex;n._cacheIndex=i;t[i]=n;t.pop();e._cacheIndex=null;const r=e._clip.uuid,s=this._actionsByClip,a=s[r],o=a.knownActions,l=o[o.length-1],c=e._byClipCacheIndex;l._byClipCacheIndex=c;o[c]=l;o.pop();e._byClipCacheIndex=null;const u=a.actionByRoot,h=(e._localRoot||this._root).uuid;delete u[h];if(o.length===0){delete s[r]}this._removeInactiveBindingsForAction(e)}_removeInactiveBindingsForAction(e){const n=e._propertyBindings;for(let e=0,t=n.length;e!==t;++e){const i=n[e];if(--i.referenceCount===0){this._removeInactiveBinding(i)}}}_lendAction(e){const t=this._actions,n=e._cacheIndex,i=this._nActiveActions++,r=t[i];e._cacheIndex=i;t[i]=e;r._cacheIndex=n;t[n]=r}_takeBackAction(e){const t=this._actions,n=e._cacheIndex,i=--this._nActiveActions,r=t[i];e._cacheIndex=i;t[i]=e;r._cacheIndex=n;t[n]=r}_addInactiveBinding(e,t,n){const i=this._bindingsByRootAndName,r=this._bindings;let s=i[t];if(s===undefined){s={};i[t]=s}s[n]=e;e._cacheIndex=r.length;r.push(e)}_removeInactiveBinding(e){const t=this._bindings,n=e.binding,i=n.rootNode.uuid,r=n.path,s=this._bindingsByRootAndName,a=s[i],o=t[t.length-1],l=e._cacheIndex;o._cacheIndex=l;t[l]=o;t.pop();delete a[r];if(Object.keys(a).length===0){delete s[i]}}_lendBinding(e){const t=this._bindings,n=e._cacheIndex,i=this._nActiveBindings++,r=t[i];e._cacheIndex=i;t[i]=e;r._cacheIndex=n;t[n]=r}_takeBackBinding(e){const t=this._bindings,n=e._cacheIndex,i=--this._nActiveBindings,r=t[i];e._cacheIndex=i;t[i]=e;r._cacheIndex=n;t[n]=r}_lendControlInterpolant(){const e=this._controlInterpolants,t=this._nActiveControlInterpolants++;let n=e[t];if(n===undefined){n=new LinearInterpolant(new Float32Array(2),new Float32Array(2),1,_controlInterpolantsResultBuffer);n.__cacheIndex=t;e[t]=n}return n}_takeBackControlInterpolant(e){const t=this._controlInterpolants,n=e.__cacheIndex,i=--this._nActiveControlInterpolants,r=t[i];e.__cacheIndex=i;t[i]=e;r.__cacheIndex=n;t[n]=r}clipAction(e,t,n){const i=t||this._root,r=i.uuid;let s=typeof e==="string"?AnimationClip.findByName(i,e):e;const a=s!==null?s.uuid:e;const o=this._actionsByClip[a];let l=null;if(n===undefined){if(s!==null){n=s.blendMode}else{n=NormalAnimationBlendMode}}if(o!==undefined){const u=o.actionByRoot[r];if(u!==undefined&&u.blendMode===n){return u}l=o.knownActions[0];if(s===null)s=l._clip}if(s===null)return null;const c=new AnimationAction(this,s,t,n);this._bindAction(c,l);this._addInactiveAction(c,a,r);return c}existingAction(e,t){const n=t||this._root,i=n.uuid,r=typeof e==="string"?AnimationClip.findByName(n,e):e,s=r?r.uuid:e,a=this._actionsByClip[s];if(a!==undefined){return a.actionByRoot[i]||null}return null}stopAllAction(){const t=this._actions,n=this._nActiveActions;for(let e=n-1;e>=0;--e){t[e].stop()}return this}update(t){t*=this.timeScale;const n=this._actions,i=this._nActiveActions,r=this.time+=t,s=Math.sign(t),a=this._accuIndex^=1;for(let e=0;e!==i;++e){const c=n[e];c._update(r,t,s,a)}const o=this._bindings,l=this._nActiveBindings;for(let e=0;e!==l;++e){o[e].apply(a)}return this}setTime(e){this.time=0;for(let e=0;e<this._actions.length;e++){this._actions[e].time=0}return this.update(e)}getRoot(){return this._root}uncacheClip(e){const n=this._actions,t=e.uuid,i=this._actionsByClip,r=i[t];if(r!==undefined){const s=r.knownActions;for(let e=0,t=s.length;e!==t;++e){const a=s[e];this._deactivateAction(a);const o=a._cacheIndex,l=n[n.length-1];a._cacheIndex=null;a._byClipCacheIndex=null;l._cacheIndex=o;n[o]=l;n.pop();this._removeInactiveBindingsForAction(a)}delete i[t]}}uncacheRoot(e){const t=e.uuid,n=this._actionsByClip;for(const s in n){const a=n[s].actionByRoot,o=a[t];if(o!==undefined){this._deactivateAction(o);this._removeInactiveAction(o)}}const i=this._bindingsByRootAndName,r=i[t];if(r!==undefined){for(const l in r){const c=r[l];c.restoreOriginalState();this._removeInactiveBinding(c)}}}uncacheAction(e,t){const n=this.existingAction(e,t);if(n!==null){this._deactivateAction(n);this._removeInactiveAction(n)}}}class Uniform{constructor(e){this.value=e}clone(){return new Uniform(this.value.clone===undefined?this.value:this.value.clone())}}let _id=0;class UniformsGroup extends EventDispatcher{constructor(){super();this.isUniformsGroup=true;Object.defineProperty(this,"id",{value:_id++});this.name="";this.usage=StaticDrawUsage;this.uniforms=[]}add(e){this.uniforms.push(e);return this}remove(e){const t=this.uniforms.indexOf(e);if(t!==-1)this.uniforms.splice(t,1);return this}setName(e){this.name=e;return this}setUsage(e){this.usage=e;return this}dispose(){this.dispatchEvent({type:"dispose"});return this}copy(e){this.name=e.name;this.usage=e.usage;const n=e.uniforms;this.uniforms.length=0;for(let e=0,t=n.length;e<t;e++){const i=Array.isArray(n[e])?n[e]:[n[e]];for(let e=0;e<i.length;e++){this.uniforms.push(i[e].clone())}}return this}clone(){return(new this.constructor).copy(this)}}class InstancedInterleavedBuffer extends InterleavedBuffer{constructor(e,t,n=1){super(e,t);this.isInstancedInterleavedBuffer=true;this.meshPerAttribute=n}copy(e){super.copy(e);this.meshPerAttribute=e.meshPerAttribute;return this}clone(e){const t=super.clone(e);t.meshPerAttribute=this.meshPerAttribute;return t}toJSON(e){const t=super.toJSON(e);t.isInstancedInterleavedBuffer=true;t.meshPerAttribute=this.meshPerAttribute;return t}}class GLBufferAttribute{constructor(e,t,n,i,r){this.isGLBufferAttribute=true;this.name="";this.buffer=e;this.type=t;this.itemSize=n;this.elementSize=i;this.count=r;this.version=0}set needsUpdate(e){if(e===true)this.version++}setBuffer(e){this.buffer=e;return this}setType(e,t){this.type=e;this.elementSize=t;return this}setItemSize(e){this.itemSize=e;return this}setCount(e){this.count=e;return this}}const _matrix=new Matrix4;class Raycaster{constructor(e,t,n=0,i=Infinity){this.ray=new Ray(e,t);this.near=n;this.far=i;this.camera=null;this.layers=new Layers;this.params={Mesh:{},Line:{threshold:1},LOD:{},Points:{threshold:1},Sprite:{}}}set(e,t){this.ray.set(e,t)}setFromCamera(e,t){if(t.isPerspectiveCamera){this.ray.origin.setFromMatrixPosition(t.matrixWorld);this.ray.direction.set(e.x,e.y,.5).unproject(t).sub(this.ray.origin).normalize();this.camera=t}else if(t.isOrthographicCamera){this.ray.origin.set(e.x,e.y,(t.near+t.far)/(t.near-t.far)).unproject(t);this.ray.direction.set(0,0,-1).transformDirection(t.matrixWorld);this.camera=t}else{console.error("THREE.Raycaster: Unsupported camera type: "+t.type)}}setFromXRController(e){_matrix.identity().extractRotation(e.matrixWorld);this.ray.origin.setFromMatrixPosition(e.matrixWorld);this.ray.direction.set(0,0,-1).applyMatrix4(_matrix);return this}intersectObject(e,t=true,n=[]){intersect(e,this,n,t);n.sort(ascSort);return n}intersectObjects(n,i=true,r=[]){for(let e=0,t=n.length;e<t;e++){intersect(n[e],this,r,i)}r.sort(ascSort);return r}}function ascSort(e,t){return e.distance-t.distance}function intersect(e,n,i,t){if(e.layers.test(n.layers)){e.raycast(n,i)}if(t===true){const r=e.children;for(let e=0,t=r.length;e<t;e++){intersect(r[e],n,i,true)}}}class Spherical{constructor(e=1,t=0,n=0){this.radius=e;this.phi=t;this.theta=n;return this}set(e,t,n){this.radius=e;this.phi=t;this.theta=n;return this}copy(e){this.radius=e.radius;this.phi=e.phi;this.theta=e.theta;return this}makeSafe(){const e=1e-6;this.phi=Math.max(e,Math.min(Math.PI-e,this.phi));return this}setFromVector3(e){return this.setFromCartesianCoords(e.x,e.y,e.z)}setFromCartesianCoords(e,t,n){this.radius=Math.sqrt(e*e+t*t+n*n);if(this.radius===0){this.theta=0;this.phi=0}else{this.theta=Math.atan2(e,n);this.phi=Math.acos(clamp(t/this.radius,-1,1))}return this}clone(){return(new this.constructor).copy(this)}}class Cylindrical{constructor(e=1,t=0,n=0){this.radius=e;this.theta=t;this.y=n;return this}set(e,t,n){this.radius=e;this.theta=t;this.y=n;return this}copy(e){this.radius=e.radius;this.theta=e.theta;this.y=e.y;return this}setFromVector3(e){return this.setFromCartesianCoords(e.x,e.y,e.z)}setFromCartesianCoords(e,t,n){this.radius=Math.sqrt(e*e+n*n);this.theta=Math.atan2(e,n);this.y=t;return this}clone(){return(new this.constructor).copy(this)}}const _vector$4=new Vector2;class Box2{constructor(e=new Vector2(+Infinity,+Infinity),t=new Vector2(-Infinity,-Infinity)){this.isBox2=true;this.min=e;this.max=t}set(e,t){this.min.copy(e);this.max.copy(t);return this}setFromPoints(n){this.makeEmpty();for(let e=0,t=n.length;e<t;e++){this.expandByPoint(n[e])}return this}setFromCenterAndSize(e,t){const n=_vector$4.copy(t).multiplyScalar(.5);this.min.copy(e).sub(n);this.max.copy(e).add(n);return this}clone(){return(new this.constructor).copy(this)}copy(e){this.min.copy(e.min);this.max.copy(e.max);return this}makeEmpty(){this.min.x=this.min.y=+Infinity;this.max.x=this.max.y=-Infinity;return this}isEmpty(){return this.max.x<this.min.x||this.max.y<this.min.y}getCenter(e){return this.isEmpty()?e.set(0,0):e.addVectors(this.min,this.max).multiplyScalar(.5)}getSize(e){return this.isEmpty()?e.set(0,0):e.subVectors(this.max,this.min)}expandByPoint(e){this.min.min(e);this.max.max(e);return this}expandByVector(e){this.min.sub(e);this.max.add(e);return this}expandByScalar(e){this.min.addScalar(-e);this.max.addScalar(e);return this}containsPoint(e){return e.x<this.min.x||e.x>this.max.x||e.y<this.min.y||e.y>this.max.y?false:true}containsBox(e){return this.min.x<=e.min.x&&e.max.x<=this.max.x&&this.min.y<=e.min.y&&e.max.y<=this.max.y}getParameter(e,t){return t.set((e.x-this.min.x)/(this.max.x-this.min.x),(e.y-this.min.y)/(this.max.y-this.min.y))}intersectsBox(e){return e.max.x<this.min.x||e.min.x>this.max.x||e.max.y<this.min.y||e.min.y>this.max.y?false:true}clampPoint(e,t){return t.copy(e).clamp(this.min,this.max)}distanceToPoint(e){return this.clampPoint(e,_vector$4).distanceTo(e)}intersect(e){this.min.max(e.min);this.max.min(e.max);if(this.isEmpty())this.makeEmpty();return this}union(e){this.min.min(e.min);this.max.max(e.max);return this}translate(e){this.min.add(e);this.max.add(e);return this}equals(e){return e.min.equals(this.min)&&e.max.equals(this.max)}}const _startP=new Vector3;const _startEnd=new Vector3;class Line3{constructor(e=new Vector3,t=new Vector3){this.start=e;this.end=t}set(e,t){this.start.copy(e);this.end.copy(t);return this}copy(e){this.start.copy(e.start);this.end.copy(e.end);return this}getCenter(e){return e.addVectors(this.start,this.end).multiplyScalar(.5)}delta(e){return e.subVectors(this.end,this.start)}distanceSq(){return this.start.distanceToSquared(this.end)}distance(){return this.start.distanceTo(this.end)}at(e,t){return this.delta(t).multiplyScalar(e).add(this.start)}closestPointToPointParameter(e,t){_startP.subVectors(e,this.start);_startEnd.subVectors(this.end,this.start);const n=_startEnd.dot(_startEnd);const i=_startEnd.dot(_startP);let r=i/n;if(t){r=clamp(r,0,1)}return r}closestPointToPoint(e,t,n){const i=this.closestPointToPointParameter(e,t);return this.delta(n).multiplyScalar(i).add(this.start)}applyMatrix4(e){this.start.applyMatrix4(e);this.end.applyMatrix4(e);return this}equals(e){return e.start.equals(this.start)&&e.end.equals(this.end)}clone(){return(new this.constructor).copy(this)}}const _vector$3=new Vector3;class SpotLightHelper extends Object3D{constructor(e,t){super();this.light=e;this.matrixAutoUpdate=false;this.color=t;this.type="SpotLightHelper";const n=new BufferGeometry;const i=[0,0,0,0,0,1,0,0,0,1,0,1,0,0,0,-1,0,1,0,0,0,0,1,1,0,0,0,0,-1,1];for(let e=0,t=1,n=32;e<n;e++,t++){const s=e/n*Math.PI*2;const a=t/n*Math.PI*2;i.push(Math.cos(s),Math.sin(s),1,Math.cos(a),Math.sin(a),1)}n.setAttribute("position",new Float32BufferAttribute(i,3));const r=new LineBasicMaterial({fog:false,toneMapped:false});this.cone=new LineSegments(n,r);this.add(this.cone);this.update()}dispose(){this.cone.geometry.dispose();this.cone.material.dispose()}update(){this.light.updateWorldMatrix(true,false);this.light.target.updateWorldMatrix(true,false);if(this.parent){this.parent.updateWorldMatrix(true);this.matrix.copy(this.parent.matrixWorld).invert().multiply(this.light.matrixWorld)}else{this.matrix.copy(this.light.matrixWorld)}this.matrixWorld.copy(this.light.matrixWorld);const e=this.light.distance?this.light.distance:1e3;const t=e*Math.tan(this.light.angle);this.cone.scale.set(t,t,e);_vector$3.setFromMatrixPosition(this.light.target.matrixWorld);this.cone.lookAt(_vector$3);if(this.color!==undefined){this.cone.material.color.set(this.color)}else{this.cone.material.color.copy(this.light.color)}}}const _vector$2=new Vector3;const _boneMatrix=new Matrix4;const _matrixWorldInv=new Matrix4;class SkeletonHelper extends LineSegments{constructor(e){const t=getBoneList(e);const n=new BufferGeometry;const i=[];const r=[];const s=new Color(0,0,1);const a=new Color(0,1,0);for(let e=0;e<t.length;e++){const l=t[e];if(l.parent&&l.parent.isBone){i.push(0,0,0);i.push(0,0,0);r.push(s.r,s.g,s.b);r.push(a.r,a.g,a.b)}}n.setAttribute("position",new Float32BufferAttribute(i,3));n.setAttribute("color",new Float32BufferAttribute(r,3));const o=new LineBasicMaterial({vertexColors:true,depthTest:false,depthWrite:false,toneMapped:false,transparent:true});super(n,o);this.isSkeletonHelper=true;this.type="SkeletonHelper";this.root=e;this.bones=t;this.matrix=e.matrixWorld;this.matrixAutoUpdate=false}updateMatrixWorld(e){const n=this.bones;const t=this.geometry;const i=t.getAttribute("position");_matrixWorldInv.copy(this.root.matrixWorld).invert();for(let e=0,t=0;e<n.length;e++){const r=n[e];if(r.parent&&r.parent.isBone){_boneMatrix.multiplyMatrices(_matrixWorldInv,r.matrixWorld);_vector$2.setFromMatrixPosition(_boneMatrix);i.setXYZ(t,_vector$2.x,_vector$2.y,_vector$2.z);_boneMatrix.multiplyMatrices(_matrixWorldInv,r.parent.matrixWorld);_vector$2.setFromMatrixPosition(_boneMatrix);i.setXYZ(t+1,_vector$2.x,_vector$2.y,_vector$2.z);t+=2}}t.getAttribute("position").needsUpdate=true;super.updateMatrixWorld(e)}dispose(){this.geometry.dispose();this.material.dispose()}}function getBoneList(t){const n=[];if(t.isBone===true){n.push(t)}for(let e=0;e<t.children.length;e++){n.push.apply(n,getBoneList(t.children[e]))}return n}class PointLightHelper extends Mesh{constructor(e,t,n){const i=new SphereGeometry(t,4,2);const r=new MeshBasicMaterial({wireframe:true,fog:false,toneMapped:false});super(i,r);this.light=e;this.color=n;this.type="PointLightHelper";this.matrix=this.light.matrixWorld;this.matrixAutoUpdate=false;this.update()}dispose(){this.geometry.dispose();this.material.dispose()}update(){this.light.updateWorldMatrix(true,false);if(this.color!==undefined){this.material.color.set(this.color)}else{this.material.color.copy(this.light.color)}}}const _vector$1=new Vector3;const _color1=new Color;const _color2=new Color;class HemisphereLightHelper extends Object3D{constructor(e,t,n){super();this.light=e;this.matrix=e.matrixWorld;this.matrixAutoUpdate=false;this.color=n;this.type="HemisphereLightHelper";const i=new OctahedronGeometry(t);i.rotateY(Math.PI*.5);this.material=new MeshBasicMaterial({wireframe:true,fog:false,toneMapped:false});if(this.color===undefined)this.material.vertexColors=true;const r=i.getAttribute("position");const s=new Float32Array(r.count*3);i.setAttribute("color",new BufferAttribute(s,3));this.add(new Mesh(i,this.material));this.update()}dispose(){this.children[0].geometry.dispose();this.children[0].material.dispose()}update(){const e=this.children[0];if(this.color!==undefined){this.material.color.set(this.color)}else{const n=e.geometry.getAttribute("color");_color1.copy(this.light.color);_color2.copy(this.light.groundColor);for(let e=0,t=n.count;e<t;e++){const i=e<t/2?_color1:_color2;n.setXYZ(e,i.r,i.g,i.b)}n.needsUpdate=true}this.light.updateWorldMatrix(true,false);e.lookAt(_vector$1.setFromMatrixPosition(this.light.matrixWorld).negate())}}class GridHelper extends LineSegments{constructor(e=10,i=10,r=4473924,s=8947848){r=new Color(r);s=new Color(s);const a=i/2;const o=e/i;const l=e/2;const c=[],u=[];for(let e=0,t=0,n=-l;e<=i;e++,n+=o){c.push(-l,0,n,l,0,n);c.push(n,0,-l,n,0,l);const h=e===a?r:s;h.toArray(u,t);t+=3;h.toArray(u,t);t+=3;h.toArray(u,t);t+=3;h.toArray(u,t);t+=3}const t=new BufferGeometry;t.setAttribute("position",new Float32BufferAttribute(c,3));t.setAttribute("color",new Float32BufferAttribute(u,3));const n=new LineBasicMaterial({vertexColors:true,toneMapped:false});super(t,n);this.type="GridHelper"}dispose(){this.geometry.dispose();this.material.dispose()}}class PolarGridHelper extends LineSegments{constructor(t=10,n=16,i=8,r=64,s=4473924,a=8947848){s=new Color(s);a=new Color(a);const o=[];const l=[];if(n>1){for(let e=0;e<n;e++){const u=e/n*(Math.PI*2);const h=Math.sin(u)*t;const d=Math.cos(u)*t;o.push(0,0,0);o.push(h,0,d);const f=e&1?s:a;l.push(f.r,f.g,f.b);l.push(f.r,f.g,f.b)}}for(let e=0;e<i;e++){const f=e&1?s:a;const p=t-t/i*e;for(let i=0;i<r;i++){let e=i/r*(Math.PI*2);let t=Math.sin(e)*p;let n=Math.cos(e)*p;o.push(t,0,n);l.push(f.r,f.g,f.b);e=(i+1)/r*(Math.PI*2);t=Math.sin(e)*p;n=Math.cos(e)*p;o.push(t,0,n);l.push(f.r,f.g,f.b)}}const e=new BufferGeometry;e.setAttribute("position",new Float32BufferAttribute(o,3));e.setAttribute("color",new Float32BufferAttribute(l,3));const c=new LineBasicMaterial({vertexColors:true,toneMapped:false});super(e,c);this.type="PolarGridHelper"}dispose(){this.geometry.dispose();this.material.dispose()}}const _v1=new Vector3;const _v2=new Vector3;const _v3=new Vector3;class DirectionalLightHelper extends Object3D{constructor(e,t,n){super();this.light=e;this.matrix=e.matrixWorld;this.matrixAutoUpdate=false;this.color=n;this.type="DirectionalLightHelper";if(t===undefined)t=1;let i=new BufferGeometry;i.setAttribute("position",new Float32BufferAttribute([-t,t,0,t,t,0,t,-t,0,-t,-t,0,-t,t,0],3));const r=new LineBasicMaterial({fog:false,toneMapped:false});this.lightPlane=new Line(i,r);this.add(this.lightPlane);i=new BufferGeometry;i.setAttribute("position",new Float32BufferAttribute([0,0,0,0,0,1],3));this.targetLine=new Line(i,r);this.add(this.targetLine);this.update()}dispose(){this.lightPlane.geometry.dispose();this.lightPlane.material.dispose();this.targetLine.geometry.dispose();this.targetLine.material.dispose()}update(){this.light.updateWorldMatrix(true,false);this.light.target.updateWorldMatrix(true,false);_v1.setFromMatrixPosition(this.light.matrixWorld);_v2.setFromMatrixPosition(this.light.target.matrixWorld);_v3.subVectors(_v2,_v1);this.lightPlane.lookAt(_v2);if(this.color!==undefined){this.lightPlane.material.color.set(this.color);this.targetLine.material.color.set(this.color)}else{this.lightPlane.material.color.copy(this.light.color);this.targetLine.material.color.copy(this.light.color)}this.targetLine.lookAt(_v2);this.targetLine.scale.z=_v3.length()}}const _vector=new Vector3;const _camera=new Camera;class CameraHelper extends LineSegments{constructor(e){const t=new BufferGeometry;const n=new LineBasicMaterial({color:16777215,vertexColors:true,toneMapped:false});const i=[];const r=[];const s={};a("n1","n2");a("n2","n4");a("n4","n3");a("n3","n1");a("f1","f2");a("f2","f4");a("f4","f3");a("f3","f1");a("n1","f1");a("n2","f2");a("n3","f3");a("n4","f4");a("p","n1");a("p","n2");a("p","n3");a("p","n4");a("u1","u2");a("u2","u3");a("u3","u1");a("c","t");a("p","c");a("cn1","cn2");a("cn3","cn4");a("cf1","cf2");a("cf3","cf4");function a(e,t){o(e);o(t)}function o(e){i.push(0,0,0);r.push(0,0,0);if(s[e]===undefined){s[e]=[]}s[e].push(i.length/3-1)}t.setAttribute("position",new Float32BufferAttribute(i,3));t.setAttribute("color",new Float32BufferAttribute(r,3));super(t,n);this.type="CameraHelper";this.camera=e;if(this.camera.updateProjectionMatrix)this.camera.updateProjectionMatrix();this.matrix=e.matrixWorld;this.matrixAutoUpdate=false;this.pointMap=s;this.update();const l=new Color(16755200);const c=new Color(16711680);const u=new Color(43775);const h=new Color(16777215);const d=new Color(3355443);this.setColors(l,c,u,h,d)}setColors(e,t,n,i,r){const s=this.geometry;const a=s.getAttribute("color");a.setXYZ(0,e.r,e.g,e.b);a.setXYZ(1,e.r,e.g,e.b);a.setXYZ(2,e.r,e.g,e.b);a.setXYZ(3,e.r,e.g,e.b);a.setXYZ(4,e.r,e.g,e.b);a.setXYZ(5,e.r,e.g,e.b);a.setXYZ(6,e.r,e.g,e.b);a.setXYZ(7,e.r,e.g,e.b);a.setXYZ(8,e.r,e.g,e.b);a.setXYZ(9,e.r,e.g,e.b);a.setXYZ(10,e.r,e.g,e.b);a.setXYZ(11,e.r,e.g,e.b);a.setXYZ(12,e.r,e.g,e.b);a.setXYZ(13,e.r,e.g,e.b);a.setXYZ(14,e.r,e.g,e.b);a.setXYZ(15,e.r,e.g,e.b);a.setXYZ(16,e.r,e.g,e.b);a.setXYZ(17,e.r,e.g,e.b);a.setXYZ(18,e.r,e.g,e.b);a.setXYZ(19,e.r,e.g,e.b);a.setXYZ(20,e.r,e.g,e.b);a.setXYZ(21,e.r,e.g,e.b);a.setXYZ(22,e.r,e.g,e.b);a.setXYZ(23,e.r,e.g,e.b);a.setXYZ(24,t.r,t.g,t.b);a.setXYZ(25,t.r,t.g,t.b);a.setXYZ(26,t.r,t.g,t.b);a.setXYZ(27,t.r,t.g,t.b);a.setXYZ(28,t.r,t.g,t.b);a.setXYZ(29,t.r,t.g,t.b);a.setXYZ(30,t.r,t.g,t.b);a.setXYZ(31,t.r,t.g,t.b);a.setXYZ(32,n.r,n.g,n.b);a.setXYZ(33,n.r,n.g,n.b);a.setXYZ(34,n.r,n.g,n.b);a.setXYZ(35,n.r,n.g,n.b);a.setXYZ(36,n.r,n.g,n.b);a.setXYZ(37,n.r,n.g,n.b);a.setXYZ(38,i.r,i.g,i.b);a.setXYZ(39,i.r,i.g,i.b);a.setXYZ(40,r.r,r.g,r.b);a.setXYZ(41,r.r,r.g,r.b);a.setXYZ(42,r.r,r.g,r.b);a.setXYZ(43,r.r,r.g,r.b);a.setXYZ(44,r.r,r.g,r.b);a.setXYZ(45,r.r,r.g,r.b);a.setXYZ(46,r.r,r.g,r.b);a.setXYZ(47,r.r,r.g,r.b);a.setXYZ(48,r.r,r.g,r.b);a.setXYZ(49,r.r,r.g,r.b);a.needsUpdate=true}update(){const e=this.geometry;const t=this.pointMap;const n=1,i=1;_camera.projectionMatrixInverse.copy(this.camera.projectionMatrixInverse);setPoint("c",t,e,_camera,0,0,-1);setPoint("t",t,e,_camera,0,0,1);setPoint("n1",t,e,_camera,-n,-i,-1);setPoint("n2",t,e,_camera,n,-i,-1);setPoint("n3",t,e,_camera,-n,i,-1);setPoint("n4",t,e,_camera,n,i,-1);setPoint("f1",t,e,_camera,-n,-i,1);setPoint("f2",t,e,_camera,n,-i,1);setPoint("f3",t,e,_camera,-n,i,1);setPoint("f4",t,e,_camera,n,i,1);setPoint("u1",t,e,_camera,n*.7,i*1.1,-1);setPoint("u2",t,e,_camera,-n*.7,i*1.1,-1);setPoint("u3",t,e,_camera,0,i*2,-1);setPoint("cf1",t,e,_camera,-n,0,1);setPoint("cf2",t,e,_camera,n,0,1);setPoint("cf3",t,e,_camera,0,-i,1);setPoint("cf4",t,e,_camera,0,i,1);setPoint("cn1",t,e,_camera,-n,0,-1);setPoint("cn2",t,e,_camera,n,0,-1);setPoint("cn3",t,e,_camera,0,-i,-1);setPoint("cn4",t,e,_camera,0,i,-1);e.getAttribute("position").needsUpdate=true}dispose(){this.geometry.dispose();this.material.dispose()}}function setPoint(e,t,n,i,r,s,a){_vector.set(r,s,a).unproject(i);const o=t[e];if(o!==undefined){const l=n.getAttribute("position");for(let e=0,t=o.length;e<t;e++){l.setXYZ(o[e],_vector.x,_vector.y,_vector.z)}}}const _box=new Box3;class BoxHelper extends LineSegments{constructor(e,t=16776960){const n=new Uint16Array([0,1,1,2,2,3,3,0,4,5,5,6,6,7,7,4,0,4,1,5,2,6,3,7]);const i=new Float32Array(8*3);const r=new BufferGeometry;r.setIndex(new BufferAttribute(n,1));r.setAttribute("position",new BufferAttribute(i,3));super(r,new LineBasicMaterial({color:t,toneMapped:false}));this.object=e;this.type="BoxHelper";this.matrixAutoUpdate=false;this.update()}update(e){if(e!==undefined){console.warn("THREE.BoxHelper: .update() has no longer arguments.")}if(this.object!==undefined){_box.setFromObject(this.object)}if(_box.isEmpty())return;const t=_box.min;const n=_box.max;const i=this.geometry.attributes.position;const r=i.array;r[0]=n.x;r[1]=n.y;r[2]=n.z;r[3]=t.x;r[4]=n.y;r[5]=n.z;r[6]=t.x;r[7]=t.y;r[8]=n.z;r[9]=n.x;r[10]=t.y;r[11]=n.z;r[12]=n.x;r[13]=n.y;r[14]=t.z;r[15]=t.x;r[16]=n.y;r[17]=t.z;r[18]=t.x;r[19]=t.y;r[20]=t.z;r[21]=n.x;r[22]=t.y;r[23]=t.z;i.needsUpdate=true;this.geometry.computeBoundingSphere()}setFromObject(e){this.object=e;this.update();return this}copy(e,t){super.copy(e,t);this.object=e.object;return this}dispose(){this.geometry.dispose();this.material.dispose()}}class Box3Helper extends LineSegments{constructor(e,t=16776960){const n=new Uint16Array([0,1,1,2,2,3,3,0,4,5,5,6,6,7,7,4,0,4,1,5,2,6,3,7]);const i=[1,1,1,-1,1,1,-1,-1,1,1,-1,1,1,1,-1,-1,1,-1,-1,-1,-1,1,-1,-1];const r=new BufferGeometry;r.setIndex(new BufferAttribute(n,1));r.setAttribute("position",new Float32BufferAttribute(i,3));super(r,new LineBasicMaterial({color:t,toneMapped:false}));this.box=e;this.type="Box3Helper";this.geometry.computeBoundingSphere()}updateMatrixWorld(e){const t=this.box;if(t.isEmpty())return;t.getCenter(this.position);t.getSize(this.scale);this.scale.multiplyScalar(.5);super.updateMatrixWorld(e)}dispose(){this.geometry.dispose();this.material.dispose()}}class PlaneHelper extends Line{constructor(e,t=1,n=16776960){const i=n;const r=[1,-1,0,-1,1,0,-1,-1,0,1,1,0,-1,1,0,-1,-1,0,1,-1,0,1,1,0];const s=new BufferGeometry;s.setAttribute("position",new Float32BufferAttribute(r,3));s.computeBoundingSphere();super(s,new LineBasicMaterial({color:i,toneMapped:false}));this.type="PlaneHelper";this.plane=e;this.size=t;const a=[1,1,0,-1,1,0,-1,-1,0,1,1,0,-1,-1,0,1,-1,0];const o=new BufferGeometry;o.setAttribute("position",new Float32BufferAttribute(a,3));o.computeBoundingSphere();this.add(new Mesh(o,new MeshBasicMaterial({color:i,opacity:.2,transparent:true,depthWrite:false,toneMapped:false})))}updateMatrixWorld(e){this.position.set(0,0,0);this.scale.set(.5*this.size,.5*this.size,1);this.lookAt(this.plane.normal);this.translateZ(-this.plane.constant);super.updateMatrixWorld(e)}dispose(){this.geometry.dispose();this.material.dispose();this.children[0].geometry.dispose();this.children[0].material.dispose()}}const _axis=new Vector3;let _lineGeometry,_coneGeometry;class ArrowHelper extends Object3D{constructor(e=new Vector3(0,0,1),t=new Vector3(0,0,0),n=1,i=16776960,r=n*.2,s=r*.2){super();this.type="ArrowHelper";if(_lineGeometry===undefined){_lineGeometry=new BufferGeometry;_lineGeometry.setAttribute("position",new Float32BufferAttribute([0,0,0,0,1,0],3));_coneGeometry=new CylinderGeometry(0,.5,1,5,1);_coneGeometry.translate(0,-.5,0)}this.position.copy(t);this.line=new Line(_lineGeometry,new LineBasicMaterial({color:i,toneMapped:false}));this.line.matrixAutoUpdate=false;this.add(this.line);this.cone=new Mesh(_coneGeometry,new MeshBasicMaterial({color:i,toneMapped:false}));this.cone.matrixAutoUpdate=false;this.add(this.cone);this.setDirection(e);this.setLength(n,r,s)}setDirection(e){if(e.y>.99999){this.quaternion.set(0,0,0,1)}else if(e.y<-.99999){this.quaternion.set(1,0,0,0)}else{_axis.set(e.z,0,-e.x).normalize();const t=Math.acos(e.y);this.quaternion.setFromAxisAngle(_axis,t)}}setLength(e,t=e*.2,n=t*.2){this.line.scale.set(1,Math.max(1e-4,e-t),1);this.line.updateMatrix();this.cone.scale.set(n,t,n);this.cone.position.y=e;this.cone.updateMatrix()}setColor(e){this.line.material.color.set(e);this.cone.material.color.set(e)}copy(e){super.copy(e,false);this.line.copy(e.line);this.cone.copy(e.cone);return this}dispose(){this.line.geometry.dispose();this.line.material.dispose();this.cone.geometry.dispose();this.cone.material.dispose()}}class AxesHelper extends LineSegments{constructor(e=1){const t=[0,0,0,e,0,0,0,0,0,0,e,0,0,0,0,0,0,e];const n=[1,0,0,1,.6,0,0,1,0,.6,1,0,0,0,1,0,.6,1];const i=new BufferGeometry;i.setAttribute("position",new Float32BufferAttribute(t,3));i.setAttribute("color",new Float32BufferAttribute(n,3));const r=new LineBasicMaterial({vertexColors:true,toneMapped:false});super(i,r);this.type="AxesHelper"}setColors(e,t,n){const i=new Color;const r=this.geometry.attributes.color.array;i.set(e);i.toArray(r,0);i.toArray(r,3);i.set(t);i.toArray(r,6);i.toArray(r,9);i.set(n);i.toArray(r,12);i.toArray(r,15);this.geometry.attributes.color.needsUpdate=true;return this}dispose(){this.geometry.dispose();this.material.dispose()}}class ShapePath{constructor(){this.type="ShapePath";this.color=new Color;this.subPaths=[];this.currentPath=null}moveTo(e,t){this.currentPath=new Path;this.subPaths.push(this.currentPath);this.currentPath.moveTo(e,t);return this}lineTo(e,t){this.currentPath.lineTo(e,t);return this}quadraticCurveTo(e,t,n,i){this.currentPath.quadraticCurveTo(e,t,n,i);return this}bezierCurveTo(e,t,n,i,r,s){this.currentPath.bezierCurveTo(e,t,n,i,r,s);return this}splineThru(e){this.currentPath.splineThru(e);return this}toShapes(n){function e(i){const r=[];for(let n=0,e=i.length;n<e;n++){const e=i[n];const t=new Shape;t.curves=e.curves;r.push(t)}return r}function s(a,o){const e=o.length;let l=false;for(let r=e-1,s=0;s<e;r=s++){let e=o[r];let t=o[s];let n=t.x-e.x;let i=t.y-e.y;if(Math.abs(i)>Number.EPSILON){if(i<0){e=o[s];n=-n;t=o[r];i=-i}if(a.y<e.y||a.y>t.y)continue;if(a.y===e.y){if(a.x===e.x)return true}else{const c=i*(a.x-e.x)-n*(a.y-e.y);if(c===0)return true;if(c<0)continue;l=!l}}else{if(a.y!==e.y)continue;if(t.x<=a.x&&a.x<=e.x||e.x<=a.x&&a.x<=t.x)return true}}return l}const i=ShapeUtils.isClockWise;const r=this.subPaths;if(r.length===0)return[];let a,o,l;const c=[];if(r.length===1){o=r[0];l=new Shape;l.curves=o.curves;c.push(l);return c}let u=!i(r[0].getPoints());u=n?!u:u;const h=[];const d=[];let f=[];let p=0;let m;d[p]=undefined;f[p]=[];for(let e=0,t=r.length;e<t;e++){o=r[e];m=o.getPoints();a=i(m);a=n?!a:a;if(a){if(!u&&d[p])p++;d[p]={s:new Shape,p:m};d[p].s.curves=o.curves;if(u)p++;f[p]=[]}else{f[p].push({h:o,p:m[0]})}}if(!d[0])return e(r);if(d.length>1){let i=false;let r=0;for(let e=0,t=d.length;e<t;e++){h[e]=[]}for(let n=0,e=d.length;n<e;n++){const _=f[n];for(let e=0;e<_.length;e++){const v=_[e];let t=true;for(let e=0;e<d.length;e++){if(s(v.p,d[e].p)){if(n!==e)r++;if(t){t=false;h[e].push(v)}else{i=true}}}if(t){h[n].push(v)}}}if(r>0&&i===false){f=h}}let g;for(let e=0,t=d.length;e<t;e++){l=d[e].s;c.push(l);g=f[e];for(let e=0,t=g.length;e<t;e++){l.holes.push(g[e].h)}}return c}}class WebGLMultipleRenderTargets extends WebGLRenderTarget{constructor(e=1,t=1,n=1,i={}){console.warn('THREE.WebGLMultipleRenderTargets has been deprecated and will be removed in r172. Use THREE.WebGLRenderTarget and set the "count" parameter to enable MRT.');super(e,t,{...i,count:n});this.isWebGLMultipleRenderTargets=true}get texture(){return this.textures}}if(typeof __THREE_DEVTOOLS__!=="undefined"){__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("register",{detail:{revision:REVISION}}))}if(typeof window!=="undefined"){if(window.__THREE__){console.warn("WARNING: Multiple instances of Three.js being imported.")}else{window.__THREE__=REVISION}}export{ACESFilmicToneMapping,AddEquation,AddOperation,AdditiveAnimationBlendMode,AdditiveBlending,AgXToneMapping,AlphaFormat,AlwaysCompare,AlwaysDepth,AlwaysStencilFunc,AmbientLight,AnimationAction,AnimationClip,AnimationLoader,AnimationMixer,AnimationObjectGroup,AnimationUtils,ArcCurve,ArrayCamera,ArrowHelper,AttachedBindMode,Audio,AudioAnalyser,AudioContext,AudioListener,AudioLoader,AxesHelper,BackSide,BasicDepthPacking,BasicShadowMap,BatchedMesh,Bone,BooleanKeyframeTrack,Box2,Box3,Box3Helper,BoxGeometry,BoxHelper,BufferAttribute,BufferGeometry,BufferGeometryLoader,ByteType,Cache,Camera,CameraHelper,CanvasTexture,CapsuleGeometry,CatmullRomCurve3,CineonToneMapping,CircleGeometry,ClampToEdgeWrapping,Clock,Color,ColorKeyframeTrack,ColorManagement,CompressedArrayTexture,CompressedCubeTexture,CompressedTexture,CompressedTextureLoader,ConeGeometry,ConstantAlphaFactor,ConstantColorFactor,CubeCamera,CubeReflectionMapping,CubeRefractionMapping,CubeTexture,CubeTextureLoader,CubeUVReflectionMapping,CubicBezierCurve,CubicBezierCurve3,CubicInterpolant,CullFaceBack,CullFaceFront,CullFaceFrontBack,CullFaceNone,Curve,CurvePath,CustomBlending,CustomToneMapping,CylinderGeometry,Cylindrical,Data3DTexture,DataArrayTexture,DataTexture,DataTextureLoader,DataUtils,DecrementStencilOp,DecrementWrapStencilOp,DefaultLoadingManager,DepthFormat,DepthStencilFormat,DepthTexture,DetachedBindMode,DirectionalLight,DirectionalLightHelper,DiscreteInterpolant,DisplayP3ColorSpace,DodecahedronGeometry,DoubleSide,DstAlphaFactor,DstColorFactor,DynamicCopyUsage,DynamicDrawUsage,DynamicReadUsage,EdgesGeometry,EllipseCurve,EqualCompare,EqualDepth,EqualStencilFunc,EquirectangularReflectionMapping,EquirectangularRefractionMapping,Euler,EventDispatcher,ExtrudeGeometry,FileLoader,Float16BufferAttribute,Float32BufferAttribute,FloatType,Fog,FogExp2,FramebufferTexture,FrontSide,Frustum,GLBufferAttribute,GLSL1,GLSL3,GreaterCompare,GreaterDepth,GreaterEqualCompare,GreaterEqualDepth,GreaterEqualStencilFunc,GreaterStencilFunc,GridHelper,Group,HalfFloatType,HemisphereLight,HemisphereLightHelper,IcosahedronGeometry,ImageBitmapLoader,ImageLoader,ImageUtils,IncrementStencilOp,IncrementWrapStencilOp,InstancedBufferAttribute,InstancedBufferGeometry,InstancedInterleavedBuffer,InstancedMesh,Int16BufferAttribute,Int32BufferAttribute,Int8BufferAttribute,IntType,InterleavedBuffer,InterleavedBufferAttribute,Interpolant,InterpolateDiscrete,InterpolateLinear,InterpolateSmooth,InvertStencilOp,KeepStencilOp,KeyframeTrack,LOD,LatheGeometry,Layers,LessCompare,LessDepth,LessEqualCompare,LessEqualDepth,LessEqualStencilFunc,LessStencilFunc,Light,LightProbe,Line,Line3,LineBasicMaterial,LineCurve,LineCurve3,LineDashedMaterial,LineLoop,LineSegments,LinearDisplayP3ColorSpace,LinearFilter,LinearInterpolant,LinearMipMapLinearFilter,LinearMipMapNearestFilter,LinearMipmapLinearFilter,LinearMipmapNearestFilter,LinearSRGBColorSpace,LinearToneMapping,LinearTransfer,Loader,LoaderUtils,LoadingManager,LoopOnce,LoopPingPong,LoopRepeat,LuminanceAlphaFormat,LuminanceFormat,MOUSE,Material,MaterialLoader,MathUtils,Matrix3,Matrix4,MaxEquation,Mesh,MeshBasicMaterial,MeshDepthMaterial,MeshDistanceMaterial,MeshLambertMaterial,MeshMatcapMaterial,MeshNormalMaterial,MeshPhongMaterial,MeshPhysicalMaterial,MeshStandardMaterial,MeshToonMaterial,MinEquation,MirroredRepeatWrapping,MixOperation,MultiplyBlending,MultiplyOperation,NearestFilter,NearestMipMapLinearFilter,NearestMipMapNearestFilter,NearestMipmapLinearFilter,NearestMipmapNearestFilter,NeutralToneMapping,NeverCompare,NeverDepth,NeverStencilFunc,NoBlending,NoColorSpace,NoToneMapping,NormalAnimationBlendMode,NormalBlending,NotEqualCompare,NotEqualDepth,NotEqualStencilFunc,NumberKeyframeTrack,Object3D,ObjectLoader,ObjectSpaceNormalMap,OctahedronGeometry,OneFactor,OneMinusConstantAlphaFactor,OneMinusConstantColorFactor,OneMinusDstAlphaFactor,OneMinusDstColorFactor,OneMinusSrcAlphaFactor,OneMinusSrcColorFactor,OrthographicCamera,P3Primaries,PCFShadowMap,PCFSoftShadowMap,PMREMGenerator,Path,PerspectiveCamera,Plane,PlaneGeometry,PlaneHelper,PointLight,PointLightHelper,Points,PointsMaterial,PolarGridHelper,PolyhedronGeometry,PositionalAudio,PropertyBinding,PropertyMixer,QuadraticBezierCurve,QuadraticBezierCurve3,Quaternion,QuaternionKeyframeTrack,QuaternionLinearInterpolant,RED_GREEN_RGTC2_Format,RED_RGTC1_Format,REVISION,RGBADepthPacking,RGBAFormat,RGBAIntegerFormat,RGBA_ASTC_10x10_Format,RGBA_ASTC_10x5_Format,RGBA_ASTC_10x6_Format,RGBA_ASTC_10x8_Format,RGBA_ASTC_12x10_Format,RGBA_ASTC_12x12_Format,RGBA_ASTC_4x4_Format,RGBA_ASTC_5x4_Format,RGBA_ASTC_5x5_Format,RGBA_ASTC_6x5_Format,RGBA_ASTC_6x6_Format,RGBA_ASTC_8x5_Format,RGBA_ASTC_8x6_Format,RGBA_ASTC_8x8_Format,RGBA_BPTC_Format,RGBA_ETC2_EAC_Format,RGBA_PVRTC_2BPPV1_Format,RGBA_PVRTC_4BPPV1_Format,RGBA_S3TC_DXT1_Format,RGBA_S3TC_DXT3_Format,RGBA_S3TC_DXT5_Format,RGBFormat,RGB_BPTC_SIGNED_Format,RGB_BPTC_UNSIGNED_Format,RGB_ETC1_Format,RGB_ETC2_Format,RGB_PVRTC_2BPPV1_Format,RGB_PVRTC_4BPPV1_Format,RGB_S3TC_DXT1_Format,RGFormat,RGIntegerFormat,RawShaderMaterial,Ray,Raycaster,Rec709Primaries,RectAreaLight,RedFormat,RedIntegerFormat,ReinhardToneMapping,RenderTarget,RepeatWrapping,ReplaceStencilOp,ReverseSubtractEquation,RingGeometry,SIGNED_RED_GREEN_RGTC2_Format,SIGNED_RED_RGTC1_Format,SRGBColorSpace,SRGBTransfer,Scene,ShaderChunk,ShaderLib,ShaderMaterial,ShadowMaterial,Shape,ShapeGeometry,ShapePath,ShapeUtils,ShortType,Skeleton,SkeletonHelper,SkinnedMesh,Source,Sphere,SphereGeometry,Spherical,SphericalHarmonics3,SplineCurve,SpotLight,SpotLightHelper,Sprite,SpriteMaterial,SrcAlphaFactor,SrcAlphaSaturateFactor,SrcColorFactor,StaticCopyUsage,StaticDrawUsage,StaticReadUsage,StereoCamera,StreamCopyUsage,StreamDrawUsage,StreamReadUsage,StringKeyframeTrack,SubtractEquation,SubtractiveBlending,TOUCH,TangentSpaceNormalMap,TetrahedronGeometry,Texture,TextureLoader,TorusGeometry,TorusKnotGeometry,Triangle,TriangleFanDrawMode,TriangleStripDrawMode,TrianglesDrawMode,TubeGeometry,UVMapping,Uint16BufferAttribute,Uint32BufferAttribute,Uint8BufferAttribute,Uint8ClampedBufferAttribute,Uniform,UniformsGroup,UniformsLib,UniformsUtils,UnsignedByteType,UnsignedInt248Type,UnsignedInt5999Type,UnsignedIntType,UnsignedShort4444Type,UnsignedShort5551Type,UnsignedShortType,VSMShadowMap,Vector2,Vector3,Vector4,VectorKeyframeTrack,VideoTexture,WebGL3DRenderTarget,WebGLArrayRenderTarget,WebGLCoordinateSystem,WebGLCubeRenderTarget,WebGLMultipleRenderTargets,WebGLRenderTarget,WebGLRenderer,WebGLUtils,WebGPUCoordinateSystem,WireframeGeometry,WrapAroundEnding,ZeroCurvatureEnding,ZeroFactor,ZeroSlopeEnding,ZeroStencilOp,createCanvasElement};